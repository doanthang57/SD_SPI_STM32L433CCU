
SD_STM32L433CCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  08008e08  08008e08  00018e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800947c  0800947c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800947c  0800947c  0001947c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009484  08009484  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009484  08009484  00019484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009488  08009488  00019488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800948c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045e0  20000088  08009514  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004668  08009514  00024668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165dd  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f47  00000000  00000000  00036695  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001018  00000000  00000000  000395e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  0003a5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025018  00000000  00000000  0003b498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f980  00000000  00000000  000604b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1192  00000000  00000000  0006fe30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140fc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004818  00000000  00000000  00141040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008df0 	.word	0x08008df0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08008df0 	.word	0x08008df0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <SELECT>:

#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0
/* SPI Chip Select */
static void SELECT(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2101      	movs	r1, #1
 8000578:	4802      	ldr	r0, [pc, #8]	; (8000584 <SELECT+0x14>)
 800057a:	f001 fc3b 	bl	8001df4 <HAL_GPIO_WritePin>
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	48000400 	.word	0x48000400

08000588 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2101      	movs	r1, #1
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <DESELECT+0x14>)
 8000592:	f001 fc2f 	bl	8001df4 <HAL_GPIO_WritePin>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	48000400 	.word	0x48000400

080005a0 <SPI_TxByte>:



/* SPI data transfer */
static void SPI_TxByte(BYTE data)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80005aa:	bf00      	nop
 80005ac:	4807      	ldr	r0, [pc, #28]	; (80005cc <SPI_TxByte+0x2c>)
 80005ae:	f003 fb03 	bl	8003bb8 <HAL_SPI_GetState>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d1f9      	bne.n	80005ac <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80005b8:	1df9      	adds	r1, r7, #7
 80005ba:	23c8      	movs	r3, #200	; 0xc8
 80005bc:	2201      	movs	r2, #1
 80005be:	4803      	ldr	r0, [pc, #12]	; (80005cc <SPI_TxByte+0x2c>)
 80005c0:	f002 fe76 	bl	80032b0 <HAL_SPI_Transmit>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200014d4 	.word	0x200014d4

080005d0 <SPI_RxByte>:

/* SPI data send / receive return type function*/
static uint8_t SPI_RxByte(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80005d6:	23ff      	movs	r3, #255	; 0xff
 80005d8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80005de:	bf00      	nop
 80005e0:	4809      	ldr	r0, [pc, #36]	; (8000608 <SPI_RxByte+0x38>)
 80005e2:	f003 fae9 	bl	8003bb8 <HAL_SPI_GetState>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d1f9      	bne.n	80005e0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80005ec:	1dba      	adds	r2, r7, #6
 80005ee:	1df9      	adds	r1, r7, #7
 80005f0:	23c8      	movs	r3, #200	; 0xc8
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2301      	movs	r3, #1
 80005f6:	4804      	ldr	r0, [pc, #16]	; (8000608 <SPI_RxByte+0x38>)
 80005f8:	f002 ffc0 	bl	800357c <HAL_SPI_TransmitReceive>
  
  return data;
 80005fc:	79bb      	ldrb	r3, [r7, #6]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200014d4 	.word	0x200014d4

0800060c <SPI_RxBytePtr>:

/* SPI data send / receive pointer type function */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000614:	f7ff ffdc 	bl	80005d0 <SPI_RxByte>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	701a      	strb	r2, [r3, #0]
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <SD_ReadyWait>:


/* Standby SD card Ready */
static uint8_t SD_ReadyWait(void) 
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500 ms counter ready */
  Timer2 = 50;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <SD_ReadyWait+0x34>)
 8000630:	2232      	movs	r2, #50	; 0x32
 8000632:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000634:	f7ff ffcc 	bl	80005d0 <SPI_RxByte>
  
  do
  {
    /* SPI communication until a value of 0xFF is received */
    res = SPI_RxByte();
 8000638:	f7ff ffca 	bl	80005d0 <SPI_RxByte>
 800063c:	4603      	mov	r3, r0
 800063e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	2bff      	cmp	r3, #255	; 0xff
 8000644:	d004      	beq.n	8000650 <SD_ReadyWait+0x28>
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <SD_ReadyWait+0x34>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1f3      	bne.n	8000638 <SD_ReadyWait+0x10>
  
  return res;
 8000650:	79fb      	ldrb	r3, [r7, #7]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	200014c8 	.word	0x200014c8

08000660 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000666:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800066a:	617b      	str	r3, [r7, #20]
  
  /* In the Deselect state, the SPI message is transmitted to the standby state. */
  DESELECT();
 800066c:	f7ff ff8c 	bl	8000588 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	e005      	b.n	8000682 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000676:	20ff      	movs	r0, #255	; 0xff
 8000678:	f7ff ff92 	bl	80005a0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	3301      	adds	r3, #1
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	2b09      	cmp	r3, #9
 8000686:	ddf6      	ble.n	8000676 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000688:	f7ff ff72 	bl	8000570 <SELECT>
  
  /* Initial GO_IDLE_STATE state transition */
  cmd_arg[0] = (CMD0 | 0x40);
 800068c:	2340      	movs	r3, #64	; 0x40
 800068e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80006a0:	2395      	movs	r3, #149	; 0x95
 80006a2:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission */
  for (int i = 0; i < 6; i++)
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	e009      	b.n	80006be <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80006aa:	1d3a      	adds	r2, r7, #4
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4413      	add	r3, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff74 	bl	80005a0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3301      	adds	r3, #1
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	ddf2      	ble.n	80006aa <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80006c4:	e002      	b.n	80006cc <SD_PowerOn+0x6c>
  {
    Count--;
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80006cc:	f7ff ff80 	bl	80005d0 <SPI_RxByte>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d002      	beq.n	80006dc <SD_PowerOn+0x7c>
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1f4      	bne.n	80006c6 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80006dc:	f7ff ff54 	bl	8000588 <DESELECT>
  SPI_TxByte(0XFF);
 80006e0:	20ff      	movs	r0, #255	; 0xff
 80006e2:	f7ff ff5d 	bl	80005a0 <SPI_TxByte>
  
  PowerFlag = 1;
 80006e6:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <SD_PowerOn+0x94>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200000a5 	.word	0x200000a5

080006f8 <SD_PowerOff>:

/*
Power off */
static void SD_PowerOff(void) 
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <SD_PowerOff+0x14>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	200000a5 	.word	0x200000a5

08000710 <SD_CheckPower>:

/* Check power status*/
static uint8_t SD_CheckPower(void) 
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <SD_CheckPower+0x14>)
 8000716:	781b      	ldrb	r3, [r3, #0]
}
 8000718:	4618      	mov	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	200000a5 	.word	0x200000a5

08000728 <SD_RxDataBlock>:

/*Receive data packet */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms timer */
  Timer1 = 10;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <SD_RxDataBlock+0x68>)
 8000734:	220a      	movs	r2, #10
 8000736:	701a      	strb	r2, [r3, #0]

  /*
Answer waiting */
  do 
  {    
    token = SPI_RxByte();
 8000738:	f7ff ff4a 	bl	80005d0 <SPI_RxByte>
 800073c:	4603      	mov	r3, r0
 800073e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	2bff      	cmp	r3, #255	; 0xff
 8000744:	d104      	bne.n	8000750 <SD_RxDataBlock+0x28>
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <SD_RxDataBlock+0x68>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1f3      	bne.n	8000738 <SD_RxDataBlock+0x10>
  
  /* Error processing when receiving Token other than 0xFE */
  if(token != 0xFE)
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	2bfe      	cmp	r3, #254	; 0xfe
 8000754:	d001      	beq.n	800075a <SD_RxDataBlock+0x32>
    return FALSE;
 8000756:	2300      	movs	r3, #0
 8000758:	e016      	b.n	8000788 <SD_RxDataBlock+0x60>
  
  /*
Receiving data into a buffer */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	607a      	str	r2, [r7, #4]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff53 	bl	800060c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	1c5a      	adds	r2, r3, #1
 800076a:	607a      	str	r2, [r7, #4]
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff4d 	bl	800060c <SPI_RxBytePtr>
  } while(btr -= 2);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	3b02      	subs	r3, #2
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d1ed      	bne.n	800075a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* Ignore CRC*/
 800077e:	f7ff ff27 	bl	80005d0 <SPI_RxByte>
  SPI_RxByte();
 8000782:	f7ff ff25 	bl	80005d0 <SPI_RxByte>
  
  return TRUE;
 8000786:	2301      	movs	r3, #1
}
 8000788:	4618      	mov	r0, r3
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200015bc 	.word	0x200015bc

08000794 <SD_TxDataBlock>:

/*Data transmission packet */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	737b      	strb	r3, [r7, #13]
    
  /* Waiting for SD card preparation */
  if (SD_ReadyWait() != 0xFF)
 80007a4:	f7ff ff40 	bl	8000628 <SD_ReadyWait>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2bff      	cmp	r3, #255	; 0xff
 80007ac:	d001      	beq.n	80007b2 <SD_TxDataBlock+0x1e>
    return FALSE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	e040      	b.n	8000834 <SD_TxDataBlock+0xa0>
  
  /*Token transfer */
  SPI_TxByte(token);      
 80007b2:	78fb      	ldrb	r3, [r7, #3]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fef3 	bl	80005a0 <SPI_TxByte>
  
  /* For data token */
  if (token != 0xFD) 
 80007ba:	78fb      	ldrb	r3, [r7, #3]
 80007bc:	2bfd      	cmp	r3, #253	; 0xfd
 80007be:	d031      	beq.n	8000824 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	73bb      	strb	r3, [r7, #14]
    
    /* 512 byte data transmission */
    do 
    { 
      SPI_TxByte(*buff++);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	1c5a      	adds	r2, r3, #1
 80007c8:	607a      	str	r2, [r7, #4]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fee7 	bl	80005a0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	607a      	str	r2, [r7, #4]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fee0 	bl	80005a0 <SPI_TxByte>
    } while (--wc);
 80007e0:	7bbb      	ldrb	r3, [r7, #14]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	73bb      	strb	r3, [r7, #14]
 80007e6:	7bbb      	ldrb	r3, [r7, #14]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1eb      	bne.n	80007c4 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /*Ignore CRC */
 80007ec:	f7ff fef0 	bl	80005d0 <SPI_RxByte>
    SPI_RxByte();
 80007f0:	f7ff feee 	bl	80005d0 <SPI_RxByte>
    
    /* Receive Date Response*/
    while (i <= 64) 
 80007f4:	e00b      	b.n	800080e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80007f6:	f7ff feeb 	bl	80005d0 <SPI_RxByte>
 80007fa:	4603      	mov	r3, r0
 80007fc:	73fb      	strb	r3, [r7, #15]
      
      /* Error response processing */
      if ((resp & 0x1F) == 0x05) 
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	f003 031f 	and.w	r3, r3, #31
 8000804:	2b05      	cmp	r3, #5
 8000806:	d006      	beq.n	8000816 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8000808:	7b7b      	ldrb	r3, [r7, #13]
 800080a:	3301      	adds	r3, #1
 800080c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800080e:	7b7b      	ldrb	r3, [r7, #13]
 8000810:	2b40      	cmp	r3, #64	; 0x40
 8000812:	d9f0      	bls.n	80007f6 <SD_TxDataBlock+0x62>
 8000814:	e000      	b.n	8000818 <SD_TxDataBlock+0x84>
        break;
 8000816:	bf00      	nop
    }
    
    /*SPI receive buffer clear*/
    while (SPI_RxByte() == 0);
 8000818:	bf00      	nop
 800081a:	f7ff fed9 	bl	80005d0 <SPI_RxByte>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d0fa      	beq.n	800081a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	f003 031f 	and.w	r3, r3, #31
 800082a:	2b05      	cmp	r3, #5
 800082c:	d101      	bne.n	8000832 <SD_TxDataBlock+0x9e>
    return TRUE;
 800082e:	2301      	movs	r3, #1
 8000830:	e000      	b.n	8000834 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD packet transmission */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /*SD card standby */
  if (SD_ReadyWait() != 0xFF)
 8000848:	f7ff feee 	bl	8000628 <SD_ReadyWait>
 800084c:	4603      	mov	r3, r0
 800084e:	2bff      	cmp	r3, #255	; 0xff
 8000850:	d001      	beq.n	8000856 <SD_SendCmd+0x1a>
    return 0xFF;
 8000852:	23ff      	movs	r3, #255	; 0xff
 8000854:	e040      	b.n	80008d8 <SD_SendCmd+0x9c>
  
  /* Command packet transmission */
  SPI_TxByte(cmd); 			/* Command */
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fea1 	bl	80005a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	0e1b      	lsrs	r3, r3, #24
 8000862:	b2db      	uxtb	r3, r3
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fe9b 	bl	80005a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	0c1b      	lsrs	r3, r3, #16
 800086e:	b2db      	uxtb	r3, r3
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fe95 	bl	80005a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fe8f 	bl	80005a0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fe8a 	bl	80005a0 <SPI_TxByte>
  
  /*
Prepare CRC by command */
  crc = 0;  
 800088c:	2300      	movs	r3, #0
 800088e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	2b40      	cmp	r3, #64	; 0x40
 8000894:	d101      	bne.n	800089a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000896:	2395      	movs	r3, #149	; 0x95
 8000898:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b48      	cmp	r3, #72	; 0x48
 800089e:	d101      	bne.n	80008a4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80008a0:	2387      	movs	r3, #135	; 0x87
 80008a2:	73fb      	strb	r3, [r7, #15]
  
  /* CRC transmission */
  SPI_TxByte(crc);
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fe7a 	bl	80005a0 <SPI_TxByte>
  
  /*
For the CMD12 Stop Reading command, discard one response byte */
  if (cmd == CMD12)
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	2b4c      	cmp	r3, #76	; 0x4c
 80008b0:	d101      	bne.n	80008b6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80008b2:	f7ff fe8d 	bl	80005d0 <SPI_RxByte>
  
  /* And receives normal data within 10 times. */
  uint8_t n = 10; 
 80008b6:	230a      	movs	r3, #10
 80008b8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80008ba:	f7ff fe89 	bl	80005d0 <SPI_RxByte>
 80008be:	4603      	mov	r3, r0
 80008c0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80008c2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	da05      	bge.n	80008d6 <SD_SendCmd+0x9a>
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	73bb      	strb	r3, [r7, #14]
 80008d0:	7bbb      	ldrb	r3, [r7, #14]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d1f1      	bne.n	80008ba <SD_SendCmd+0x7e>
  
  return res;
 80008d6:	7b7b      	ldrb	r3, [r7, #13]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <SD_disk_initialize>:
  Used in the user_diskio.c file.
-----------------------------------------------------------------------*/

/* SD card initialization */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /*
Only one type of drive is supported*/
  if(drv)
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80008f0:	2301      	movs	r3, #1
 80008f2:	e0d5      	b.n	8000aa0 <SD_disk_initialize+0x1c0>
  
  /*No SD card inserted */
  if(Stat & STA_NODISK)
 80008f4:	4b6c      	ldr	r3, [pc, #432]	; (8000aa8 <SD_disk_initialize+0x1c8>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <SD_disk_initialize+0x2a>
    return Stat;        
 8000902:	4b69      	ldr	r3, [pc, #420]	; (8000aa8 <SD_disk_initialize+0x1c8>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	e0ca      	b.n	8000aa0 <SD_disk_initialize+0x1c0>
  
  /* SD card Power On */
  SD_PowerOn();         
 800090a:	f7ff fea9 	bl	8000660 <SD_PowerOn>
  
  /*For SPI communication Chip Select */
  SELECT();             
 800090e:	f7ff fe2f 	bl	8000570 <SELECT>
  
  /* SD card type variable initialization*/
  type = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	73bb      	strb	r3, [r7, #14]
  
  /* Idle state entry */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8000916:	2100      	movs	r1, #0
 8000918:	2040      	movs	r0, #64	; 0x40
 800091a:	f7ff ff8f 	bl	800083c <SD_SendCmd>
 800091e:	4603      	mov	r3, r0
 8000920:	2b01      	cmp	r3, #1
 8000922:	f040 80a5 	bne.w	8000a70 <SD_disk_initialize+0x190>
  { 
    /*Timer 1 second set */
    Timer1 = 100;
 8000926:	4b61      	ldr	r3, [pc, #388]	; (8000aac <SD_disk_initialize+0x1cc>)
 8000928:	2264      	movs	r2, #100	; 0x64
 800092a:	701a      	strb	r2, [r3, #0]
    
    /* Confirm SD interface operation condition*/
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 800092c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000930:	2048      	movs	r0, #72	; 0x48
 8000932:	f7ff ff83 	bl	800083c <SD_SendCmd>
 8000936:	4603      	mov	r3, r0
 8000938:	2b01      	cmp	r3, #1
 800093a:	d158      	bne.n	80009ee <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800093c:	2300      	movs	r3, #0
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	e00c      	b.n	800095c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000942:	7bfc      	ldrb	r4, [r7, #15]
 8000944:	f7ff fe44 	bl	80005d0 <SPI_RxByte>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	4423      	add	r3, r4
 8000952:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	3301      	adds	r3, #1
 800095a:	73fb      	strb	r3, [r7, #15]
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	2b03      	cmp	r3, #3
 8000960:	d9ef      	bls.n	8000942 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8000962:	7abb      	ldrb	r3, [r7, #10]
 8000964:	2b01      	cmp	r3, #1
 8000966:	f040 8083 	bne.w	8000a70 <SD_disk_initialize+0x190>
 800096a:	7afb      	ldrb	r3, [r7, #11]
 800096c:	2baa      	cmp	r3, #170	; 0xaa
 800096e:	d17f      	bne.n	8000a70 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V Voltage Range Operation */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000970:	2100      	movs	r1, #0
 8000972:	2077      	movs	r0, #119	; 0x77
 8000974:	f7ff ff62 	bl	800083c <SD_SendCmd>
 8000978:	4603      	mov	r3, r0
 800097a:	2b01      	cmp	r3, #1
 800097c:	d807      	bhi.n	800098e <SD_disk_initialize+0xae>
 800097e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000982:	2069      	movs	r0, #105	; 0x69
 8000984:	f7ff ff5a 	bl	800083c <SD_SendCmd>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d005      	beq.n	800099a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800098e:	4b47      	ldr	r3, [pc, #284]	; (8000aac <SD_disk_initialize+0x1cc>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1eb      	bne.n	8000970 <SD_disk_initialize+0x90>
 8000998:	e000      	b.n	800099c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800099a:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 800099c:	4b43      	ldr	r3, [pc, #268]	; (8000aac <SD_disk_initialize+0x1cc>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d064      	beq.n	8000a70 <SD_disk_initialize+0x190>
 80009a6:	2100      	movs	r1, #0
 80009a8:	207a      	movs	r0, #122	; 0x7a
 80009aa:	f7ff ff47 	bl	800083c <SD_SendCmd>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d15d      	bne.n	8000a70 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	e00c      	b.n	80009d4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80009ba:	7bfc      	ldrb	r4, [r7, #15]
 80009bc:	f7ff fe08 	bl	80005d0 <SPI_RxByte>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4423      	add	r3, r4
 80009ca:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	3301      	adds	r3, #1
 80009d2:	73fb      	strb	r3, [r7, #15]
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	d9ef      	bls.n	80009ba <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80009da:	7a3b      	ldrb	r3, [r7, #8]
 80009dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SD_disk_initialize+0x108>
 80009e4:	2306      	movs	r3, #6
 80009e6:	e000      	b.n	80009ea <SD_disk_initialize+0x10a>
 80009e8:	2302      	movs	r3, #2
 80009ea:	73bb      	strb	r3, [r7, #14]
 80009ec:	e040      	b.n	8000a70 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80009ee:	2100      	movs	r1, #0
 80009f0:	2077      	movs	r0, #119	; 0x77
 80009f2:	f7ff ff23 	bl	800083c <SD_SendCmd>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d808      	bhi.n	8000a0e <SD_disk_initialize+0x12e>
 80009fc:	2100      	movs	r1, #0
 80009fe:	2069      	movs	r0, #105	; 0x69
 8000a00:	f7ff ff1c 	bl	800083c <SD_SendCmd>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d801      	bhi.n	8000a0e <SD_disk_initialize+0x12e>
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	e000      	b.n	8000a10 <SD_disk_initialize+0x130>
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8000a12:	7bbb      	ldrb	r3, [r7, #14]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d10e      	bne.n	8000a36 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2077      	movs	r0, #119	; 0x77
 8000a1c:	f7ff ff0e 	bl	800083c <SD_SendCmd>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d80e      	bhi.n	8000a44 <SD_disk_initialize+0x164>
 8000a26:	2100      	movs	r1, #0
 8000a28:	2069      	movs	r0, #105	; 0x69
 8000a2a:	f7ff ff07 	bl	800083c <SD_SendCmd>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d107      	bne.n	8000a44 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000a34:	e00d      	b.n	8000a52 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000a36:	2100      	movs	r1, #0
 8000a38:	2041      	movs	r0, #65	; 0x41
 8000a3a:	f7ff feff 	bl	800083c <SD_SendCmd>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d005      	beq.n	8000a50 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <SD_disk_initialize+0x1cc>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1e1      	bne.n	8000a12 <SD_disk_initialize+0x132>
 8000a4e:	e000      	b.n	8000a52 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000a50:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <SD_disk_initialize+0x1cc>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d007      	beq.n	8000a6c <SD_disk_initialize+0x18c>
 8000a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a60:	2050      	movs	r0, #80	; 0x50
 8000a62:	f7ff feeb 	bl	800083c <SD_SendCmd>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SD_disk_initialize+0x190>
      {
        /*Select block length */
        type = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8000a70:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <SD_disk_initialize+0x1d0>)
 8000a72:	7bbb      	ldrb	r3, [r7, #14]
 8000a74:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8000a76:	f7ff fd87 	bl	8000588 <DESELECT>
  
  SPI_RxByte(); /*Idle state transition(Release DO) */
 8000a7a:	f7ff fda9 	bl	80005d0 <SPI_RxByte>
  
  if (type) 
 8000a7e:	7bbb      	ldrb	r3, [r7, #14]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d008      	beq.n	8000a96 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <SD_disk_initialize+0x1c8>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	f023 0301 	bic.w	r3, r3, #1
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <SD_disk_initialize+0x1c8>)
 8000a92:	701a      	strb	r2, [r3, #0]
 8000a94:	e001      	b.n	8000a9a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000a96:	f7ff fe2f 	bl	80006f8 <SD_PowerOff>
  }
  
  return Stat;
 8000a9a:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <SD_disk_initialize+0x1c8>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b2db      	uxtb	r3, r3
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd90      	pop	{r4, r7, pc}
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	200015bc 	.word	0x200015bc
 8000ab0:	200000a4 	.word	0x200000a4

08000ab4 <SD_disk_status>:

/*Check disk status*/
DSTATUS SD_disk_status(BYTE drv) 
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e002      	b.n	8000ace <SD_disk_status+0x1a>
  
  return Stat;
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <SD_disk_status+0x28>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b2db      	uxtb	r3, r3
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000000 	.word	0x20000000

08000ae0 <SD_disk_read>:

/*Reading Sectors */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	4603      	mov	r3, r0
 8000aee:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d102      	bne.n	8000afc <SD_disk_read+0x1c>
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d101      	bne.n	8000b00 <SD_disk_read+0x20>
    return RES_PARERR;
 8000afc:	2304      	movs	r3, #4
 8000afe:	e051      	b.n	8000ba4 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8000b00:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <SD_disk_read+0xcc>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	e048      	b.n	8000ba4 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8000b12:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <SD_disk_read+0xd0>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d102      	bne.n	8000b24 <SD_disk_read+0x44>
    sector *= 512;      /* Change designated sector to Byte addressing unit*/
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	025b      	lsls	r3, r3, #9
 8000b22:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8000b24:	f7ff fd24 	bl	8000570 <SELECT>
  
  if (count == 1) 
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d111      	bne.n	8000b52 <SD_disk_read+0x72>
  { 
    /* Single block reading */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	2051      	movs	r0, #81	; 0x51
 8000b32:	f7ff fe83 	bl	800083c <SD_SendCmd>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d129      	bne.n	8000b90 <SD_disk_read+0xb0>
 8000b3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b40:	68b8      	ldr	r0, [r7, #8]
 8000b42:	f7ff fdf1 	bl	8000728 <SD_RxDataBlock>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d021      	beq.n	8000b90 <SD_disk_read+0xb0>
      count = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	e01e      	b.n	8000b90 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* Multiblock Read */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	2052      	movs	r0, #82	; 0x52
 8000b56:	f7ff fe71 	bl	800083c <SD_SendCmd>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d117      	bne.n	8000b90 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b64:	68b8      	ldr	r0, [r7, #8]
 8000b66:	f7ff fddf 	bl	8000728 <SD_RxDataBlock>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d00a      	beq.n	8000b86 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b76:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1ed      	bne.n	8000b60 <SD_disk_read+0x80>
 8000b84:	e000      	b.n	8000b88 <SD_disk_read+0xa8>
          break;
 8000b86:	bf00      	nop
      
      /*STOP_TRANSMISSION, after reading all blocks, */
      SD_SendCmd(CMD12, 0); 
 8000b88:	2100      	movs	r1, #0
 8000b8a:	204c      	movs	r0, #76	; 0x4c
 8000b8c:	f7ff fe56 	bl	800083c <SD_SendCmd>
    }
  }
  
  DESELECT();
 8000b90:	f7ff fcfa 	bl	8000588 <DESELECT>
  SPI_RxByte(); /* Idle state (Release DO) */
 8000b94:	f7ff fd1c 	bl	80005d0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	bf14      	ite	ne
 8000b9e:	2301      	movne	r3, #1
 8000ba0:	2300      	moveq	r3, #0
 8000ba2:	b2db      	uxtb	r3, r3
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	200000a4 	.word	0x200000a4

08000bb4 <SD_disk_write>:

/* Sector writing*/
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d102      	bne.n	8000bd0 <SD_disk_write+0x1c>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d101      	bne.n	8000bd4 <SD_disk_write+0x20>
    return RES_PARERR;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	e06b      	b.n	8000cac <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8000bd4:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <SD_disk_write+0x100>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e062      	b.n	8000cac <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8000be6:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <SD_disk_write+0x100>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	e059      	b.n	8000cac <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8000bf8:	4b2f      	ldr	r3, [pc, #188]	; (8000cb8 <SD_disk_write+0x104>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <SD_disk_write+0x56>
    sector *= 512; /*Change designated sector to Byte addressing unit */
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	025b      	lsls	r3, r3, #9
 8000c08:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8000c0a:	f7ff fcb1 	bl	8000570 <SELECT>
  
  if (count == 1) 
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d110      	bne.n	8000c36 <SD_disk_write+0x82>
  { 
    /* Single block writing */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	2058      	movs	r0, #88	; 0x58
 8000c18:	f7ff fe10 	bl	800083c <SD_SendCmd>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d13a      	bne.n	8000c98 <SD_disk_write+0xe4>
 8000c22:	21fe      	movs	r1, #254	; 0xfe
 8000c24:	68b8      	ldr	r0, [r7, #8]
 8000c26:	f7ff fdb5 	bl	8000794 <SD_TxDataBlock>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d033      	beq.n	8000c98 <SD_disk_write+0xe4>
      count = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	e030      	b.n	8000c98 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* Multiblock Writing */
    if (CardType & 2) 
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <SD_disk_write+0x104>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d007      	beq.n	8000c52 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000c42:	2100      	movs	r1, #0
 8000c44:	2077      	movs	r0, #119	; 0x77
 8000c46:	f7ff fdf9 	bl	800083c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c4a:	6839      	ldr	r1, [r7, #0]
 8000c4c:	2057      	movs	r0, #87	; 0x57
 8000c4e:	f7ff fdf5 	bl	800083c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	2059      	movs	r0, #89	; 0x59
 8000c56:	f7ff fdf1 	bl	800083c <SD_SendCmd>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d11b      	bne.n	8000c98 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000c60:	21fc      	movs	r1, #252	; 0xfc
 8000c62:	68b8      	ldr	r0, [r7, #8]
 8000c64:	f7ff fd96 	bl	8000794 <SD_TxDataBlock>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00a      	beq.n	8000c84 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c74:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1ee      	bne.n	8000c60 <SD_disk_write+0xac>
 8000c82:	e000      	b.n	8000c86 <SD_disk_write+0xd2>
          break;
 8000c84:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8000c86:	21fd      	movs	r1, #253	; 0xfd
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff fd83 	bl	8000794 <SD_TxDataBlock>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <SD_disk_write+0xe4>
      {        
        count = 1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8000c98:	f7ff fc76 	bl	8000588 <DESELECT>
  SPI_RxByte();
 8000c9c:	f7ff fc98 	bl	80005d0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	bf14      	ite	ne
 8000ca6:	2301      	movne	r3, #1
 8000ca8:	2300      	moveq	r3, #0
 8000caa:	b2db      	uxtb	r3, r3
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	200000a4 	.word	0x200000a4

08000cbc <SD_disk_ioctl>:
#endif /* _READONLY */

/* Other functions */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b08b      	sub	sp, #44	; 0x2c
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	603a      	str	r2, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	e117      	b.n	8000f0a <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8000ce0:	79bb      	ldrb	r3, [r7, #6]
 8000ce2:	2b05      	cmp	r3, #5
 8000ce4:	d126      	bne.n	8000d34 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8000ce6:	6a3b      	ldr	r3, [r7, #32]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d00e      	beq.n	8000d0c <SD_disk_ioctl+0x50>
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d012      	beq.n	8000d18 <SD_disk_ioctl+0x5c>
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d11a      	bne.n	8000d2c <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8000cf6:	f7ff fd0b 	bl	8000710 <SD_CheckPower>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8000d00:	f7ff fcfa 	bl	80006f8 <SD_PowerOff>
      res = RES_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d0a:	e0fc      	b.n	8000f06 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8000d0c:	f7ff fca8 	bl	8000660 <SD_PowerOn>
      res = RES_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d16:	e0f6      	b.n	8000f06 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	1c5c      	adds	r4, r3, #1
 8000d1c:	f7ff fcf8 	bl	8000710 <SD_CheckPower>
 8000d20:	4603      	mov	r3, r0
 8000d22:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d2a:	e0ec      	b.n	8000f06 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d32:	e0e8      	b.n	8000f06 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8000d34:	4b77      	ldr	r3, [pc, #476]	; (8000f14 <SD_disk_ioctl+0x258>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8000d42:	2303      	movs	r3, #3
 8000d44:	e0e1      	b.n	8000f0a <SD_disk_ioctl+0x24e>
    
    SELECT();
 8000d46:	f7ff fc13 	bl	8000570 <SELECT>
    
    switch (ctrl) 
 8000d4a:	79bb      	ldrb	r3, [r7, #6]
 8000d4c:	2b0d      	cmp	r3, #13
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <SD_disk_ioctl+0x22c>
 8000d52:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <SD_disk_ioctl+0x9c>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000e53 	.word	0x08000e53
 8000d5c:	08000d91 	.word	0x08000d91
 8000d60:	08000e43 	.word	0x08000e43
 8000d64:	08000ee9 	.word	0x08000ee9
 8000d68:	08000ee9 	.word	0x08000ee9
 8000d6c:	08000ee9 	.word	0x08000ee9
 8000d70:	08000ee9 	.word	0x08000ee9
 8000d74:	08000ee9 	.word	0x08000ee9
 8000d78:	08000ee9 	.word	0x08000ee9
 8000d7c:	08000ee9 	.word	0x08000ee9
 8000d80:	08000ee9 	.word	0x08000ee9
 8000d84:	08000e65 	.word	0x08000e65
 8000d88:	08000e89 	.word	0x08000e89
 8000d8c:	08000ead 	.word	0x08000ead
    {
    case GET_SECTOR_COUNT: 
      /* 	Number of Sectors in SD Card (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8000d90:	2100      	movs	r1, #0
 8000d92:	2049      	movs	r0, #73	; 0x49
 8000d94:	f7ff fd52 	bl	800083c <SD_SendCmd>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 80a8 	bne.w	8000ef0 <SD_disk_ioctl+0x234>
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2110      	movs	r1, #16
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fcbe 	bl	8000728 <SD_RxDataBlock>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 809e 	beq.w	8000ef0 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8000db4:	7b3b      	ldrb	r3, [r7, #12]
 8000db6:	099b      	lsrs	r3, r3, #6
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d10e      	bne.n	8000ddc <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dbe:	7d7b      	ldrb	r3, [r7, #21]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	7d3b      	ldrb	r3, [r7, #20]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	021b      	lsls	r3, r3, #8
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	4413      	add	r3, r2
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	3301      	adds	r3, #1
 8000dd0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000dd2:	8bfb      	ldrh	r3, [r7, #30]
 8000dd4:	029a      	lsls	r2, r3, #10
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	e02e      	b.n	8000e3a <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000ddc:	7c7b      	ldrb	r3, [r7, #17]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	7dbb      	ldrb	r3, [r7, #22]
 8000de6:	09db      	lsrs	r3, r3, #7
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	7d7b      	ldrb	r3, [r7, #21]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 0306 	and.w	r3, r3, #6
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	3302      	adds	r3, #2
 8000e00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e04:	7d3b      	ldrb	r3, [r7, #20]
 8000e06:	099b      	lsrs	r3, r3, #6
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	7cfb      	ldrb	r3, [r7, #19]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	7cbb      	ldrb	r3, [r7, #18]
 8000e1a:	029b      	lsls	r3, r3, #10
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	3301      	adds	r3, #1
 8000e2a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e2c:	8bfa      	ldrh	r2, [r7, #30]
 8000e2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e32:	3b09      	subs	r3, #9
 8000e34:	409a      	lsls	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000e40:	e056      	b.n	8000ef0 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /*Unit size of the sector (WORD) */
      *(WORD*) buff = 512;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e48:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e50:	e055      	b.n	8000efe <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* Write synchronization */
      if (SD_ReadyWait() == 0xFF)
 8000e52:	f7ff fbe9 	bl	8000628 <SD_ReadyWait>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2bff      	cmp	r3, #255	; 0xff
 8000e5a:	d14b      	bne.n	8000ef4 <SD_disk_ioctl+0x238>
        res = RES_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e62:	e047      	b.n	8000ef4 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* Receiving CSD information(16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000e64:	2100      	movs	r1, #0
 8000e66:	2049      	movs	r0, #73	; 0x49
 8000e68:	f7ff fce8 	bl	800083c <SD_SendCmd>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d142      	bne.n	8000ef8 <SD_disk_ioctl+0x23c>
 8000e72:	2110      	movs	r1, #16
 8000e74:	6a38      	ldr	r0, [r7, #32]
 8000e76:	f7ff fc57 	bl	8000728 <SD_RxDataBlock>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d03b      	beq.n	8000ef8 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e86:	e037      	b.n	8000ef8 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* Receiving CID information(16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000e88:	2100      	movs	r1, #0
 8000e8a:	204a      	movs	r0, #74	; 0x4a
 8000e8c:	f7ff fcd6 	bl	800083c <SD_SendCmd>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d132      	bne.n	8000efc <SD_disk_ioctl+0x240>
 8000e96:	2110      	movs	r1, #16
 8000e98:	6a38      	ldr	r0, [r7, #32]
 8000e9a:	f7ff fc45 	bl	8000728 <SD_RxDataBlock>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d02b      	beq.n	8000efc <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000eaa:	e027      	b.n	8000efc <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* Receive OCR information(4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8000eac:	2100      	movs	r1, #0
 8000eae:	207a      	movs	r0, #122	; 0x7a
 8000eb0:	f7ff fcc4 	bl	800083c <SD_SendCmd>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d116      	bne.n	8000ee8 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ec0:	e00b      	b.n	8000eda <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8000ec2:	6a3c      	ldr	r4, [r7, #32]
 8000ec4:	1c63      	adds	r3, r4, #1
 8000ec6:	623b      	str	r3, [r7, #32]
 8000ec8:	f7ff fb82 	bl	80005d0 <SPI_RxByte>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000ed0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d9ef      	bls.n	8000ec2 <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000eee:	e006      	b.n	8000efe <SD_disk_ioctl+0x242>
      break;
 8000ef0:	bf00      	nop
 8000ef2:	e004      	b.n	8000efe <SD_disk_ioctl+0x242>
      break;
 8000ef4:	bf00      	nop
 8000ef6:	e002      	b.n	8000efe <SD_disk_ioctl+0x242>
      break;
 8000ef8:	bf00      	nop
 8000efa:	e000      	b.n	8000efe <SD_disk_ioctl+0x242>
      break;
 8000efc:	bf00      	nop
    }
    
    DESELECT();
 8000efe:	f7ff fb43 	bl	8000588 <DESELECT>
    SPI_RxByte();
 8000f02:	f7ff fb65 	bl	80005d0 <SPI_RxByte>
  }
  
  return res;
 8000f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	372c      	adds	r7, #44	; 0x2c
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd90      	pop	{r4, r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000000 	.word	0x20000000

08000f18 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <SDTimer_Handler+0x40>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d006      	beq.n	8000f34 <SDTimer_Handler+0x1c>
    Timer1--;
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <SDTimer_Handler+0x40>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <SDTimer_Handler+0x40>)
 8000f32:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <SDTimer_Handler+0x44>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d006      	beq.n	8000f4c <SDTimer_Handler+0x34>
    Timer2--;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <SDTimer_Handler+0x44>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	3b01      	subs	r3, #1
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <SDTimer_Handler+0x44>)
 8000f4a:	701a      	strb	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200015bc 	.word	0x200015bc
 8000f5c:	200014c8 	.word	0x200014c8

08000f60 <clear_buffer>:
	while (*buf++ != '\0') i++;
	return i;
}

void clear_buffer (void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	e007      	b.n	8000f7c <clear_buffer+0x1c>
 8000f6c:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <clear_buffer+0x30>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f80:	ddf4      	ble.n	8000f6c <clear_buffer+0xc>
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20001444 	.word	0x20001444

08000f94 <SysTick_Handler>:
void SysTick_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
	  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <SysTick_Handler+0x34>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <SysTick_Handler+0x34>)
 8000fa4:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <SysTick_Handler+0x34>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b09      	cmp	r3, #9
 8000fae:	d904      	bls.n	8000fba <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <SysTick_Handler+0x34>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8000fb6:	f7ff ffaf 	bl	8000f18 <SDTimer_Handler>
	  }

	  /* USER CODE END SysTick_IRQn 0 */
	  HAL_IncTick();
 8000fba:	f000 fc01 	bl	80017c0 <HAL_IncTick>
	  HAL_SYSTICK_IRQHandler();
 8000fbe:	f000 fd50 	bl	8001a62 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000a6 	.word	0x200000a6

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd0:	f000 fba3 	bl	800171a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd4:	f000 f87a 	bl	80010cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd8:	f000 f956 	bl	8001288 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fdc:	f000 f924 	bl	8001228 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000fe0:	f000 f8e4 	bl	80011ac <MX_SPI1_Init>
  MX_FATFS_Init();
 8000fe4:	f003 fda0 	bl	8004b28 <MX_FATFS_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	  fresult = f_mount(&fs, "",1);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	492c      	ldr	r1, [pc, #176]	; (800109c <main+0xd0>)
 8000fec:	482c      	ldr	r0, [pc, #176]	; (80010a0 <main+0xd4>)
 8000fee:	f005 ffdd 	bl	8006fac <f_mount>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <main+0xd8>)
 8000ff8:	701a      	strb	r2, [r3, #0]
	  	  if (fresult != FR_OK) printf ("ERROR!!! in mounting SD CARD...\n\n");
 8000ffa:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <main+0xd8>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <main+0x3e>
 8001002:	4829      	ldr	r0, [pc, #164]	; (80010a8 <main+0xdc>)
 8001004:	f007 f820 	bl	8008048 <puts>
 8001008:	e002      	b.n	8001010 <main+0x44>
	  	  else printf("SD CARD mounted successfully...\n\n");
 800100a:	4828      	ldr	r0, [pc, #160]	; (80010ac <main+0xe0>)
 800100c:	f007 f81c 	bl	8008048 <puts>
	  	  HAL_Delay(1000);
 8001010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001014:	f000 fbf2 	bl	80017fc <HAL_Delay>
	  	  fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001018:	2213      	movs	r2, #19
 800101a:	4925      	ldr	r1, [pc, #148]	; (80010b0 <main+0xe4>)
 800101c:	4825      	ldr	r0, [pc, #148]	; (80010b4 <main+0xe8>)
 800101e:	f006 f80b 	bl	8007038 <f_open>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <main+0xd8>)
 8001028:	701a      	strb	r2, [r3, #0]

	  	  	/* Writing text */
	  	  	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);
 800102a:	4922      	ldr	r1, [pc, #136]	; (80010b4 <main+0xe8>)
 800102c:	4822      	ldr	r0, [pc, #136]	; (80010b8 <main+0xec>)
 800102e:	f006 fe1f 	bl	8007c70 <f_puts>

	  	  	/* Close file */
	  	  	fresult = f_close(&fil);
 8001032:	4820      	ldr	r0, [pc, #128]	; (80010b4 <main+0xe8>)
 8001034:	f006 fd3d 	bl	8007ab2 <f_close>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <main+0xd8>)
 800103e:	701a      	strb	r2, [r3, #0]

	  	  	if (fresult == FR_OK)printf ("File1.txt created and the data is written \n");
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <main+0xd8>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <main+0x82>
 8001048:	481c      	ldr	r0, [pc, #112]	; (80010bc <main+0xf0>)
 800104a:	f006 fffd 	bl	8008048 <puts>

	  	  	/* Open file to read */
	  	  	fresult = f_open(&fil, "file1.txt", FA_READ);
 800104e:	2201      	movs	r2, #1
 8001050:	4917      	ldr	r1, [pc, #92]	; (80010b0 <main+0xe4>)
 8001052:	4818      	ldr	r0, [pc, #96]	; (80010b4 <main+0xe8>)
 8001054:	f005 fff0 	bl	8007038 <f_open>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <main+0xd8>)
 800105e:	701a      	strb	r2, [r3, #0]

	  	  	/* Read string from the file */
	  	  	f_gets(buffer, f_size(&fil), &fil);
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <main+0xe8>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <main+0xe8>)
 8001066:	4619      	mov	r1, r3
 8001068:	4815      	ldr	r0, [pc, #84]	; (80010c0 <main+0xf4>)
 800106a:	f006 fd4c 	bl	8007b06 <f_gets>

	  	  	printf("File1.txt is opened and it contains the data as shown below\n");
 800106e:	4815      	ldr	r0, [pc, #84]	; (80010c4 <main+0xf8>)
 8001070:	f006 ffea 	bl	8008048 <puts>
	  	  	printf(buffer);
 8001074:	4812      	ldr	r0, [pc, #72]	; (80010c0 <main+0xf4>)
 8001076:	f006 ff73 	bl	8007f60 <iprintf>
	  	  	printf("\n\n");
 800107a:	4813      	ldr	r0, [pc, #76]	; (80010c8 <main+0xfc>)
 800107c:	f006 ffe4 	bl	8008048 <puts>

	  	  	/* Close file */
	  	  	f_close(&fil);
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <main+0xe8>)
 8001082:	f006 fd16 	bl	8007ab2 <f_close>

	  	  	clear_buffer();
 8001086:	f7ff ff6b 	bl	8000f60 <clear_buffer>

	  	  printf("File1.txt is opened and it contains the data as shown below\n");
 800108a:	480e      	ldr	r0, [pc, #56]	; (80010c4 <main+0xf8>)
 800108c:	f006 ffdc 	bl	8008048 <puts>
	  	  HAL_Delay(1000);
 8001090:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001094:	f000 fbb2 	bl	80017fc <HAL_Delay>
	  	  fresult = f_mount(&fs, "",1);
 8001098:	e7a6      	b.n	8000fe8 <main+0x1c>
 800109a:	bf00      	nop
 800109c:	08008e08 	.word	0x08008e08
 80010a0:	20000404 	.word	0x20000404
 80010a4:	200014d0 	.word	0x200014d0
 80010a8:	08008e0c 	.word	0x08008e0c
 80010ac:	08008e30 	.word	0x08008e30
 80010b0:	08008e54 	.word	0x08008e54
 80010b4:	200015c0 	.word	0x200015c0
 80010b8:	08008e60 	.word	0x08008e60
 80010bc:	08008ea8 	.word	0x08008ea8
 80010c0:	20001444 	.word	0x20001444
 80010c4:	08008ed4 	.word	0x08008ed4
 80010c8:	08008f10 	.word	0x08008f10

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0ae      	sub	sp, #184	; 0xb8
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010d6:	2244      	movs	r2, #68	; 0x44
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f006 ff38 	bl	8007f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f0:	463b      	mov	r3, r7
 80010f2:	2260      	movs	r2, #96	; 0x60
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f006 ff2a 	bl	8007f50 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010fc:	2302      	movs	r3, #2
 80010fe:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001104:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001108:	2310      	movs	r3, #16
 800110a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110e:	2302      	movs	r3, #2
 8001110:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001114:	2302      	movs	r3, #2
 8001116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800111a:	2301      	movs	r3, #1
 800111c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001120:	2308      	movs	r3, #8
 8001122:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001126:	2307      	movs	r3, #7
 8001128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800112c:	2302      	movs	r3, #2
 800112e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001132:	2302      	movs	r3, #2
 8001134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001138:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fed5 	bl	8001eec <HAL_RCC_OscConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001148:	f000 f8f2 	bl	8001330 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114c:	230f      	movs	r3, #15
 800114e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001150:	2303      	movs	r3, #3
 8001152:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001160:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001164:	2103      	movs	r1, #3
 8001166:	4618      	mov	r0, r3
 8001168:	f001 fae0 	bl	800272c <HAL_RCC_ClockConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001172:	f000 f8dd 	bl	8001330 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001176:	2302      	movs	r3, #2
 8001178:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	4618      	mov	r0, r3
 8001182:	f001 fcd7 	bl	8002b34 <HAL_RCCEx_PeriphCLKConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800118c:	f000 f8d0 	bl	8001330 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001190:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001194:	f000 fe54 	bl	8001e40 <HAL_PWREx_ControlVoltageScaling>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800119e:	f000 f8c7 	bl	8001330 <Error_Handler>
  }
}
 80011a2:	bf00      	nop
 80011a4:	37b8      	adds	r7, #184	; 0xb8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <MX_SPI1_Init+0x74>)
 80011b2:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <MX_SPI1_Init+0x78>)
 80011b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_SPI1_Init+0x74>)
 80011b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_SPI1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_SPI1_Init+0x74>)
 80011c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_SPI1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <MX_SPI1_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_SPI1_Init+0x74>)
 80011da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_SPI1_Init+0x74>)
 80011e2:	2210      	movs	r2, #16
 80011e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_SPI1_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_SPI1_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_SPI1_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_SPI1_Init+0x74>)
 80011fa:	2207      	movs	r2, #7
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_SPI1_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_SPI1_Init+0x74>)
 8001206:	2208      	movs	r2, #8
 8001208:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_SPI1_Init+0x74>)
 800120c:	f001 ffc6 	bl	800319c <HAL_SPI_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001216:	f000 f88b 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200014d4 	.word	0x200014d4
 8001224:	40013000 	.word	0x40013000

08001228 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_USART2_UART_Init+0x58>)
 800122e:	4a15      	ldr	r2, [pc, #84]	; (8001284 <MX_USART2_UART_Init+0x5c>)
 8001230:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_USART2_UART_Init+0x58>)
 8001234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001238:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_USART2_UART_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_USART2_UART_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_USART2_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_USART2_UART_Init+0x58>)
 800124e:	220c      	movs	r2, #12
 8001250:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_USART2_UART_Init+0x58>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_USART2_UART_Init+0x58>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <MX_USART2_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_USART2_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_USART2_UART_Init+0x58>)
 800126c:	f002 fde4 	bl	8003e38 <HAL_UART_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001276:	f000 f85b 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20001538 	.word	0x20001538
 8001284:	40004400 	.word	0x40004400

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <MX_GPIO_Init+0xa0>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	4a21      	ldr	r2, [pc, #132]	; (8001328 <MX_GPIO_Init+0xa0>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012aa:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <MX_GPIO_Init+0xa0>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <MX_GPIO_Init+0xa0>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <MX_GPIO_Init+0xa0>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <MX_GPIO_Init+0xa0>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2110      	movs	r1, #16
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d6:	f000 fd8d 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2101      	movs	r1, #1
 80012de:	4813      	ldr	r0, [pc, #76]	; (800132c <MX_GPIO_Init+0xa4>)
 80012e0:	f000 fd88 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012e4:	2310      	movs	r3, #16
 80012e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f0:	2302      	movs	r3, #2
 80012f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f000 fbff 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001302:	2301      	movs	r3, #1
 8001304:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001306:	2301      	movs	r3, #1
 8001308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130e:	2302      	movs	r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4619      	mov	r1, r3
 8001318:	4804      	ldr	r0, [pc, #16]	; (800132c <MX_GPIO_Init+0xa4>)
 800131a:	f000 fbf1 	bl	8001b00 <HAL_GPIO_Init>

}
 800131e:	bf00      	nop
 8001320:	3720      	adds	r7, #32
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000
 800132c:	48000400 	.word	0x48000400

08001330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <HAL_MspInit+0x44>)
 8001348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134a:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <HAL_MspInit+0x44>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6613      	str	r3, [r2, #96]	; 0x60
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_MspInit+0x44>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_MspInit+0x44>)
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <HAL_MspInit+0x44>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	6593      	str	r3, [r2, #88]	; 0x58
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_MspInit+0x44>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000

08001388 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <HAL_SPI_MspInit+0x8c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d130      	bne.n	800140c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_SPI_MspInit+0x90>)
 80013ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ae:	4a1a      	ldr	r2, [pc, #104]	; (8001418 <HAL_SPI_MspInit+0x90>)
 80013b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013b4:	6613      	str	r3, [r2, #96]	; 0x60
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_SPI_MspInit+0x90>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_SPI_MspInit+0x90>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a14      	ldr	r2, [pc, #80]	; (8001418 <HAL_SPI_MspInit+0x90>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_SPI_MspInit+0x90>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013da:	23e0      	movs	r3, #224	; 0xe0
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ea:	2305      	movs	r3, #5
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f8:	f000 fb82 	bl	8001b00 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	2023      	movs	r0, #35	; 0x23
 8001402:	f000 faf8 	bl	80019f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001406:	2023      	movs	r0, #35	; 0x23
 8001408:	f000 fb11 	bl	8001a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800140c:	bf00      	nop
 800140e:	3728      	adds	r7, #40	; 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40013000 	.word	0x40013000
 8001418:	40021000 	.word	0x40021000

0800141c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a1b      	ldr	r2, [pc, #108]	; (80014a8 <HAL_UART_MspInit+0x8c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d130      	bne.n	80014a0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <HAL_UART_MspInit+0x90>)
 8001440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001442:	4a1a      	ldr	r2, [pc, #104]	; (80014ac <HAL_UART_MspInit+0x90>)
 8001444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001448:	6593      	str	r3, [r2, #88]	; 0x58
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <HAL_UART_MspInit+0x90>)
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_UART_MspInit+0x90>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	4a14      	ldr	r2, [pc, #80]	; (80014ac <HAL_UART_MspInit+0x90>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_UART_MspInit+0x90>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800146e:	230c      	movs	r3, #12
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800147e:	2307      	movs	r3, #7
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148c:	f000 fb38 	bl	8001b00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	2026      	movs	r0, #38	; 0x26
 8001496:	f000 faae 	bl	80019f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800149a:	2026      	movs	r0, #38	; 0x26
 800149c:	f000 fac7 	bl	8001a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014a0:	bf00      	nop
 80014a2:	3728      	adds	r7, #40	; 0x28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40004400 	.word	0x40004400
 80014ac:	40021000 	.word	0x40021000

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <MemManage_Handler+0x4>

080014ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <SPI1_IRQHandler+0x10>)
 8001506:	f002 fa4d 	bl	80039a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200014d4 	.word	0x200014d4

08001514 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <USART2_IRQHandler+0x10>)
 800151a:	f002 fcdb 	bl	8003ed4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20001538 	.word	0x20001538

08001528 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	e00a      	b.n	8001550 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800153a:	f3af 8000 	nop.w
 800153e:	4601      	mov	r1, r0
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	60ba      	str	r2, [r7, #8]
 8001546:	b2ca      	uxtb	r2, r1
 8001548:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbf0      	blt.n	800153a <_read+0x12>
	}

return len;
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	e009      	b.n	8001588 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	60ba      	str	r2, [r7, #8]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	dbf1      	blt.n	8001574 <_write+0x12>
	}
	return len;
 8001590:	687b      	ldr	r3, [r7, #4]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_close>:

int _close(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	return -1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c2:	605a      	str	r2, [r3, #4]
	return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_isatty>:

int _isatty(int file)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
	return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
	return 0;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <_sbrk+0x50>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <_sbrk+0x16>
		heap_end = &end;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <_sbrk+0x50>)
 8001616:	4a10      	ldr	r2, [pc, #64]	; (8001658 <_sbrk+0x54>)
 8001618:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <_sbrk+0x50>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <_sbrk+0x50>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4413      	add	r3, r2
 8001628:	466a      	mov	r2, sp
 800162a:	4293      	cmp	r3, r2
 800162c:	d907      	bls.n	800163e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800162e:	f006 fc65 	bl	8007efc <__errno>
 8001632:	4602      	mov	r2, r0
 8001634:	230c      	movs	r3, #12
 8001636:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001638:	f04f 33ff 	mov.w	r3, #4294967295
 800163c:	e006      	b.n	800164c <_sbrk+0x48>
	}

	heap_end += incr;
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <_sbrk+0x50>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	4a03      	ldr	r2, [pc, #12]	; (8001654 <_sbrk+0x50>)
 8001648:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200000a8 	.word	0x200000a8
 8001658:	20004668 	.word	0x20004668

0800165c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <SystemInit+0x64>)
 8001662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001666:	4a16      	ldr	r2, [pc, #88]	; (80016c0 <SystemInit+0x64>)
 8001668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800166c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <SystemInit+0x68>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a13      	ldr	r2, [pc, #76]	; (80016c4 <SystemInit+0x68>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <SystemInit+0x68>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <SystemInit+0x68>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <SystemInit+0x68>)
 8001688:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800168c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001690:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <SystemInit+0x68>)
 8001694:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001698:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <SystemInit+0x68>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a09      	ldr	r2, [pc, #36]	; (80016c4 <SystemInit+0x68>)
 80016a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <SystemInit+0x68>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <SystemInit+0x64>)
 80016ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016b2:	609a      	str	r2, [r3, #8]
#endif
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00
 80016c4:	40021000 	.word	0x40021000

080016c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001700 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016ce:	e003      	b.n	80016d8 <LoopCopyDataInit>

080016d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016d6:	3104      	adds	r1, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016d8:	480b      	ldr	r0, [pc, #44]	; (8001708 <LoopForever+0xa>)
	ldr	r3, =_edata
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <LoopForever+0xe>)
	adds	r2, r0, r1
 80016dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016e0:	d3f6      	bcc.n	80016d0 <CopyDataInit>
	ldr	r2, =_sbss
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016e4:	e002      	b.n	80016ec <LoopFillZerobss>

080016e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016e8:	f842 3b04 	str.w	r3, [r2], #4

080016ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <LoopForever+0x16>)
	cmp	r2, r3
 80016ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016f0:	d3f9      	bcc.n	80016e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016f2:	f7ff ffb3 	bl	800165c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f6:	f006 fc07 	bl	8007f08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016fa:	f7ff fc67 	bl	8000fcc <main>

080016fe <LoopForever>:

LoopForever:
    b LoopForever
 80016fe:	e7fe      	b.n	80016fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001700:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001704:	0800948c 	.word	0x0800948c
	ldr	r0, =_sdata
 8001708:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800170c:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8001710:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8001714:	20004668 	.word	0x20004668

08001718 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC1_IRQHandler>

0800171a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001724:	2003      	movs	r0, #3
 8001726:	f000 f95b 	bl	80019e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f80e 	bl	800174c <HAL_InitTick>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	71fb      	strb	r3, [r7, #7]
 800173a:	e001      	b.n	8001740 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800173c:	f7ff fe00 	bl	8001340 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001740:	79fb      	ldrb	r3, [r7, #7]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <HAL_InitTick+0x68>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d022      	beq.n	80017a6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_InitTick+0x6c>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <HAL_InitTick+0x68>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800176c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001770:	fbb2 f3f3 	udiv	r3, r2, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f000 f968 	bl	8001a4a <HAL_SYSTICK_Config>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10f      	bne.n	80017a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	d809      	bhi.n	800179a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001786:	2200      	movs	r2, #0
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	f04f 30ff 	mov.w	r0, #4294967295
 800178e:	f000 f932 	bl	80019f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_InitTick+0x70>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	e007      	b.n	80017aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	e004      	b.n	80017aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
 80017a4:	e001      	b.n	80017aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2000000c 	.word	0x2000000c
 80017b8:	20000004 	.word	0x20000004
 80017bc:	20000008 	.word	0x20000008

080017c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_IncTick+0x1c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_IncTick+0x20>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a03      	ldr	r2, [pc, #12]	; (80017dc <HAL_IncTick+0x1c>)
 80017d0:	6013      	str	r3, [r2, #0]
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	200025f0 	.word	0x200025f0
 80017e0:	2000000c 	.word	0x2000000c

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	200025f0 	.word	0x200025f0

080017fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001804:	f7ff ffee 	bl	80017e4 <HAL_GetTick>
 8001808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001814:	d004      	beq.n	8001820 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_Delay+0x40>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	4413      	add	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001820:	bf00      	nop
 8001822:	f7ff ffdf 	bl	80017e4 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	429a      	cmp	r2, r3
 8001830:	d8f7      	bhi.n	8001822 <HAL_Delay+0x26>
  {
  }
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000000c 	.word	0x2000000c

08001840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800186c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	; (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <__NVIC_GetPriorityGrouping+0x18>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	f003 0307 	and.w	r3, r3, #7
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	db0b      	blt.n	80018ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	f003 021f 	and.w	r2, r3, #31
 80018bc:	4907      	ldr	r1, [pc, #28]	; (80018dc <__NVIC_EnableIRQ+0x38>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	2001      	movs	r0, #1
 80018c6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000e100 	.word	0xe000e100

080018e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	db0a      	blt.n	800190a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	490c      	ldr	r1, [pc, #48]	; (800192c <__NVIC_SetPriority+0x4c>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	0112      	lsls	r2, r2, #4
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	440b      	add	r3, r1
 8001904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001908:	e00a      	b.n	8001920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4908      	ldr	r1, [pc, #32]	; (8001930 <__NVIC_SetPriority+0x50>)
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	3b04      	subs	r3, #4
 8001918:	0112      	lsls	r2, r2, #4
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	440b      	add	r3, r1
 800191e:	761a      	strb	r2, [r3, #24]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000e100 	.word	0xe000e100
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	; 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f1c3 0307 	rsb	r3, r3, #7
 800194e:	2b04      	cmp	r3, #4
 8001950:	bf28      	it	cs
 8001952:	2304      	movcs	r3, #4
 8001954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3304      	adds	r3, #4
 800195a:	2b06      	cmp	r3, #6
 800195c:	d902      	bls.n	8001964 <NVIC_EncodePriority+0x30>
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3b03      	subs	r3, #3
 8001962:	e000      	b.n	8001966 <NVIC_EncodePriority+0x32>
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	f04f 32ff 	mov.w	r2, #4294967295
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	401a      	ands	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800197c:	f04f 31ff 	mov.w	r1, #4294967295
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	43d9      	mvns	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	4313      	orrs	r3, r2
         );
}
 800198e:	4618      	mov	r0, r3
 8001990:	3724      	adds	r7, #36	; 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ac:	d301      	bcc.n	80019b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00f      	b.n	80019d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b2:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <SysTick_Config+0x40>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ba:	210f      	movs	r1, #15
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f7ff ff8e 	bl	80018e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <SysTick_Config+0x40>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ca:	4b04      	ldr	r3, [pc, #16]	; (80019dc <SysTick_Config+0x40>)
 80019cc:	2207      	movs	r2, #7
 80019ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	e000e010 	.word	0xe000e010

080019e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff29 	bl	8001840 <__NVIC_SetPriorityGrouping>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a08:	f7ff ff3e 	bl	8001888 <__NVIC_GetPriorityGrouping>
 8001a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	6978      	ldr	r0, [r7, #20]
 8001a14:	f7ff ff8e 	bl	8001934 <NVIC_EncodePriority>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff5d 	bl	80018e0 <__NVIC_SetPriority>
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff31 	bl	80018a4 <__NVIC_EnableIRQ>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffa2 	bl	800199c <SysTick_Config>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001a66:	f000 f802 	bl	8001a6e <HAL_SYSTICK_Callback>
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d005      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2204      	movs	r2, #4
 8001a98:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	73fb      	strb	r3, [r7, #15]
 8001a9e:	e029      	b.n	8001af4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 020e 	bic.w	r2, r2, #14
 8001aae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0201 	bic.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	f003 021c 	and.w	r2, r3, #28
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	2101      	movs	r1, #1
 8001ace:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	4798      	blx	r3
    }
  }
  return status;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0e:	e154      	b.n	8001dba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	2101      	movs	r1, #1
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8146 	beq.w	8001db4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d00b      	beq.n	8001b48 <HAL_GPIO_Init+0x48>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d007      	beq.n	8001b48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b3c:	2b11      	cmp	r3, #17
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b12      	cmp	r3, #18
 8001b46:	d130      	bne.n	8001baa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b7e:	2201      	movs	r2, #1
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	091b      	lsrs	r3, r3, #4
 8001b94:	f003 0201 	and.w	r2, r3, #1
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0xea>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b12      	cmp	r3, #18
 8001be8:	d123      	bne.n	8001c32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	08da      	lsrs	r2, r3, #3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3208      	adds	r2, #8
 8001bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	220f      	movs	r2, #15
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	691a      	ldr	r2, [r3, #16]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	08da      	lsrs	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3208      	adds	r2, #8
 8001c2c:	6939      	ldr	r1, [r7, #16]
 8001c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 0203 	and.w	r2, r3, #3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 80a0 	beq.w	8001db4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c74:	4b58      	ldr	r3, [pc, #352]	; (8001dd8 <HAL_GPIO_Init+0x2d8>)
 8001c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c78:	4a57      	ldr	r2, [pc, #348]	; (8001dd8 <HAL_GPIO_Init+0x2d8>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c80:	4b55      	ldr	r3, [pc, #340]	; (8001dd8 <HAL_GPIO_Init+0x2d8>)
 8001c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c8c:	4a53      	ldr	r2, [pc, #332]	; (8001ddc <HAL_GPIO_Init+0x2dc>)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	220f      	movs	r2, #15
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cb6:	d019      	beq.n	8001cec <HAL_GPIO_Init+0x1ec>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a49      	ldr	r2, [pc, #292]	; (8001de0 <HAL_GPIO_Init+0x2e0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d013      	beq.n	8001ce8 <HAL_GPIO_Init+0x1e8>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a48      	ldr	r2, [pc, #288]	; (8001de4 <HAL_GPIO_Init+0x2e4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d00d      	beq.n	8001ce4 <HAL_GPIO_Init+0x1e4>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a47      	ldr	r2, [pc, #284]	; (8001de8 <HAL_GPIO_Init+0x2e8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d007      	beq.n	8001ce0 <HAL_GPIO_Init+0x1e0>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a46      	ldr	r2, [pc, #280]	; (8001dec <HAL_GPIO_Init+0x2ec>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d101      	bne.n	8001cdc <HAL_GPIO_Init+0x1dc>
 8001cd8:	2304      	movs	r3, #4
 8001cda:	e008      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001cdc:	2307      	movs	r3, #7
 8001cde:	e006      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e004      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e002      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001cec:	2300      	movs	r3, #0
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	f002 0203 	and.w	r2, r2, #3
 8001cf4:	0092      	lsls	r2, r2, #2
 8001cf6:	4093      	lsls	r3, r2
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cfe:	4937      	ldr	r1, [pc, #220]	; (8001ddc <HAL_GPIO_Init+0x2dc>)
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d0c:	4b38      	ldr	r3, [pc, #224]	; (8001df0 <HAL_GPIO_Init+0x2f0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d30:	4a2f      	ldr	r2, [pc, #188]	; (8001df0 <HAL_GPIO_Init+0x2f0>)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d36:	4b2e      	ldr	r3, [pc, #184]	; (8001df0 <HAL_GPIO_Init+0x2f0>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d5a:	4a25      	ldr	r2, [pc, #148]	; (8001df0 <HAL_GPIO_Init+0x2f0>)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d60:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <HAL_GPIO_Init+0x2f0>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d84:	4a1a      	ldr	r2, [pc, #104]	; (8001df0 <HAL_GPIO_Init+0x2f0>)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_GPIO_Init+0x2f0>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <HAL_GPIO_Init+0x2f0>)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3301      	adds	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f47f aea3 	bne.w	8001b10 <HAL_GPIO_Init+0x10>
  }
}
 8001dca:	bf00      	nop
 8001dcc:	371c      	adds	r7, #28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010000 	.word	0x40010000
 8001de0:	48000400 	.word	0x48000400
 8001de4:	48000800 	.word	0x48000800
 8001de8:	48000c00 	.word	0x48000c00
 8001dec:	48001000 	.word	0x48001000
 8001df0:	40010400 	.word	0x40010400

08001df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
 8001e00:	4613      	mov	r3, r2
 8001e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e04:	787b      	ldrb	r3, [r7, #1]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e0a:	887a      	ldrh	r2, [r7, #2]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e10:	e002      	b.n	8001e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40007000 	.word	0x40007000

08001e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e4e:	d130      	bne.n	8001eb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e50:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e5c:	d038      	beq.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e66:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2232      	movs	r2, #50	; 0x32
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0c9b      	lsrs	r3, r3, #18
 8001e80:	3301      	adds	r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e84:	e002      	b.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e98:	d102      	bne.n	8001ea0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f2      	bne.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eac:	d110      	bne.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e00f      	b.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ebe:	d007      	beq.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ec8:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ece:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	20000004 	.word	0x20000004
 8001ee8:	431bde83 	.word	0x431bde83

08001eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	f000 bc11 	b.w	8002722 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f00:	4ba0      	ldr	r3, [pc, #640]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f0a:	4b9e      	ldr	r3, [pc, #632]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80e4 	beq.w	80020ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4c>
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	f040 808b 	bne.w	8002046 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	f040 8087 	bne.w	8002046 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f38:	4b92      	ldr	r3, [pc, #584]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_OscConfig+0x64>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e3e8      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	4b8b      	ldr	r3, [pc, #556]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d004      	beq.n	8001f6a <HAL_RCC_OscConfig+0x7e>
 8001f60:	4b88      	ldr	r3, [pc, #544]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f68:	e005      	b.n	8001f76 <HAL_RCC_OscConfig+0x8a>
 8001f6a:	4b86      	ldr	r3, [pc, #536]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8001f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d223      	bcs.n	8001fc2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fd78 	bl	8002a74 <RCC_SetFlashLatencyFromMSIRange>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e3c9      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f8e:	4b7d      	ldr	r3, [pc, #500]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a7c      	ldr	r2, [pc, #496]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8001f94:	f043 0308 	orr.w	r3, r3, #8
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	4b7a      	ldr	r3, [pc, #488]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4977      	ldr	r1, [pc, #476]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fac:	4b75      	ldr	r3, [pc, #468]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	4972      	ldr	r1, [pc, #456]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
 8001fc0:	e025      	b.n	800200e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc2:	4b70      	ldr	r3, [pc, #448]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a6f      	ldr	r2, [pc, #444]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b6d      	ldr	r3, [pc, #436]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	496a      	ldr	r1, [pc, #424]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe0:	4b68      	ldr	r3, [pc, #416]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	4965      	ldr	r1, [pc, #404]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d109      	bne.n	800200e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fd38 	bl	8002a74 <RCC_SetFlashLatencyFromMSIRange>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e389      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800200e:	f000 fc6f 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8002012:	4601      	mov	r1, r0
 8002014:	4b5b      	ldr	r3, [pc, #364]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	4a5a      	ldr	r2, [pc, #360]	; (8002188 <HAL_RCC_OscConfig+0x29c>)
 8002020:	5cd3      	ldrb	r3, [r2, r3]
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	fa21 f303 	lsr.w	r3, r1, r3
 800202a:	4a58      	ldr	r2, [pc, #352]	; (800218c <HAL_RCC_OscConfig+0x2a0>)
 800202c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800202e:	4b58      	ldr	r3, [pc, #352]	; (8002190 <HAL_RCC_OscConfig+0x2a4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fb8a 	bl	800174c <HAL_InitTick>
 8002038:	4603      	mov	r3, r0
 800203a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d052      	beq.n	80020e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	e36d      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d032      	beq.n	80020b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800204e:	4b4d      	ldr	r3, [pc, #308]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a4c      	ldr	r2, [pc, #304]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800205a:	f7ff fbc3 	bl	80017e4 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002062:	f7ff fbbf 	bl	80017e4 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e356      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002074:	4b43      	ldr	r3, [pc, #268]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002080:	4b40      	ldr	r3, [pc, #256]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a3f      	ldr	r2, [pc, #252]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8002086:	f043 0308 	orr.w	r3, r3, #8
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	493a      	ldr	r1, [pc, #232]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800209e:	4b39      	ldr	r3, [pc, #228]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	4935      	ldr	r1, [pc, #212]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
 80020b2:	e01a      	b.n	80020ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020b4:	4b33      	ldr	r3, [pc, #204]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a32      	ldr	r2, [pc, #200]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020c0:	f7ff fb90 	bl	80017e4 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020c8:	f7ff fb8c 	bl	80017e4 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e323      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020da:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x1dc>
 80020e6:	e000      	b.n	80020ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d073      	beq.n	80021de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_OscConfig+0x21c>
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d10e      	bne.n	8002120 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d10b      	bne.n	8002120 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d063      	beq.n	80021dc <HAL_RCC_OscConfig+0x2f0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d15f      	bne.n	80021dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e300      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d106      	bne.n	8002138 <HAL_RCC_OscConfig+0x24c>
 800212a:	4b16      	ldr	r3, [pc, #88]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a15      	ldr	r2, [pc, #84]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e01d      	b.n	8002174 <HAL_RCC_OscConfig+0x288>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x270>
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a0f      	ldr	r2, [pc, #60]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0x288>
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a08      	ldr	r2, [pc, #32]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a05      	ldr	r2, [pc, #20]	; (8002184 <HAL_RCC_OscConfig+0x298>)
 800216e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01b      	beq.n	80021b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7ff fb32 	bl	80017e4 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002182:	e010      	b.n	80021a6 <HAL_RCC_OscConfig+0x2ba>
 8002184:	40021000 	.word	0x40021000
 8002188:	08008f5c 	.word	0x08008f5c
 800218c:	20000004 	.word	0x20000004
 8002190:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7ff fb26 	bl	80017e4 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e2bd      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a6:	4baf      	ldr	r3, [pc, #700]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x2a8>
 80021b2:	e014      	b.n	80021de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff fb16 	bl	80017e4 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7ff fb12 	bl	80017e4 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e2a9      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ce:	4ba5      	ldr	r3, [pc, #660]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x2d0>
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d060      	beq.n	80022ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_OscConfig+0x310>
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d119      	bne.n	800222a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d116      	bne.n	800222a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021fc:	4b99      	ldr	r3, [pc, #612]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_OscConfig+0x328>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e286      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002214:	4b93      	ldr	r3, [pc, #588]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	061b      	lsls	r3, r3, #24
 8002222:	4990      	ldr	r1, [pc, #576]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002228:	e040      	b.n	80022ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d023      	beq.n	800227a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002232:	4b8c      	ldr	r3, [pc, #560]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a8b      	ldr	r2, [pc, #556]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7ff fad1 	bl	80017e4 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002246:	f7ff facd 	bl	80017e4 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e264      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002258:	4b82      	ldr	r3, [pc, #520]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002264:	4b7f      	ldr	r3, [pc, #508]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	061b      	lsls	r3, r3, #24
 8002272:	497c      	ldr	r1, [pc, #496]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
 8002278:	e018      	b.n	80022ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227a:	4b7a      	ldr	r3, [pc, #488]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a79      	ldr	r2, [pc, #484]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 8002280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002286:	f7ff faad 	bl	80017e4 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228e:	f7ff faa9 	bl	80017e4 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e240      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a0:	4b70      	ldr	r3, [pc, #448]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f0      	bne.n	800228e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d03c      	beq.n	8002332 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01c      	beq.n	80022fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c0:	4b68      	ldr	r3, [pc, #416]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 80022c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c6:	4a67      	ldr	r2, [pc, #412]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7ff fa88 	bl	80017e4 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d8:	f7ff fa84 	bl	80017e4 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e21b      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ea:	4b5e      	ldr	r3, [pc, #376]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 80022ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0ef      	beq.n	80022d8 <HAL_RCC_OscConfig+0x3ec>
 80022f8:	e01b      	b.n	8002332 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fa:	4b5a      	ldr	r3, [pc, #360]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 80022fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002300:	4a58      	ldr	r2, [pc, #352]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230a:	f7ff fa6b 	bl	80017e4 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002312:	f7ff fa67 	bl	80017e4 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e1fe      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002324:	4b4f      	ldr	r3, [pc, #316]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 8002326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1ef      	bne.n	8002312 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80a6 	beq.w	800248c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002340:	2300      	movs	r3, #0
 8002342:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002344:	4b47      	ldr	r3, [pc, #284]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10d      	bne.n	800236c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002350:	4b44      	ldr	r3, [pc, #272]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	4a43      	ldr	r2, [pc, #268]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 8002356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235a:	6593      	str	r3, [r2, #88]	; 0x58
 800235c:	4b41      	ldr	r3, [pc, #260]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002368:	2301      	movs	r3, #1
 800236a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800236c:	4b3e      	ldr	r3, [pc, #248]	; (8002468 <HAL_RCC_OscConfig+0x57c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d118      	bne.n	80023aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002378:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <HAL_RCC_OscConfig+0x57c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a3a      	ldr	r2, [pc, #232]	; (8002468 <HAL_RCC_OscConfig+0x57c>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002382:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002384:	f7ff fa2e 	bl	80017e4 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238c:	f7ff fa2a 	bl	80017e4 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1c1      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239e:	4b32      	ldr	r3, [pc, #200]	; (8002468 <HAL_RCC_OscConfig+0x57c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d108      	bne.n	80023c4 <HAL_RCC_OscConfig+0x4d8>
 80023b2:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b8:	4a2a      	ldr	r2, [pc, #168]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c2:	e024      	b.n	800240e <HAL_RCC_OscConfig+0x522>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d110      	bne.n	80023ee <HAL_RCC_OscConfig+0x502>
 80023cc:	4b25      	ldr	r3, [pc, #148]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d2:	4a24      	ldr	r2, [pc, #144]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023dc:	4b21      	ldr	r3, [pc, #132]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e2:	4a20      	ldr	r2, [pc, #128]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023ec:	e00f      	b.n	800240e <HAL_RCC_OscConfig+0x522>
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f4:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 80023f6:	f023 0301 	bic.w	r3, r3, #1
 80023fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023fe:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002404:	4a17      	ldr	r2, [pc, #92]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 8002406:	f023 0304 	bic.w	r3, r3, #4
 800240a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d016      	beq.n	8002444 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002416:	f7ff f9e5 	bl	80017e4 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	f7ff f9e1 	bl	80017e4 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	f241 3288 	movw	r2, #5000	; 0x1388
 800242c:	4293      	cmp	r3, r2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e176      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_RCC_OscConfig+0x578>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0ed      	beq.n	800241e <HAL_RCC_OscConfig+0x532>
 8002442:	e01a      	b.n	800247a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002444:	f7ff f9ce 	bl	80017e4 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800244a:	e00f      	b.n	800246c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244c:	f7ff f9ca 	bl	80017e4 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	; 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d906      	bls.n	800246c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e15f      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800246c:	4baa      	ldr	r3, [pc, #680]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1e8      	bne.n	800244c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800247a:	7ffb      	ldrb	r3, [r7, #31]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d105      	bne.n	800248c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002480:	4ba5      	ldr	r3, [pc, #660]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	4aa4      	ldr	r2, [pc, #656]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 8002486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b00      	cmp	r3, #0
 8002496:	d03c      	beq.n	8002512 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01c      	beq.n	80024da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024a0:	4b9d      	ldr	r3, [pc, #628]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 80024a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024a6:	4a9c      	ldr	r2, [pc, #624]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b0:	f7ff f998 	bl	80017e4 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024b8:	f7ff f994 	bl	80017e4 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e12b      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ca:	4b93      	ldr	r3, [pc, #588]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 80024cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ef      	beq.n	80024b8 <HAL_RCC_OscConfig+0x5cc>
 80024d8:	e01b      	b.n	8002512 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024da:	4b8f      	ldr	r3, [pc, #572]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 80024dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024e0:	4a8d      	ldr	r2, [pc, #564]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ea:	f7ff f97b 	bl	80017e4 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024f2:	f7ff f977 	bl	80017e4 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e10e      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002504:	4b84      	ldr	r3, [pc, #528]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 8002506:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1ef      	bne.n	80024f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8102 	beq.w	8002720 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	2b02      	cmp	r3, #2
 8002522:	f040 80c5 	bne.w	80026b0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002526:	4b7c      	ldr	r3, [pc, #496]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f003 0203 	and.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	429a      	cmp	r2, r3
 8002538:	d12c      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	3b01      	subs	r3, #1
 8002546:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d123      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002556:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d11b      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002566:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d113      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	3b01      	subs	r3, #1
 800257a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d109      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	085b      	lsrs	r3, r3, #1
 800258c:	3b01      	subs	r3, #1
 800258e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d067      	beq.n	8002664 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b0c      	cmp	r3, #12
 8002598:	d062      	beq.n	8002660 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800259a:	4b5f      	ldr	r3, [pc, #380]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e0bb      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025aa:	4b5b      	ldr	r3, [pc, #364]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a5a      	ldr	r2, [pc, #360]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 80025b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025b6:	f7ff f915 	bl	80017e4 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025be:	f7ff f911 	bl	80017e4 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e0a8      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d0:	4b51      	ldr	r3, [pc, #324]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f0      	bne.n	80025be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025dc:	4b4e      	ldr	r3, [pc, #312]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	4b4e      	ldr	r3, [pc, #312]	; (800271c <HAL_RCC_OscConfig+0x830>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025ec:	3a01      	subs	r2, #1
 80025ee:	0112      	lsls	r2, r2, #4
 80025f0:	4311      	orrs	r1, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025f6:	0212      	lsls	r2, r2, #8
 80025f8:	4311      	orrs	r1, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025fe:	0852      	lsrs	r2, r2, #1
 8002600:	3a01      	subs	r2, #1
 8002602:	0552      	lsls	r2, r2, #21
 8002604:	4311      	orrs	r1, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800260a:	0852      	lsrs	r2, r2, #1
 800260c:	3a01      	subs	r2, #1
 800260e:	0652      	lsls	r2, r2, #25
 8002610:	4311      	orrs	r1, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002616:	06d2      	lsls	r2, r2, #27
 8002618:	430a      	orrs	r2, r1
 800261a:	493f      	ldr	r1, [pc, #252]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 800261c:	4313      	orrs	r3, r2
 800261e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002620:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a3c      	ldr	r2, [pc, #240]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 8002626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800262c:	4b3a      	ldr	r3, [pc, #232]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a39      	ldr	r2, [pc, #228]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 8002632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002636:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002638:	f7ff f8d4 	bl	80017e4 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002640:	f7ff f8d0 	bl	80017e4 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e067      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002652:	4b31      	ldr	r3, [pc, #196]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800265e:	e05f      	b.n	8002720 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e05e      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002664:	4b2c      	ldr	r3, [pc, #176]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d157      	bne.n	8002720 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002670:	4b29      	ldr	r3, [pc, #164]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a28      	ldr	r2, [pc, #160]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 8002676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800267a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800267c:	4b26      	ldr	r3, [pc, #152]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4a25      	ldr	r2, [pc, #148]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 8002682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002686:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002688:	f7ff f8ac 	bl	80017e4 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002690:	f7ff f8a8 	bl	80017e4 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e03f      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a2:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x7a4>
 80026ae:	e037      	b.n	8002720 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	2b0c      	cmp	r3, #12
 80026b4:	d02d      	beq.n	8002712 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b6:	4b18      	ldr	r3, [pc, #96]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a17      	ldr	r2, [pc, #92]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 80026bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026c0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d105      	bne.n	80026da <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	4a11      	ldr	r2, [pc, #68]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 80026d4:	f023 0303 	bic.w	r3, r3, #3
 80026d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	4a0e      	ldr	r2, [pc, #56]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 80026e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7ff f87b 	bl	80017e4 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f2:	f7ff f877 	bl	80017e4 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e00e      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <HAL_RCC_OscConfig+0x82c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x806>
 8002710:	e006      	b.n	8002720 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e005      	b.n	8002722 <HAL_RCC_OscConfig+0x836>
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3720      	adds	r7, #32
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop

0800272c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0c8      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002740:	4b66      	ldr	r3, [pc, #408]	; (80028dc <HAL_RCC_ClockConfig+0x1b0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d910      	bls.n	8002770 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b63      	ldr	r3, [pc, #396]	; (80028dc <HAL_RCC_ClockConfig+0x1b0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 0207 	bic.w	r2, r3, #7
 8002756:	4961      	ldr	r1, [pc, #388]	; (80028dc <HAL_RCC_ClockConfig+0x1b0>)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b5f      	ldr	r3, [pc, #380]	; (80028dc <HAL_RCC_ClockConfig+0x1b0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0b0      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d04c      	beq.n	8002816 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b03      	cmp	r3, #3
 8002782:	d107      	bne.n	8002794 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002784:	4b56      	ldr	r3, [pc, #344]	; (80028e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d121      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e09e      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d107      	bne.n	80027ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279c:	4b50      	ldr	r3, [pc, #320]	; (80028e0 <HAL_RCC_ClockConfig+0x1b4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d115      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e092      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d107      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027b4:	4b4a      	ldr	r3, [pc, #296]	; (80028e0 <HAL_RCC_ClockConfig+0x1b4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d109      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e086      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c4:	4b46      	ldr	r3, [pc, #280]	; (80028e0 <HAL_RCC_ClockConfig+0x1b4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e07e      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027d4:	4b42      	ldr	r3, [pc, #264]	; (80028e0 <HAL_RCC_ClockConfig+0x1b4>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f023 0203 	bic.w	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	493f      	ldr	r1, [pc, #252]	; (80028e0 <HAL_RCC_ClockConfig+0x1b4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e6:	f7fe fffd 	bl	80017e4 <HAL_GetTick>
 80027ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ee:	f7fe fff9 	bl	80017e4 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e066      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002804:	4b36      	ldr	r3, [pc, #216]	; (80028e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 020c 	and.w	r2, r3, #12
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	429a      	cmp	r2, r3
 8002814:	d1eb      	bne.n	80027ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d008      	beq.n	8002834 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002822:	4b2f      	ldr	r3, [pc, #188]	; (80028e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	492c      	ldr	r1, [pc, #176]	; (80028e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002830:	4313      	orrs	r3, r2
 8002832:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002834:	4b29      	ldr	r3, [pc, #164]	; (80028dc <HAL_RCC_ClockConfig+0x1b0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d210      	bcs.n	8002864 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b26      	ldr	r3, [pc, #152]	; (80028dc <HAL_RCC_ClockConfig+0x1b0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 0207 	bic.w	r2, r3, #7
 800284a:	4924      	ldr	r1, [pc, #144]	; (80028dc <HAL_RCC_ClockConfig+0x1b0>)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b22      	ldr	r3, [pc, #136]	; (80028dc <HAL_RCC_ClockConfig+0x1b0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e036      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4918      	ldr	r1, [pc, #96]	; (80028e0 <HAL_RCC_ClockConfig+0x1b4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <HAL_RCC_ClockConfig+0x1b4>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4910      	ldr	r1, [pc, #64]	; (80028e0 <HAL_RCC_ClockConfig+0x1b4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028a2:	f000 f825 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 80028a6:	4601      	mov	r1, r0
 80028a8:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <HAL_RCC_ClockConfig+0x1b4>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 80028b4:	5cd3      	ldrb	r3, [r2, r3]
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	fa21 f303 	lsr.w	r3, r1, r3
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe ff40 	bl	800174c <HAL_InitTick>
 80028cc:	4603      	mov	r3, r0
 80028ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80028d0:	7afb      	ldrb	r3, [r7, #11]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40022000 	.word	0x40022000
 80028e0:	40021000 	.word	0x40021000
 80028e4:	08008f5c 	.word	0x08008f5c
 80028e8:	20000004 	.word	0x20000004
 80028ec:	20000008 	.word	0x20000008

080028f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b089      	sub	sp, #36	; 0x24
 80028f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028fe:	4b3d      	ldr	r3, [pc, #244]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002908:	4b3a      	ldr	r3, [pc, #232]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x104>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0x34>
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	2b0c      	cmp	r3, #12
 800291c:	d121      	bne.n	8002962 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d11e      	bne.n	8002962 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002924:	4b33      	ldr	r3, [pc, #204]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d107      	bne.n	8002940 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002930:	4b30      	ldr	r3, [pc, #192]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	e005      	b.n	800294c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002940:	4b2c      	ldr	r3, [pc, #176]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800294c:	4a2a      	ldr	r2, [pc, #168]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002954:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10d      	bne.n	8002978 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002960:	e00a      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b04      	cmp	r3, #4
 8002966:	d102      	bne.n	800296e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002968:	4b24      	ldr	r3, [pc, #144]	; (80029fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	e004      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d101      	bne.n	8002978 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002974:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x110>)
 8002976:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	2b0c      	cmp	r3, #12
 800297c:	d133      	bne.n	80029e6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d002      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0xa4>
 800298e:	2b03      	cmp	r3, #3
 8002990:	d003      	beq.n	800299a <HAL_RCC_GetSysClockFreq+0xaa>
 8002992:	e005      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002994:	4b19      	ldr	r3, [pc, #100]	; (80029fc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002996:	617b      	str	r3, [r7, #20]
      break;
 8002998:	e005      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800299a:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x110>)
 800299c:	617b      	str	r3, [r7, #20]
      break;
 800299e:	e002      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	617b      	str	r3, [r7, #20]
      break;
 80029a4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029a6:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	3301      	adds	r3, #1
 80029b2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	fb02 f203 	mul.w	r2, r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0e5b      	lsrs	r3, r3, #25
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	3301      	adds	r3, #1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029e6:	69bb      	ldr	r3, [r7, #24]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3724      	adds	r7, #36	; 0x24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	40021000 	.word	0x40021000
 80029f8:	08008f74 	.word	0x08008f74
 80029fc:	00f42400 	.word	0x00f42400
 8002a00:	007a1200 	.word	0x007a1200

08002a04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000004 	.word	0x20000004

08002a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a20:	f7ff fff0 	bl	8002a04 <HAL_RCC_GetHCLKFreq>
 8002a24:	4601      	mov	r1, r0
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a32:	5cd3      	ldrb	r3, [r2, r3]
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000
 8002a44:	08008f6c 	.word	0x08008f6c

08002a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a4c:	f7ff ffda 	bl	8002a04 <HAL_RCC_GetHCLKFreq>
 8002a50:	4601      	mov	r1, r0
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	0adb      	lsrs	r3, r3, #11
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a5e:	5cd3      	ldrb	r3, [r2, r3]
 8002a60:	f003 031f 	and.w	r3, r3, #31
 8002a64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	08008f6c 	.word	0x08008f6c

08002a74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a80:	4b2a      	ldr	r3, [pc, #168]	; (8002b2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a8c:	f7ff f9ca 	bl	8001e24 <HAL_PWREx_GetVoltageRange>
 8002a90:	6178      	str	r0, [r7, #20]
 8002a92:	e014      	b.n	8002abe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a94:	4b25      	ldr	r3, [pc, #148]	; (8002b2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	4a24      	ldr	r2, [pc, #144]	; (8002b2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002aa0:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002aac:	f7ff f9ba 	bl	8001e24 <HAL_PWREx_GetVoltageRange>
 8002ab0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ab2:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab6:	4a1d      	ldr	r2, [pc, #116]	; (8002b2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002abc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac4:	d10b      	bne.n	8002ade <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b80      	cmp	r3, #128	; 0x80
 8002aca:	d919      	bls.n	8002b00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2ba0      	cmp	r3, #160	; 0xa0
 8002ad0:	d902      	bls.n	8002ad8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	e013      	b.n	8002b00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ad8:	2301      	movs	r3, #1
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	e010      	b.n	8002b00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b80      	cmp	r3, #128	; 0x80
 8002ae2:	d902      	bls.n	8002aea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	e00a      	b.n	8002b00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b80      	cmp	r3, #128	; 0x80
 8002aee:	d102      	bne.n	8002af6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002af0:	2302      	movs	r3, #2
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	e004      	b.n	8002b00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b70      	cmp	r3, #112	; 0x70
 8002afa:	d101      	bne.n	8002b00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002afc:	2301      	movs	r3, #1
 8002afe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f023 0207 	bic.w	r2, r3, #7
 8002b08:	4909      	ldr	r1, [pc, #36]	; (8002b30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b10:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d001      	beq.n	8002b22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40022000 	.word	0x40022000

08002b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b40:	2300      	movs	r3, #0
 8002b42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d02f      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b58:	d005      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002b5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b5e:	d015      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002b64:	e00f      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002b66:	4b5d      	ldr	r3, [pc, #372]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4a5c      	ldr	r2, [pc, #368]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b72:	e00c      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3304      	adds	r3, #4
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fa1e 	bl	8002fbc <RCCEx_PLLSAI1_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b84:	e003      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	74fb      	strb	r3, [r7, #19]
      break;
 8002b8a:	e000      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b8e:	7cfb      	ldrb	r3, [r7, #19]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10b      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b94:	4b51      	ldr	r3, [pc, #324]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	494e      	ldr	r1, [pc, #312]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002baa:	e001      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 809e 	beq.w	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bc2:	4b46      	ldr	r3, [pc, #280]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00d      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd8:	4b40      	ldr	r3, [pc, #256]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	4a3f      	ldr	r2, [pc, #252]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be2:	6593      	str	r3, [r2, #88]	; 0x58
 8002be4:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bf4:	4b3a      	ldr	r3, [pc, #232]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a39      	ldr	r2, [pc, #228]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c00:	f7fe fdf0 	bl	80017e4 <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c06:	e009      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c08:	f7fe fdec 	bl	80017e4 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d902      	bls.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	74fb      	strb	r3, [r7, #19]
        break;
 8002c1a:	e005      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c1c:	4b30      	ldr	r3, [pc, #192]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0ef      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d15a      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c2e:	4b2b      	ldr	r3, [pc, #172]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01e      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d019      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c4a:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c54:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c56:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5c:	4a1f      	ldr	r2, [pc, #124]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6c:	4a1b      	ldr	r2, [pc, #108]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c76:	4a19      	ldr	r2, [pc, #100]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d016      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe fdac 	bl	80017e4 <HAL_GetTick>
 8002c8c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c8e:	e00b      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c90:	f7fe fda8 	bl	80017e4 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d902      	bls.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	74fb      	strb	r3, [r7, #19]
            break;
 8002ca6:	e006      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0ec      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002cb6:	7cfb      	ldrb	r3, [r7, #19]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10b      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cbc:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cca:	4904      	ldr	r1, [pc, #16]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cd2:	e009      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	74bb      	strb	r3, [r7, #18]
 8002cd8:	e006      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce4:	7cfb      	ldrb	r3, [r7, #19]
 8002ce6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ce8:	7c7b      	ldrb	r3, [r7, #17]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d105      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cee:	4bb2      	ldr	r3, [pc, #712]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	4ab1      	ldr	r2, [pc, #708]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d06:	4bac      	ldr	r3, [pc, #688]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0c:	f023 0203 	bic.w	r2, r3, #3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	49a8      	ldr	r1, [pc, #672]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00a      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d28:	4ba3      	ldr	r3, [pc, #652]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2e:	f023 020c 	bic.w	r2, r3, #12
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	49a0      	ldr	r1, [pc, #640]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d4a:	4b9b      	ldr	r3, [pc, #620]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	4997      	ldr	r1, [pc, #604]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d6c:	4b92      	ldr	r3, [pc, #584]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	498f      	ldr	r1, [pc, #572]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d8e:	4b8a      	ldr	r3, [pc, #552]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9c:	4986      	ldr	r1, [pc, #536]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002db0:	4b81      	ldr	r3, [pc, #516]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	497e      	ldr	r1, [pc, #504]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dd2:	4b79      	ldr	r3, [pc, #484]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	4975      	ldr	r1, [pc, #468]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002df4:	4b70      	ldr	r3, [pc, #448]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e02:	496d      	ldr	r1, [pc, #436]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e16:	4b68      	ldr	r3, [pc, #416]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	4964      	ldr	r1, [pc, #400]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d028      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e38:	4b5f      	ldr	r3, [pc, #380]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e46:	495c      	ldr	r1, [pc, #368]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e56:	d106      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e58:	4b57      	ldr	r3, [pc, #348]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4a56      	ldr	r2, [pc, #344]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002e5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e62:	60d3      	str	r3, [r2, #12]
 8002e64:	e011      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e6e:	d10c      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	2101      	movs	r1, #1
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 f8a0 	bl	8002fbc <RCCEx_PLLSAI1_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e80:	7cfb      	ldrb	r3, [r7, #19]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 8002e86:	7cfb      	ldrb	r3, [r7, #19]
 8002e88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d028      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e96:	4b48      	ldr	r3, [pc, #288]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea4:	4944      	ldr	r1, [pc, #272]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eb4:	d106      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eb6:	4b40      	ldr	r3, [pc, #256]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	4a3f      	ldr	r2, [pc, #252]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002ebc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ec0:	60d3      	str	r3, [r2, #12]
 8002ec2:	e011      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 f871 	bl	8002fbc <RCCEx_PLLSAI1_Config>
 8002eda:	4603      	mov	r3, r0
 8002edc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ede:	7cfb      	ldrb	r3, [r7, #19]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002ee4:	7cfb      	ldrb	r3, [r7, #19]
 8002ee6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d028      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ef4:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f02:	492d      	ldr	r1, [pc, #180]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f12:	d106      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f14:	4b28      	ldr	r3, [pc, #160]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002f1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f1e:	60d3      	str	r3, [r2, #12]
 8002f20:	e011      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f2a:	d10c      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3304      	adds	r3, #4
 8002f30:	2101      	movs	r1, #1
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 f842 	bl	8002fbc <RCCEx_PLLSAI1_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f3c:	7cfb      	ldrb	r3, [r7, #19]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 8002f42:	7cfb      	ldrb	r3, [r7, #19]
 8002f44:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01c      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f52:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f58:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f60:	4915      	ldr	r1, [pc, #84]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3304      	adds	r3, #4
 8002f76:	2102      	movs	r1, #2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 f81f 	bl	8002fbc <RCCEx_PLLSAI1_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f82:	7cfb      	ldrb	r3, [r7, #19]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f98:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	4904      	ldr	r1, [pc, #16]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fae:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000

08002fbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fca:	4b73      	ldr	r3, [pc, #460]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d018      	beq.n	8003008 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fd6:	4b70      	ldr	r3, [pc, #448]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f003 0203 	and.w	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d10d      	bne.n	8003002 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
       ||
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fee:	4b6a      	ldr	r3, [pc, #424]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
       ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d044      	beq.n	800308c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
 8003006:	e041      	b.n	800308c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d00c      	beq.n	800302a <RCCEx_PLLSAI1_Config+0x6e>
 8003010:	2b03      	cmp	r3, #3
 8003012:	d013      	beq.n	800303c <RCCEx_PLLSAI1_Config+0x80>
 8003014:	2b01      	cmp	r3, #1
 8003016:	d120      	bne.n	800305a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003018:	4b5f      	ldr	r3, [pc, #380]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d11d      	bne.n	8003060 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003028:	e01a      	b.n	8003060 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800302a:	4b5b      	ldr	r3, [pc, #364]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003032:	2b00      	cmp	r3, #0
 8003034:	d116      	bne.n	8003064 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800303a:	e013      	b.n	8003064 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800303c:	4b56      	ldr	r3, [pc, #344]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10f      	bne.n	8003068 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003048:	4b53      	ldr	r3, [pc, #332]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d109      	bne.n	8003068 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003058:	e006      	b.n	8003068 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
      break;
 800305e:	e004      	b.n	800306a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003060:	bf00      	nop
 8003062:	e002      	b.n	800306a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003064:	bf00      	nop
 8003066:	e000      	b.n	800306a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003068:	bf00      	nop
    }

    if(status == HAL_OK)
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10d      	bne.n	800308c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003070:	4b49      	ldr	r3, [pc, #292]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6819      	ldr	r1, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	3b01      	subs	r3, #1
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	430b      	orrs	r3, r1
 8003086:	4944      	ldr	r1, [pc, #272]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d17c      	bne.n	800318c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003092:	4b41      	ldr	r3, [pc, #260]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a40      	ldr	r2, [pc, #256]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003098:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800309c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800309e:	f7fe fba1 	bl	80017e4 <HAL_GetTick>
 80030a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030a4:	e009      	b.n	80030ba <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030a6:	f7fe fb9d 	bl	80017e4 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d902      	bls.n	80030ba <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	73fb      	strb	r3, [r7, #15]
        break;
 80030b8:	e005      	b.n	80030c6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030ba:	4b37      	ldr	r3, [pc, #220]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1ef      	bne.n	80030a6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d15f      	bne.n	800318c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d110      	bne.n	80030f4 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030d2:	4b31      	ldr	r3, [pc, #196]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80030da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6892      	ldr	r2, [r2, #8]
 80030e2:	0211      	lsls	r1, r2, #8
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	68d2      	ldr	r2, [r2, #12]
 80030e8:	06d2      	lsls	r2, r2, #27
 80030ea:	430a      	orrs	r2, r1
 80030ec:	492a      	ldr	r1, [pc, #168]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	610b      	str	r3, [r1, #16]
 80030f2:	e027      	b.n	8003144 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d112      	bne.n	8003120 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030fa:	4b27      	ldr	r3, [pc, #156]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003102:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6892      	ldr	r2, [r2, #8]
 800310a:	0211      	lsls	r1, r2, #8
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6912      	ldr	r2, [r2, #16]
 8003110:	0852      	lsrs	r2, r2, #1
 8003112:	3a01      	subs	r2, #1
 8003114:	0552      	lsls	r2, r2, #21
 8003116:	430a      	orrs	r2, r1
 8003118:	491f      	ldr	r1, [pc, #124]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 800311a:	4313      	orrs	r3, r2
 800311c:	610b      	str	r3, [r1, #16]
 800311e:	e011      	b.n	8003144 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003120:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003128:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6892      	ldr	r2, [r2, #8]
 8003130:	0211      	lsls	r1, r2, #8
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6952      	ldr	r2, [r2, #20]
 8003136:	0852      	lsrs	r2, r2, #1
 8003138:	3a01      	subs	r2, #1
 800313a:	0652      	lsls	r2, r2, #25
 800313c:	430a      	orrs	r2, r1
 800313e:	4916      	ldr	r1, [pc, #88]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003140:	4313      	orrs	r3, r2
 8003142:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003144:	4b14      	ldr	r3, [pc, #80]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a13      	ldr	r2, [pc, #76]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 800314a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800314e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fe fb48 	bl	80017e4 <HAL_GetTick>
 8003154:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003156:	e009      	b.n	800316c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003158:	f7fe fb44 	bl	80017e4 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d902      	bls.n	800316c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	73fb      	strb	r3, [r7, #15]
          break;
 800316a:	e005      	b.n	8003178 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800316c:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0ef      	beq.n	8003158 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	4904      	ldr	r1, [pc, #16]	; (8003198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003188:	4313      	orrs	r3, r2
 800318a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800318c:	7bfb      	ldrb	r3, [r7, #15]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000

0800319c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e07c      	b.n	80032a8 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d106      	bne.n	80031ce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7fe f8dd 	bl	8001388 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031e4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031ee:	d902      	bls.n	80031f6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	e002      	b.n	80031fc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031fa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003204:	d007      	beq.n	8003216 <HAL_SPI_Init+0x7a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800320e:	d002      	beq.n	8003216 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10b      	bne.n	8003236 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003226:	d903      	bls.n	8003230 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	631a      	str	r2, [r3, #48]	; 0x30
 800322e:	e002      	b.n	8003236 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	ea42 0103 	orr.w	r1, r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	0c1b      	lsrs	r3, r3, #16
 8003276:	f003 0204 	and.w	r2, r3, #4
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	ea42 0103 	orr.w	r1, r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	430a      	orrs	r2, r1
 8003296:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_SPI_Transmit+0x22>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e150      	b.n	8003574 <HAL_SPI_Transmit+0x2c4>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032da:	f7fe fa83 	bl	80017e4 <HAL_GetTick>
 80032de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d002      	beq.n	80032f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032f0:	2302      	movs	r3, #2
 80032f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032f4:	e135      	b.n	8003562 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <HAL_SPI_Transmit+0x52>
 80032fc:	88fb      	ldrh	r3, [r7, #6]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003306:	e12c      	b.n	8003562 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2203      	movs	r2, #3
 800330c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	88fa      	ldrh	r2, [r7, #6]
 8003320:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	88fa      	ldrh	r2, [r7, #6]
 8003326:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003352:	d107      	bne.n	8003364 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003362:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336e:	2b40      	cmp	r3, #64	; 0x40
 8003370:	d007      	beq.n	8003382 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003380:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800338a:	d94b      	bls.n	8003424 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_SPI_Transmit+0xea>
 8003394:	8afb      	ldrh	r3, [r7, #22]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d13e      	bne.n	8003418 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	881a      	ldrh	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	1c9a      	adds	r2, r3, #2
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033be:	e02b      	b.n	8003418 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d112      	bne.n	80033f4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	881a      	ldrh	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	1c9a      	adds	r2, r3, #2
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033f2:	e011      	b.n	8003418 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033f4:	f7fe f9f6 	bl	80017e4 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d803      	bhi.n	800340c <HAL_SPI_Transmit+0x15c>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	d102      	bne.n	8003412 <HAL_SPI_Transmit+0x162>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d102      	bne.n	8003418 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003416:	e0a4      	b.n	8003562 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1ce      	bne.n	80033c0 <HAL_SPI_Transmit+0x110>
 8003422:	e07c      	b.n	800351e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <HAL_SPI_Transmit+0x182>
 800342c:	8afb      	ldrh	r3, [r7, #22]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d170      	bne.n	8003514 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	d912      	bls.n	8003462 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	881a      	ldrh	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344c:	1c9a      	adds	r2, r3, #2
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b02      	subs	r3, #2
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003460:	e058      	b.n	8003514 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	330c      	adds	r3, #12
 800346c:	7812      	ldrb	r2, [r2, #0]
 800346e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003488:	e044      	b.n	8003514 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b02      	cmp	r3, #2
 8003496:	d12b      	bne.n	80034f0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d912      	bls.n	80034c8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a6:	881a      	ldrh	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b2:	1c9a      	adds	r2, r3, #2
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b02      	subs	r3, #2
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034c6:	e025      	b.n	8003514 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	330c      	adds	r3, #12
 80034d2:	7812      	ldrb	r2, [r2, #0]
 80034d4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034ee:	e011      	b.n	8003514 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034f0:	f7fe f978 	bl	80017e4 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d803      	bhi.n	8003508 <HAL_SPI_Transmit+0x258>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003506:	d102      	bne.n	800350e <HAL_SPI_Transmit+0x25e>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d102      	bne.n	8003514 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003512:	e026      	b.n	8003562 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1b5      	bne.n	800348a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	6839      	ldr	r1, [r7, #0]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fc42 	bl	8003dac <SPI_EndRxTxTransaction>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	77fb      	strb	r3, [r7, #31]
 800355e:	e000      	b.n	8003562 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003560:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003572:	7ffb      	ldrb	r3, [r7, #31]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3720      	adds	r7, #32
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	; 0x28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800358a:	2301      	movs	r3, #1
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_SPI_TransmitReceive+0x26>
 800359e:	2302      	movs	r3, #2
 80035a0:	e1fb      	b.n	800399a <HAL_SPI_TransmitReceive+0x41e>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035aa:	f7fe f91b 	bl	80017e4 <HAL_GetTick>
 80035ae:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035b6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80035be:	887b      	ldrh	r3, [r7, #2]
 80035c0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80035c2:	887b      	ldrh	r3, [r7, #2]
 80035c4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035c6:	7efb      	ldrb	r3, [r7, #27]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d00e      	beq.n	80035ea <HAL_SPI_TransmitReceive+0x6e>
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035d2:	d106      	bne.n	80035e2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d102      	bne.n	80035e2 <HAL_SPI_TransmitReceive+0x66>
 80035dc:	7efb      	ldrb	r3, [r7, #27]
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d003      	beq.n	80035ea <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80035e2:	2302      	movs	r3, #2
 80035e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80035e8:	e1cd      	b.n	8003986 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_SPI_TransmitReceive+0x80>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <HAL_SPI_TransmitReceive+0x80>
 80035f6:	887b      	ldrh	r3, [r7, #2]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d103      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003602:	e1c0      	b.n	8003986 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b04      	cmp	r3, #4
 800360e:	d003      	beq.n	8003618 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2205      	movs	r2, #5
 8003614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	887a      	ldrh	r2, [r7, #2]
 8003628:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	887a      	ldrh	r2, [r7, #2]
 8003630:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	887a      	ldrh	r2, [r7, #2]
 800363e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800365a:	d802      	bhi.n	8003662 <HAL_SPI_TransmitReceive+0xe6>
 800365c:	8a3b      	ldrh	r3, [r7, #16]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d908      	bls.n	8003674 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	e007      	b.n	8003684 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003682:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b40      	cmp	r3, #64	; 0x40
 8003690:	d007      	beq.n	80036a2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036aa:	d97c      	bls.n	80037a6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <HAL_SPI_TransmitReceive+0x13e>
 80036b4:	8a7b      	ldrh	r3, [r7, #18]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d169      	bne.n	800378e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	881a      	ldrh	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	1c9a      	adds	r2, r3, #2
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036de:	e056      	b.n	800378e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d11b      	bne.n	8003726 <HAL_SPI_TransmitReceive+0x1aa>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d016      	beq.n	8003726 <HAL_SPI_TransmitReceive+0x1aa>
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d113      	bne.n	8003726 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	881a      	ldrh	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	1c9a      	adds	r2, r3, #2
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b01      	cmp	r3, #1
 8003732:	d11c      	bne.n	800376e <HAL_SPI_TransmitReceive+0x1f2>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d016      	beq.n	800376e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	b292      	uxth	r2, r2
 800374c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	1c9a      	adds	r2, r3, #2
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800375e:	b29b      	uxth	r3, r3
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800376a:	2301      	movs	r3, #1
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800376e:	f7fe f839 	bl	80017e4 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800377a:	429a      	cmp	r2, r3
 800377c:	d807      	bhi.n	800378e <HAL_SPI_TransmitReceive+0x212>
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003784:	d003      	beq.n	800378e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800378c:	e0fb      	b.n	8003986 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1a3      	bne.n	80036e0 <HAL_SPI_TransmitReceive+0x164>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d19d      	bne.n	80036e0 <HAL_SPI_TransmitReceive+0x164>
 80037a4:	e0df      	b.n	8003966 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_SPI_TransmitReceive+0x23a>
 80037ae:	8a7b      	ldrh	r3, [r7, #18]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	f040 80cb 	bne.w	800394c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d912      	bls.n	80037e6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	881a      	ldrh	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	1c9a      	adds	r2, r3, #2
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b02      	subs	r3, #2
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037e4:	e0b2      	b.n	800394c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	330c      	adds	r3, #12
 80037f0:	7812      	ldrb	r2, [r2, #0]
 80037f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800380c:	e09e      	b.n	800394c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b02      	cmp	r3, #2
 800381a:	d134      	bne.n	8003886 <HAL_SPI_TransmitReceive+0x30a>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d02f      	beq.n	8003886 <HAL_SPI_TransmitReceive+0x30a>
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	2b01      	cmp	r3, #1
 800382a:	d12c      	bne.n	8003886 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b01      	cmp	r3, #1
 8003834:	d912      	bls.n	800385c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	881a      	ldrh	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	1c9a      	adds	r2, r3, #2
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b02      	subs	r3, #2
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	87da      	strh	r2, [r3, #62]	; 0x3e
 800385a:	e012      	b.n	8003882 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	330c      	adds	r3, #12
 8003866:	7812      	ldrb	r2, [r2, #0]
 8003868:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	d148      	bne.n	8003926 <HAL_SPI_TransmitReceive+0x3aa>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d042      	beq.n	8003926 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d923      	bls.n	80038f4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	b292      	uxth	r2, r2
 80038b8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	1c9a      	adds	r2, r3, #2
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	3b02      	subs	r3, #2
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d81f      	bhi.n	8003922 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	e016      	b.n	8003922 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f103 020c 	add.w	r2, r3, #12
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	7812      	ldrb	r2, [r2, #0]
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003922:	2301      	movs	r3, #1
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003926:	f7fd ff5d 	bl	80017e4 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003932:	429a      	cmp	r2, r3
 8003934:	d803      	bhi.n	800393e <HAL_SPI_TransmitReceive+0x3c2>
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393c:	d102      	bne.n	8003944 <HAL_SPI_TransmitReceive+0x3c8>
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	2b00      	cmp	r3, #0
 8003942:	d103      	bne.n	800394c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800394a:	e01c      	b.n	8003986 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	f47f af5b 	bne.w	800380e <HAL_SPI_TransmitReceive+0x292>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	f47f af54 	bne.w	800380e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fa1e 	bl	8003dac <SPI_EndRxTxTransaction>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d006      	beq.n	8003984 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	661a      	str	r2, [r3, #96]	; 0x60
 8003982:	e000      	b.n	8003986 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003984:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003996:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800399a:	4618      	mov	r0, r3
 800399c:	3728      	adds	r7, #40	; 0x28
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	099b      	lsrs	r3, r3, #6
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10f      	bne.n	80039e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	099b      	lsrs	r3, r3, #6
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d004      	beq.n	80039e8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
    return;
 80039e6:	e0d8      	b.n	8003b9a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <HAL_SPI_IRQHandler+0x66>
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	09db      	lsrs	r3, r3, #7
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d004      	beq.n	8003a0a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
    return;
 8003a08:	e0c7      	b.n	8003b9a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10c      	bne.n	8003a30 <HAL_SPI_IRQHandler+0x8c>
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	099b      	lsrs	r3, r3, #6
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_SPI_IRQHandler+0x8c>
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	0a1b      	lsrs	r3, r3, #8
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80b5 	beq.w	8003b9a <HAL_SPI_IRQHandler+0x1f6>
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80ae 	beq.w	8003b9a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	099b      	lsrs	r3, r3, #6
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d023      	beq.n	8003a92 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d011      	beq.n	8003a7a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5a:	f043 0204 	orr.w	r2, r3, #4
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	e00b      	b.n	8003a92 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	693b      	ldr	r3, [r7, #16]
        return;
 8003a90:	e083      	b.n	8003b9a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d014      	beq.n	8003ac8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa2:	f043 0201 	orr.w	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00c      	beq.n	8003aee <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad8:	f043 0208 	orr.w	r2, r3, #8
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60bb      	str	r3, [r7, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d050      	beq.n	8003b98 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b04:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d104      	bne.n	8003b22 <HAL_SPI_IRQHandler+0x17e>
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d034      	beq.n	8003b8c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0203 	bic.w	r2, r2, #3
 8003b30:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d011      	beq.n	8003b5e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3e:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <HAL_SPI_IRQHandler+0x1fc>)
 8003b40:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fd ff98 	bl	8001a7c <HAL_DMA_Abort_IT>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d016      	beq.n	8003b94 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6a:	4a0d      	ldr	r2, [pc, #52]	; (8003ba0 <HAL_SPI_IRQHandler+0x1fc>)
 8003b6c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fd ff82 	bl	8001a7c <HAL_DMA_Abort_IT>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003b8a:	e003      	b.n	8003b94 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f809 	bl	8003ba4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003b92:	e000      	b.n	8003b96 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003b94:	bf00      	nop
    return;
 8003b96:	bf00      	nop
 8003b98:	bf00      	nop
  }
}
 8003b9a:	3720      	adds	r7, #32
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	08003bd5 	.word	0x08003bd5

08003ba4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bc6:	b2db      	uxtb	r3, r3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f7ff ffd7 	bl	8003ba4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c0e:	e04c      	b.n	8003caa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c16:	d048      	beq.n	8003caa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003c18:	f7fd fde4 	bl	80017e4 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d902      	bls.n	8003c2e <SPI_WaitFlagStateUntilTimeout+0x30>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d13d      	bne.n	8003caa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c46:	d111      	bne.n	8003c6c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c50:	d004      	beq.n	8003c5c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5a:	d107      	bne.n	8003c6c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c74:	d10f      	bne.n	8003c96 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e00f      	b.n	8003cca <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	bf0c      	ite	eq
 8003cba:	2301      	moveq	r3, #1
 8003cbc:	2300      	movne	r3, #0
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d1a3      	bne.n	8003c10 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b084      	sub	sp, #16
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ce0:	e057      	b.n	8003d92 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ce8:	d106      	bne.n	8003cf8 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d103      	bne.n	8003cf8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	330c      	adds	r3, #12
 8003cf6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfe:	d048      	beq.n	8003d92 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003d00:	f7fd fd70 	bl	80017e4 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d902      	bls.n	8003d16 <SPI_WaitFifoStateUntilTimeout+0x44>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d13d      	bne.n	8003d92 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d2e:	d111      	bne.n	8003d54 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d38:	d004      	beq.n	8003d44 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d42:	d107      	bne.n	8003d54 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5c:	d10f      	bne.n	8003d7e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e008      	b.n	8003da4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d19f      	bne.n	8003ce2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f7ff ff84 	bl	8003cd2 <SPI_WaitFifoStateUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d007      	beq.n	8003de0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd4:	f043 0220 	orr.w	r2, r3, #32
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e027      	b.n	8003e30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2200      	movs	r2, #0
 8003de8:	2180      	movs	r1, #128	; 0x80
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f7ff ff07 	bl	8003bfe <SPI_WaitFlagStateUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d007      	beq.n	8003e06 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfa:	f043 0220 	orr.w	r2, r3, #32
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e014      	b.n	8003e30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f7ff ff5d 	bl	8003cd2 <SPI_WaitFifoStateUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e22:	f043 0220 	orr.w	r2, r3, #32
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e000      	b.n	8003e30 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e040      	b.n	8003ecc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fd fade 	bl	800141c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2224      	movs	r2, #36	; 0x24
 8003e64:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0201 	bic.w	r2, r2, #1
 8003e74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f986 	bl	8004188 <UART_SetConfig>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e022      	b.n	8003ecc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fc8e 	bl	80047b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ea2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 fd15 	bl	80048f4 <UART_CheckIdleState>
 8003eca:	4603      	mov	r3, r0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	f640 030f 	movw	r3, #2063	; 0x80f
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d113      	bne.n	8003f2c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00e      	beq.n	8003f2c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d009      	beq.n	8003f2c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8114 	beq.w	800414a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	4798      	blx	r3
      }
      return;
 8003f2a:	e10e      	b.n	800414a <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 80d6 	beq.w	80040e0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d105      	bne.n	8003f4a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 80cb 	beq.w	80040e0 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00e      	beq.n	8003f72 <HAL_UART_IRQHandler+0x9e>
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2201      	movs	r2, #1
 8003f64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f6a:	f043 0201 	orr.w	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00e      	beq.n	8003f9a <HAL_UART_IRQHandler+0xc6>
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d009      	beq.n	8003f9a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f92:	f043 0204 	orr.w	r2, r3, #4
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00e      	beq.n	8003fc2 <HAL_UART_IRQHandler+0xee>
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d009      	beq.n	8003fc2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2204      	movs	r2, #4
 8003fb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fba:	f043 0202 	orr.w	r2, r3, #2
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d013      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d104      	bne.n	8003fe0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d009      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fec:	f043 0208 	orr.w	r2, r3, #8
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00f      	beq.n	800401e <HAL_UART_IRQHandler+0x14a>
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004010:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004016:	f043 0220 	orr.w	r2, r3, #32
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 8093 	beq.w	800414e <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00c      	beq.n	800404c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f003 0320 	and.w	r3, r3, #32
 8004038:	2b00      	cmp	r3, #0
 800403a:	d007      	beq.n	800404c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004050:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b40      	cmp	r3, #64	; 0x40
 800405e:	d004      	beq.n	800406a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004066:	2b00      	cmp	r3, #0
 8004068:	d031      	beq.n	80040ce <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fd02 	bl	8004a74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d123      	bne.n	80040c6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800408c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d013      	beq.n	80040be <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800409a:	4a30      	ldr	r2, [pc, #192]	; (800415c <HAL_UART_IRQHandler+0x288>)
 800409c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd fcea 	bl	8001a7c <HAL_DMA_Abort_IT>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d016      	beq.n	80040dc <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80040b8:	4610      	mov	r0, r2
 80040ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040bc:	e00e      	b.n	80040dc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f858 	bl	8004174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c4:	e00a      	b.n	80040dc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f854 	bl	8004174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040cc:	e006      	b.n	80040dc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f850 	bl	8004174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80040da:	e038      	b.n	800414e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040dc:	bf00      	nop
    return;
 80040de:	e036      	b.n	800414e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00d      	beq.n	8004106 <HAL_UART_IRQHandler+0x232>
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fd07 	bl	8004b12 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004104:	e026      	b.n	8004154 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00d      	beq.n	800412c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004116:	2b00      	cmp	r3, #0
 8004118:	d008      	beq.n	800412c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800411e:	2b00      	cmp	r3, #0
 8004120:	d017      	beq.n	8004152 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	4798      	blx	r3
    }
    return;
 800412a:	e012      	b.n	8004152 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00e      	beq.n	8004154 <HAL_UART_IRQHandler+0x280>
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d009      	beq.n	8004154 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fccd 	bl	8004ae0 <UART_EndTransmit_IT>
    return;
 8004146:	bf00      	nop
 8004148:	e004      	b.n	8004154 <HAL_UART_IRQHandler+0x280>
      return;
 800414a:	bf00      	nop
 800414c:	e002      	b.n	8004154 <HAL_UART_IRQHandler+0x280>
    return;
 800414e:	bf00      	nop
 8004150:	e000      	b.n	8004154 <HAL_UART_IRQHandler+0x280>
    return;
 8004152:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	08004ab5 	.word	0x08004ab5

08004160 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004188:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800418c:	b08a      	sub	sp, #40	; 0x28
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4bbc      	ldr	r3, [pc, #752]	; (80044b0 <UART_SetConfig+0x328>)
 80041be:	4013      	ands	r3, r2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041c6:	430b      	orrs	r3, r1
 80041c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4ab2      	ldr	r2, [pc, #712]	; (80044b4 <UART_SetConfig+0x32c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d004      	beq.n	80041fa <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f6:	4313      	orrs	r3, r2
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420a:	430a      	orrs	r2, r1
 800420c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4aa9      	ldr	r2, [pc, #676]	; (80044b8 <UART_SetConfig+0x330>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d126      	bne.n	8004266 <UART_SetConfig+0xde>
 8004218:	4ba8      	ldr	r3, [pc, #672]	; (80044bc <UART_SetConfig+0x334>)
 800421a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b03      	cmp	r3, #3
 8004224:	d81a      	bhi.n	800425c <UART_SetConfig+0xd4>
 8004226:	a201      	add	r2, pc, #4	; (adr r2, 800422c <UART_SetConfig+0xa4>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	0800423d 	.word	0x0800423d
 8004230:	0800424d 	.word	0x0800424d
 8004234:	08004245 	.word	0x08004245
 8004238:	08004255 	.word	0x08004255
 800423c:	2301      	movs	r3, #1
 800423e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004242:	e0ab      	b.n	800439c <UART_SetConfig+0x214>
 8004244:	2302      	movs	r3, #2
 8004246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424a:	e0a7      	b.n	800439c <UART_SetConfig+0x214>
 800424c:	2304      	movs	r3, #4
 800424e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004252:	e0a3      	b.n	800439c <UART_SetConfig+0x214>
 8004254:	2308      	movs	r3, #8
 8004256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425a:	e09f      	b.n	800439c <UART_SetConfig+0x214>
 800425c:	2310      	movs	r3, #16
 800425e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004262:	bf00      	nop
 8004264:	e09a      	b.n	800439c <UART_SetConfig+0x214>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a95      	ldr	r2, [pc, #596]	; (80044c0 <UART_SetConfig+0x338>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d138      	bne.n	80042e2 <UART_SetConfig+0x15a>
 8004270:	4b92      	ldr	r3, [pc, #584]	; (80044bc <UART_SetConfig+0x334>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	2b0c      	cmp	r3, #12
 800427c:	d82c      	bhi.n	80042d8 <UART_SetConfig+0x150>
 800427e:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <UART_SetConfig+0xfc>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	080042b9 	.word	0x080042b9
 8004288:	080042d9 	.word	0x080042d9
 800428c:	080042d9 	.word	0x080042d9
 8004290:	080042d9 	.word	0x080042d9
 8004294:	080042c9 	.word	0x080042c9
 8004298:	080042d9 	.word	0x080042d9
 800429c:	080042d9 	.word	0x080042d9
 80042a0:	080042d9 	.word	0x080042d9
 80042a4:	080042c1 	.word	0x080042c1
 80042a8:	080042d9 	.word	0x080042d9
 80042ac:	080042d9 	.word	0x080042d9
 80042b0:	080042d9 	.word	0x080042d9
 80042b4:	080042d1 	.word	0x080042d1
 80042b8:	2300      	movs	r3, #0
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042be:	e06d      	b.n	800439c <UART_SetConfig+0x214>
 80042c0:	2302      	movs	r3, #2
 80042c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c6:	e069      	b.n	800439c <UART_SetConfig+0x214>
 80042c8:	2304      	movs	r3, #4
 80042ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ce:	e065      	b.n	800439c <UART_SetConfig+0x214>
 80042d0:	2308      	movs	r3, #8
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d6:	e061      	b.n	800439c <UART_SetConfig+0x214>
 80042d8:	2310      	movs	r3, #16
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042de:	bf00      	nop
 80042e0:	e05c      	b.n	800439c <UART_SetConfig+0x214>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a77      	ldr	r2, [pc, #476]	; (80044c4 <UART_SetConfig+0x33c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d125      	bne.n	8004338 <UART_SetConfig+0x1b0>
 80042ec:	4b73      	ldr	r3, [pc, #460]	; (80044bc <UART_SetConfig+0x334>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042f6:	2b10      	cmp	r3, #16
 80042f8:	d011      	beq.n	800431e <UART_SetConfig+0x196>
 80042fa:	2b10      	cmp	r3, #16
 80042fc:	d802      	bhi.n	8004304 <UART_SetConfig+0x17c>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d005      	beq.n	800430e <UART_SetConfig+0x186>
 8004302:	e014      	b.n	800432e <UART_SetConfig+0x1a6>
 8004304:	2b20      	cmp	r3, #32
 8004306:	d006      	beq.n	8004316 <UART_SetConfig+0x18e>
 8004308:	2b30      	cmp	r3, #48	; 0x30
 800430a:	d00c      	beq.n	8004326 <UART_SetConfig+0x19e>
 800430c:	e00f      	b.n	800432e <UART_SetConfig+0x1a6>
 800430e:	2300      	movs	r3, #0
 8004310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004314:	e042      	b.n	800439c <UART_SetConfig+0x214>
 8004316:	2302      	movs	r3, #2
 8004318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431c:	e03e      	b.n	800439c <UART_SetConfig+0x214>
 800431e:	2304      	movs	r3, #4
 8004320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004324:	e03a      	b.n	800439c <UART_SetConfig+0x214>
 8004326:	2308      	movs	r3, #8
 8004328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432c:	e036      	b.n	800439c <UART_SetConfig+0x214>
 800432e:	2310      	movs	r3, #16
 8004330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004334:	bf00      	nop
 8004336:	e031      	b.n	800439c <UART_SetConfig+0x214>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a5d      	ldr	r2, [pc, #372]	; (80044b4 <UART_SetConfig+0x32c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d129      	bne.n	8004396 <UART_SetConfig+0x20e>
 8004342:	4b5e      	ldr	r3, [pc, #376]	; (80044bc <UART_SetConfig+0x334>)
 8004344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004348:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800434c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004350:	d014      	beq.n	800437c <UART_SetConfig+0x1f4>
 8004352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004356:	d802      	bhi.n	800435e <UART_SetConfig+0x1d6>
 8004358:	2b00      	cmp	r3, #0
 800435a:	d007      	beq.n	800436c <UART_SetConfig+0x1e4>
 800435c:	e016      	b.n	800438c <UART_SetConfig+0x204>
 800435e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004362:	d007      	beq.n	8004374 <UART_SetConfig+0x1ec>
 8004364:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004368:	d00c      	beq.n	8004384 <UART_SetConfig+0x1fc>
 800436a:	e00f      	b.n	800438c <UART_SetConfig+0x204>
 800436c:	2300      	movs	r3, #0
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004372:	e013      	b.n	800439c <UART_SetConfig+0x214>
 8004374:	2302      	movs	r3, #2
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437a:	e00f      	b.n	800439c <UART_SetConfig+0x214>
 800437c:	2304      	movs	r3, #4
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004382:	e00b      	b.n	800439c <UART_SetConfig+0x214>
 8004384:	2308      	movs	r3, #8
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438a:	e007      	b.n	800439c <UART_SetConfig+0x214>
 800438c:	2310      	movs	r3, #16
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004392:	bf00      	nop
 8004394:	e002      	b.n	800439c <UART_SetConfig+0x214>
 8004396:	2310      	movs	r3, #16
 8004398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a44      	ldr	r2, [pc, #272]	; (80044b4 <UART_SetConfig+0x32c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	f040 80fb 	bne.w	800459e <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d824      	bhi.n	80043fa <UART_SetConfig+0x272>
 80043b0:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <UART_SetConfig+0x230>)
 80043b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b6:	bf00      	nop
 80043b8:	080043dd 	.word	0x080043dd
 80043bc:	080043fb 	.word	0x080043fb
 80043c0:	080043e5 	.word	0x080043e5
 80043c4:	080043fb 	.word	0x080043fb
 80043c8:	080043eb 	.word	0x080043eb
 80043cc:	080043fb 	.word	0x080043fb
 80043d0:	080043fb 	.word	0x080043fb
 80043d4:	080043fb 	.word	0x080043fb
 80043d8:	080043f3 	.word	0x080043f3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80043dc:	f7fe fb1e 	bl	8002a1c <HAL_RCC_GetPCLK1Freq>
 80043e0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043e2:	e00d      	b.n	8004400 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80043e4:	4b38      	ldr	r3, [pc, #224]	; (80044c8 <UART_SetConfig+0x340>)
 80043e6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043e8:	e00a      	b.n	8004400 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80043ea:	f7fe fa81 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 80043ee:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043f0:	e006      	b.n	8004400 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80043f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043f6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043f8:	e002      	b.n	8004400 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	76fb      	strb	r3, [r7, #27]
        break;
 80043fe:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 81c8 	beq.w	8004798 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	4413      	add	r3, r2
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	429a      	cmp	r2, r3
 8004416:	d305      	bcc.n	8004424 <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	429a      	cmp	r2, r3
 8004422:	d902      	bls.n	800442a <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	76fb      	strb	r3, [r7, #27]
 8004428:	e1b6      	b.n	8004798 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 800442a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800442e:	2b08      	cmp	r3, #8
 8004430:	f200 80a2 	bhi.w	8004578 <UART_SetConfig+0x3f0>
 8004434:	a201      	add	r2, pc, #4	; (adr r2, 800443c <UART_SetConfig+0x2b4>)
 8004436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443a:	bf00      	nop
 800443c:	08004461 	.word	0x08004461
 8004440:	08004579 	.word	0x08004579
 8004444:	080044cd 	.word	0x080044cd
 8004448:	08004579 	.word	0x08004579
 800444c:	08004501 	.word	0x08004501
 8004450:	08004579 	.word	0x08004579
 8004454:	08004579 	.word	0x08004579
 8004458:	08004579 	.word	0x08004579
 800445c:	0800454f 	.word	0x0800454f
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004460:	f7fe fadc 	bl	8002a1c <HAL_RCC_GetPCLK1Freq>
 8004464:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4619      	mov	r1, r3
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	f04f 0400 	mov.w	r4, #0
 8004476:	0214      	lsls	r4, r2, #8
 8004478:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800447c:	020b      	lsls	r3, r1, #8
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6852      	ldr	r2, [r2, #4]
 8004482:	0852      	lsrs	r2, r2, #1
 8004484:	4611      	mov	r1, r2
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	eb13 0b01 	adds.w	fp, r3, r1
 800448e:	eb44 0c02 	adc.w	ip, r4, r2
 8004492:	4658      	mov	r0, fp
 8004494:	4661      	mov	r1, ip
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f04f 0400 	mov.w	r4, #0
 800449e:	461a      	mov	r2, r3
 80044a0:	4623      	mov	r3, r4
 80044a2:	f7fb fee5 	bl	8000270 <__aeabi_uldivmod>
 80044a6:	4603      	mov	r3, r0
 80044a8:	460c      	mov	r4, r1
 80044aa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80044ac:	e067      	b.n	800457e <UART_SetConfig+0x3f6>
 80044ae:	bf00      	nop
 80044b0:	efff69f3 	.word	0xefff69f3
 80044b4:	40008000 	.word	0x40008000
 80044b8:	40013800 	.word	0x40013800
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40004400 	.word	0x40004400
 80044c4:	40004800 	.word	0x40004800
 80044c8:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	085b      	lsrs	r3, r3, #1
 80044d2:	f04f 0400 	mov.w	r4, #0
 80044d6:	49ae      	ldr	r1, [pc, #696]	; (8004790 <UART_SetConfig+0x608>)
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	eb13 0b01 	adds.w	fp, r3, r1
 80044e0:	eb44 0c02 	adc.w	ip, r4, r2
 80044e4:	4658      	mov	r0, fp
 80044e6:	4661      	mov	r1, ip
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f04f 0400 	mov.w	r4, #0
 80044f0:	461a      	mov	r2, r3
 80044f2:	4623      	mov	r3, r4
 80044f4:	f7fb febc 	bl	8000270 <__aeabi_uldivmod>
 80044f8:	4603      	mov	r3, r0
 80044fa:	460c      	mov	r4, r1
 80044fc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80044fe:	e03e      	b.n	800457e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004500:	f7fe f9f6 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8004504:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4619      	mov	r1, r3
 800450a:	f04f 0200 	mov.w	r2, #0
 800450e:	f04f 0300 	mov.w	r3, #0
 8004512:	f04f 0400 	mov.w	r4, #0
 8004516:	0214      	lsls	r4, r2, #8
 8004518:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800451c:	020b      	lsls	r3, r1, #8
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6852      	ldr	r2, [r2, #4]
 8004522:	0852      	lsrs	r2, r2, #1
 8004524:	4611      	mov	r1, r2
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	eb13 0b01 	adds.w	fp, r3, r1
 800452e:	eb44 0c02 	adc.w	ip, r4, r2
 8004532:	4658      	mov	r0, fp
 8004534:	4661      	mov	r1, ip
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f04f 0400 	mov.w	r4, #0
 800453e:	461a      	mov	r2, r3
 8004540:	4623      	mov	r3, r4
 8004542:	f7fb fe95 	bl	8000270 <__aeabi_uldivmod>
 8004546:	4603      	mov	r3, r0
 8004548:	460c      	mov	r4, r1
 800454a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800454c:	e017      	b.n	800457e <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	085b      	lsrs	r3, r3, #1
 8004554:	f04f 0400 	mov.w	r4, #0
 8004558:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800455c:	f144 0100 	adc.w	r1, r4, #0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f04f 0400 	mov.w	r4, #0
 8004568:	461a      	mov	r2, r3
 800456a:	4623      	mov	r3, r4
 800456c:	f7fb fe80 	bl	8000270 <__aeabi_uldivmod>
 8004570:	4603      	mov	r3, r0
 8004572:	460c      	mov	r4, r1
 8004574:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004576:	e002      	b.n	800457e <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	76fb      	strb	r3, [r7, #27]
            break;
 800457c:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004584:	d308      	bcc.n	8004598 <UART_SetConfig+0x410>
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800458c:	d204      	bcs.n	8004598 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	e0ff      	b.n	8004798 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	76fb      	strb	r3, [r7, #27]
 800459c:	e0fc      	b.n	8004798 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a6:	f040 8083 	bne.w	80046b0 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 80045aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d85e      	bhi.n	8004670 <UART_SetConfig+0x4e8>
 80045b2:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <UART_SetConfig+0x430>)
 80045b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b8:	080045dd 	.word	0x080045dd
 80045bc:	080045fd 	.word	0x080045fd
 80045c0:	0800461d 	.word	0x0800461d
 80045c4:	08004671 	.word	0x08004671
 80045c8:	08004639 	.word	0x08004639
 80045cc:	08004671 	.word	0x08004671
 80045d0:	08004671 	.word	0x08004671
 80045d4:	08004671 	.word	0x08004671
 80045d8:	08004659 	.word	0x08004659
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045dc:	f7fe fa1e 	bl	8002a1c <HAL_RCC_GetPCLK1Freq>
 80045e0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	005a      	lsls	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	441a      	add	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045fa:	e03c      	b.n	8004676 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045fc:	f7fe fa24 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 8004600:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	005a      	lsls	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	441a      	add	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	fbb2 f3f3 	udiv	r3, r2, r3
 8004616:	b29b      	uxth	r3, r3
 8004618:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800461a:	e02c      	b.n	8004676 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	085b      	lsrs	r3, r3, #1
 8004622:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004626:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6852      	ldr	r2, [r2, #4]
 800462e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004632:	b29b      	uxth	r3, r3
 8004634:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004636:	e01e      	b.n	8004676 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004638:	f7fe f95a 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 800463c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	005a      	lsls	r2, r3, #1
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	085b      	lsrs	r3, r3, #1
 8004648:	441a      	add	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004652:	b29b      	uxth	r3, r3
 8004654:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004656:	e00e      	b.n	8004676 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	fbb2 f3f3 	udiv	r3, r2, r3
 800466a:	b29b      	uxth	r3, r3
 800466c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800466e:	e002      	b.n	8004676 <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	76fb      	strb	r3, [r7, #27]
        break;
 8004674:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	2b0f      	cmp	r3, #15
 800467a:	d916      	bls.n	80046aa <UART_SetConfig+0x522>
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004682:	d212      	bcs.n	80046aa <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	b29b      	uxth	r3, r3
 8004688:	f023 030f 	bic.w	r3, r3, #15
 800468c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	085b      	lsrs	r3, r3, #1
 8004692:	b29b      	uxth	r3, r3
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	b29a      	uxth	r2, r3
 800469a:	89fb      	ldrh	r3, [r7, #14]
 800469c:	4313      	orrs	r3, r2
 800469e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	89fa      	ldrh	r2, [r7, #14]
 80046a6:	60da      	str	r2, [r3, #12]
 80046a8:	e076      	b.n	8004798 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	76fb      	strb	r3, [r7, #27]
 80046ae:	e073      	b.n	8004798 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 80046b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d85c      	bhi.n	8004772 <UART_SetConfig+0x5ea>
 80046b8:	a201      	add	r2, pc, #4	; (adr r2, 80046c0 <UART_SetConfig+0x538>)
 80046ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046be:	bf00      	nop
 80046c0:	080046e5 	.word	0x080046e5
 80046c4:	08004703 	.word	0x08004703
 80046c8:	08004721 	.word	0x08004721
 80046cc:	08004773 	.word	0x08004773
 80046d0:	0800473d 	.word	0x0800473d
 80046d4:	08004773 	.word	0x08004773
 80046d8:	08004773 	.word	0x08004773
 80046dc:	08004773 	.word	0x08004773
 80046e0:	0800475b 	.word	0x0800475b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046e4:	f7fe f99a 	bl	8002a1c <HAL_RCC_GetPCLK1Freq>
 80046e8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	085a      	lsrs	r2, r3, #1
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	441a      	add	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004700:	e03a      	b.n	8004778 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004702:	f7fe f9a1 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 8004706:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	085a      	lsrs	r2, r3, #1
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	441a      	add	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	fbb2 f3f3 	udiv	r3, r2, r3
 800471a:	b29b      	uxth	r3, r3
 800471c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800471e:	e02b      	b.n	8004778 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800472a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6852      	ldr	r2, [r2, #4]
 8004732:	fbb3 f3f2 	udiv	r3, r3, r2
 8004736:	b29b      	uxth	r3, r3
 8004738:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800473a:	e01d      	b.n	8004778 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800473c:	f7fe f8d8 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8004740:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	085a      	lsrs	r2, r3, #1
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	441a      	add	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	fbb2 f3f3 	udiv	r3, r2, r3
 8004754:	b29b      	uxth	r3, r3
 8004756:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004758:	e00e      	b.n	8004778 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	085b      	lsrs	r3, r3, #1
 8004760:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	b29b      	uxth	r3, r3
 800476e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004770:	e002      	b.n	8004778 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	76fb      	strb	r3, [r7, #27]
        break;
 8004776:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	2b0f      	cmp	r3, #15
 800477c:	d90a      	bls.n	8004794 <UART_SetConfig+0x60c>
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004784:	d206      	bcs.n	8004794 <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	60da      	str	r2, [r3, #12]
 800478e:	e003      	b.n	8004798 <UART_SetConfig+0x610>
 8004790:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80047a4:	7efb      	ldrb	r3, [r7, #27]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3728      	adds	r7, #40	; 0x28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080047b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01a      	beq.n	80048c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ae:	d10a      	bne.n	80048c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	605a      	str	r2, [r3, #4]
  }
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004902:	f7fc ff6f 	bl	80017e4 <HAL_GetTick>
 8004906:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b08      	cmp	r3, #8
 8004914:	d10e      	bne.n	8004934 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004916:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f82a 	bl	800497e <UART_WaitOnFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e020      	b.n	8004976 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b04      	cmp	r3, #4
 8004940:	d10e      	bne.n	8004960 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004942:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f814 	bl	800497e <UART_WaitOnFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e00a      	b.n	8004976 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	4613      	mov	r3, r2
 800498c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800498e:	e05d      	b.n	8004a4c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d059      	beq.n	8004a4c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004998:	f7fc ff24 	bl	80017e4 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d302      	bcc.n	80049ae <UART_WaitOnFlagUntilTimeout+0x30>
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d11b      	bne.n	80049e6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049bc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0201 	bic.w	r2, r2, #1
 80049cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2220      	movs	r2, #32
 80049d2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e042      	b.n	8004a6c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d02b      	beq.n	8004a4c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a02:	d123      	bne.n	8004a4c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a0c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a1c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e00f      	b.n	8004a6c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69da      	ldr	r2, [r3, #28]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	4013      	ands	r3, r2
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2301      	moveq	r3, #1
 8004a5e:	2300      	movne	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d092      	beq.n	8004990 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a8a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0201 	bic.w	r2, r2, #1
 8004a9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7ff fb4e 	bl	8004174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2220      	movs	r2, #32
 8004afc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff fb2b 	bl	8004160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
	...

08004b28 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004b2c:	4904      	ldr	r1, [pc, #16]	; (8004b40 <MX_FATFS_Init+0x18>)
 8004b2e:	4805      	ldr	r0, [pc, #20]	; (8004b44 <MX_FATFS_Init+0x1c>)
 8004b30:	f003 f90e 	bl	8007d50 <FATFS_LinkDriver>
 8004b34:	4603      	mov	r3, r0
 8004b36:	461a      	mov	r2, r3
 8004b38:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <MX_FATFS_Init+0x20>)
 8004b3a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8004b3c:	bf00      	nop
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	200025f4 	.word	0x200025f4
 8004b44:	20000010 	.word	0x20000010
 8004b48:	200025f8 	.word	0x200025f8

08004b4c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004b50:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
     return SD_disk_initialize(pdrv);
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fb feb9 	bl	80008e0 <SD_disk_initialize>
 8004b6e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
     return SD_disk_status(pdrv);
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fb ff95 	bl	8000ab4 <SD_disk_status>
 8004b8a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	607a      	str	r2, [r7, #4]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
     return SD_disk_read(pdrv, buff, sector, count);
 8004ba4:	7bf8      	ldrb	r0, [r7, #15]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	f7fb ff98 	bl	8000ae0 <SD_disk_read>
 8004bb0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	603b      	str	r3, [r7, #0]
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
   /* USER CODE HERE */
     return SD_disk_write(pdrv, buff, sector, count);
 8004bca:	7bf8      	ldrb	r0, [r7, #15]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	f7fb ffef 	bl	8000bb4 <SD_disk_write>
 8004bd6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	603a      	str	r2, [r7, #0]
 8004bea:	71fb      	strb	r3, [r7, #7]
 8004bec:	460b      	mov	r3, r1
 8004bee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
     return SD_disk_ioctl(pdrv, cmd, buff);
 8004bf0:	79b9      	ldrb	r1, [r7, #6]
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fc f860 	bl	8000cbc <SD_disk_ioctl>
 8004bfc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	4a08      	ldr	r2, [pc, #32]	; (8004c38 <disk_status+0x30>)
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	79fa      	ldrb	r2, [r7, #7]
 8004c20:	4905      	ldr	r1, [pc, #20]	; (8004c38 <disk_status+0x30>)
 8004c22:	440a      	add	r2, r1
 8004c24:	7a12      	ldrb	r2, [r2, #8]
 8004c26:	4610      	mov	r0, r2
 8004c28:	4798      	blx	r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	200002d4 	.word	0x200002d4

08004c3c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	4a0d      	ldr	r2, [pc, #52]	; (8004c84 <disk_initialize+0x48>)
 8004c4e:	5cd3      	ldrb	r3, [r2, r3]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d111      	bne.n	8004c78 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	4a0b      	ldr	r2, [pc, #44]	; (8004c84 <disk_initialize+0x48>)
 8004c58:	2101      	movs	r1, #1
 8004c5a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
 8004c5e:	4a09      	ldr	r2, [pc, #36]	; (8004c84 <disk_initialize+0x48>)
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	79fa      	ldrb	r2, [r7, #7]
 8004c6a:	4906      	ldr	r1, [pc, #24]	; (8004c84 <disk_initialize+0x48>)
 8004c6c:	440a      	add	r2, r1
 8004c6e:	7a12      	ldrb	r2, [r2, #8]
 8004c70:	4610      	mov	r0, r2
 8004c72:	4798      	blx	r3
 8004c74:	4603      	mov	r3, r0
 8004c76:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	200002d4 	.word	0x200002d4

08004c88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	4603      	mov	r3, r0
 8004c96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	; (8004cc4 <disk_read+0x3c>)
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	689c      	ldr	r4, [r3, #8]
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	4a07      	ldr	r2, [pc, #28]	; (8004cc4 <disk_read+0x3c>)
 8004ca8:	4413      	add	r3, r2
 8004caa:	7a18      	ldrb	r0, [r3, #8]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	68b9      	ldr	r1, [r7, #8]
 8004cb2:	47a0      	blx	r4
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	75fb      	strb	r3, [r7, #23]
  return res;
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd90      	pop	{r4, r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	200002d4 	.word	0x200002d4

08004cc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <disk_write+0x3c>)
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	68dc      	ldr	r4, [r3, #12]
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	4a07      	ldr	r2, [pc, #28]	; (8004d04 <disk_write+0x3c>)
 8004ce8:	4413      	add	r3, r2
 8004cea:	7a18      	ldrb	r0, [r3, #8]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	47a0      	blx	r4
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	75fb      	strb	r3, [r7, #23]
  return res;
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd90      	pop	{r4, r7, pc}
 8004d02:	bf00      	nop
 8004d04:	200002d4 	.word	0x200002d4

08004d08 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	603a      	str	r2, [r7, #0]
 8004d12:	71fb      	strb	r3, [r7, #7]
 8004d14:	460b      	mov	r3, r1
 8004d16:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <disk_ioctl+0x38>)
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	79fa      	ldrb	r2, [r7, #7]
 8004d26:	4906      	ldr	r1, [pc, #24]	; (8004d40 <disk_ioctl+0x38>)
 8004d28:	440a      	add	r2, r1
 8004d2a:	7a10      	ldrb	r0, [r2, #8]
 8004d2c:	79b9      	ldrb	r1, [r7, #6]
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	4798      	blx	r3
 8004d32:	4603      	mov	r3, r0
 8004d34:	73fb      	strb	r3, [r7, #15]
  return res;
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	200002d4 	.word	0x200002d4

08004d44 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004d54:	89fb      	ldrh	r3, [r7, #14]
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	b21a      	sxth	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	b21b      	sxth	r3, r3
 8004d60:	4313      	orrs	r3, r2
 8004d62:	b21b      	sxth	r3, r3
 8004d64:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004d66:	89fb      	ldrh	r3, [r7, #14]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3303      	adds	r3, #3
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	021b      	lsls	r3, r3, #8
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	3202      	adds	r2, #2
 8004d8c:	7812      	ldrb	r2, [r2, #0]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	3201      	adds	r2, #1
 8004d9a:	7812      	ldrb	r2, [r2, #0]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	7812      	ldrb	r2, [r2, #0]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
	return rv;
 8004dac:	68fb      	ldr	r3, [r7, #12]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	887a      	ldrh	r2, [r7, #2]
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	887b      	ldrh	r3, [r7, #2]
 8004dd4:	0a1b      	lsrs	r3, r3, #8
 8004dd6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	607a      	str	r2, [r7, #4]
 8004dde:	887a      	ldrh	r2, [r7, #2]
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	0a1b      	lsrs	r3, r3, #8
 8004e0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	607a      	str	r2, [r7, #4]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	701a      	strb	r2, [r3, #0]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	0a1b      	lsrs	r3, r3, #8
 8004e1c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	0a1b      	lsrs	r3, r3, #8
 8004e2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	607a      	str	r2, [r7, #4]
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00d      	beq.n	8004e7e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	1c53      	adds	r3, r2, #1
 8004e66:	613b      	str	r3, [r7, #16]
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	1c59      	adds	r1, r3, #1
 8004e6c:	6179      	str	r1, [r7, #20]
 8004e6e:	7812      	ldrb	r2, [r2, #0]
 8004e70:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	607b      	str	r3, [r7, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f1      	bne.n	8004e62 <mem_cpy+0x1a>
	}
}
 8004e7e:	bf00      	nop
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004e8a:	b480      	push	{r7}
 8004e8c:	b087      	sub	sp, #28
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	60f8      	str	r0, [r7, #12]
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	617a      	str	r2, [r7, #20]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	607b      	str	r3, [r7, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f3      	bne.n	8004e9a <mem_set+0x10>
}
 8004eb2:	bf00      	nop
 8004eb4:	371c      	adds	r7, #28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004ebe:	b480      	push	{r7}
 8004ec0:	b089      	sub	sp, #36	; 0x24
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	61fa      	str	r2, [r7, #28]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	4619      	mov	r1, r3
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	61ba      	str	r2, [r7, #24]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	1acb      	subs	r3, r1, r3
 8004eea:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	607b      	str	r3, [r7, #4]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <mem_cmp+0x40>
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0eb      	beq.n	8004ed6 <mem_cmp+0x18>

	return r;
 8004efe:	697b      	ldr	r3, [r7, #20]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3724      	adds	r7, #36	; 0x24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004f16:	e002      	b.n	8004f1e <chk_chr+0x12>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	607b      	str	r3, [r7, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <chk_chr+0x26>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d1f2      	bne.n	8004f18 <chk_chr+0xc>
	return *str;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	781b      	ldrb	r3, [r3, #0]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
	...

08004f44 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60bb      	str	r3, [r7, #8]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	e029      	b.n	8004fac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004f58:	4a27      	ldr	r2, [pc, #156]	; (8004ff8 <chk_lock+0xb4>)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	4413      	add	r3, r2
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d01d      	beq.n	8004fa2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004f66:	4a24      	ldr	r2, [pc, #144]	; (8004ff8 <chk_lock+0xb4>)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	4413      	add	r3, r2
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d116      	bne.n	8004fa6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004f78:	4a1f      	ldr	r2, [pc, #124]	; (8004ff8 <chk_lock+0xb4>)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	4413      	add	r3, r2
 8004f80:	3304      	adds	r3, #4
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d10c      	bne.n	8004fa6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004f8c:	4a1a      	ldr	r2, [pc, #104]	; (8004ff8 <chk_lock+0xb4>)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	4413      	add	r3, r2
 8004f94:	3308      	adds	r3, #8
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d102      	bne.n	8004fa6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004fa0:	e007      	b.n	8004fb2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d9d2      	bls.n	8004f58 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d109      	bne.n	8004fcc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d102      	bne.n	8004fc4 <chk_lock+0x80>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d101      	bne.n	8004fc8 <chk_lock+0x84>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	e010      	b.n	8004fea <chk_lock+0xa6>
 8004fc8:	2312      	movs	r3, #18
 8004fca:	e00e      	b.n	8004fea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d108      	bne.n	8004fe4 <chk_lock+0xa0>
 8004fd2:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <chk_lock+0xb4>)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	4413      	add	r3, r2
 8004fda:	330c      	adds	r3, #12
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe2:	d101      	bne.n	8004fe8 <chk_lock+0xa4>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	e000      	b.n	8004fea <chk_lock+0xa6>
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	200000b4 	.word	0x200000b4

08004ffc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005002:	2300      	movs	r3, #0
 8005004:	607b      	str	r3, [r7, #4]
 8005006:	e002      	b.n	800500e <enq_lock+0x12>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3301      	adds	r3, #1
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d806      	bhi.n	8005022 <enq_lock+0x26>
 8005014:	4a09      	ldr	r2, [pc, #36]	; (800503c <enq_lock+0x40>)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	4413      	add	r3, r2
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f2      	bne.n	8005008 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b02      	cmp	r3, #2
 8005026:	bf14      	ite	ne
 8005028:	2301      	movne	r3, #1
 800502a:	2300      	moveq	r3, #0
 800502c:	b2db      	uxtb	r3, r3
}
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	200000b4 	.word	0x200000b4

08005040 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	e01f      	b.n	8005090 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005050:	4a41      	ldr	r2, [pc, #260]	; (8005158 <inc_lock+0x118>)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	4413      	add	r3, r2
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d113      	bne.n	800508a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005062:	4a3d      	ldr	r2, [pc, #244]	; (8005158 <inc_lock+0x118>)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	4413      	add	r3, r2
 800506a:	3304      	adds	r3, #4
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005072:	429a      	cmp	r2, r3
 8005074:	d109      	bne.n	800508a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005076:	4a38      	ldr	r2, [pc, #224]	; (8005158 <inc_lock+0x118>)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	4413      	add	r3, r2
 800507e:	3308      	adds	r3, #8
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005086:	429a      	cmp	r2, r3
 8005088:	d006      	beq.n	8005098 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3301      	adds	r3, #1
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d9dc      	bls.n	8005050 <inc_lock+0x10>
 8005096:	e000      	b.n	800509a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005098:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b02      	cmp	r3, #2
 800509e:	d132      	bne.n	8005106 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	e002      	b.n	80050ac <inc_lock+0x6c>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3301      	adds	r3, #1
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d806      	bhi.n	80050c0 <inc_lock+0x80>
 80050b2:	4a29      	ldr	r2, [pc, #164]	; (8005158 <inc_lock+0x118>)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	4413      	add	r3, r2
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1f2      	bne.n	80050a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d101      	bne.n	80050ca <inc_lock+0x8a>
 80050c6:	2300      	movs	r3, #0
 80050c8:	e040      	b.n	800514c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	4922      	ldr	r1, [pc, #136]	; (8005158 <inc_lock+0x118>)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	440b      	add	r3, r1
 80050d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	491e      	ldr	r1, [pc, #120]	; (8005158 <inc_lock+0x118>)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	440b      	add	r3, r1
 80050e4:	3304      	adds	r3, #4
 80050e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	695a      	ldr	r2, [r3, #20]
 80050ec:	491a      	ldr	r1, [pc, #104]	; (8005158 <inc_lock+0x118>)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	440b      	add	r3, r1
 80050f4:	3308      	adds	r3, #8
 80050f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80050f8:	4a17      	ldr	r2, [pc, #92]	; (8005158 <inc_lock+0x118>)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	4413      	add	r3, r2
 8005100:	330c      	adds	r3, #12
 8005102:	2200      	movs	r2, #0
 8005104:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d009      	beq.n	8005120 <inc_lock+0xe0>
 800510c:	4a12      	ldr	r2, [pc, #72]	; (8005158 <inc_lock+0x118>)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	4413      	add	r3, r2
 8005114:	330c      	adds	r3, #12
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <inc_lock+0xe0>
 800511c:	2300      	movs	r3, #0
 800511e:	e015      	b.n	800514c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d108      	bne.n	8005138 <inc_lock+0xf8>
 8005126:	4a0c      	ldr	r2, [pc, #48]	; (8005158 <inc_lock+0x118>)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	4413      	add	r3, r2
 800512e:	330c      	adds	r3, #12
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	3301      	adds	r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	e001      	b.n	800513c <inc_lock+0xfc>
 8005138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800513c:	4906      	ldr	r1, [pc, #24]	; (8005158 <inc_lock+0x118>)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	440b      	add	r3, r1
 8005144:	330c      	adds	r3, #12
 8005146:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	3301      	adds	r3, #1
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	200000b4 	.word	0x200000b4

0800515c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3b01      	subs	r3, #1
 8005168:	607b      	str	r3, [r7, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d825      	bhi.n	80051bc <dec_lock+0x60>
		n = Files[i].ctr;
 8005170:	4a17      	ldr	r2, [pc, #92]	; (80051d0 <dec_lock+0x74>)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	4413      	add	r3, r2
 8005178:	330c      	adds	r3, #12
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800517e:	89fb      	ldrh	r3, [r7, #14]
 8005180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005184:	d101      	bne.n	800518a <dec_lock+0x2e>
 8005186:	2300      	movs	r3, #0
 8005188:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800518a:	89fb      	ldrh	r3, [r7, #14]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <dec_lock+0x3a>
 8005190:	89fb      	ldrh	r3, [r7, #14]
 8005192:	3b01      	subs	r3, #1
 8005194:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005196:	4a0e      	ldr	r2, [pc, #56]	; (80051d0 <dec_lock+0x74>)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	4413      	add	r3, r2
 800519e:	330c      	adds	r3, #12
 80051a0:	89fa      	ldrh	r2, [r7, #14]
 80051a2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80051a4:	89fb      	ldrh	r3, [r7, #14]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d105      	bne.n	80051b6 <dec_lock+0x5a>
 80051aa:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <dec_lock+0x74>)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	4413      	add	r3, r2
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	737b      	strb	r3, [r7, #13]
 80051ba:	e001      	b.n	80051c0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80051bc:	2302      	movs	r3, #2
 80051be:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80051c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	200000b4 	.word	0x200000b4

080051d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	e010      	b.n	8005204 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80051e2:	4a0d      	ldr	r2, [pc, #52]	; (8005218 <clear_lock+0x44>)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	4413      	add	r3, r2
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d105      	bne.n	80051fe <clear_lock+0x2a>
 80051f2:	4a09      	ldr	r2, [pc, #36]	; (8005218 <clear_lock+0x44>)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	4413      	add	r3, r2
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3301      	adds	r3, #1
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d9eb      	bls.n	80051e2 <clear_lock+0xe>
	}
}
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	200000b4 	.word	0x200000b4

0800521c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	78db      	ldrb	r3, [r3, #3]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d034      	beq.n	800529a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005234:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	7858      	ldrb	r0, [r3, #1]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005240:	2301      	movs	r3, #1
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	f7ff fd40 	bl	8004cc8 <disk_write>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <sync_window+0x38>
			res = FR_DISK_ERR;
 800524e:	2301      	movs	r3, #1
 8005250:	73fb      	strb	r3, [r7, #15]
 8005252:	e022      	b.n	800529a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	1ad2      	subs	r2, r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	429a      	cmp	r2, r3
 8005268:	d217      	bcs.n	800529a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	789b      	ldrb	r3, [r3, #2]
 800526e:	613b      	str	r3, [r7, #16]
 8005270:	e010      	b.n	8005294 <sync_window+0x78>
					wsect += fs->fsize;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4413      	add	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	7858      	ldrb	r0, [r3, #1]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005286:	2301      	movs	r3, #1
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	f7ff fd1d 	bl	8004cc8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	3b01      	subs	r3, #1
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d8eb      	bhi.n	8005272 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800529a:	7bfb      	ldrb	r3, [r7, #15]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d01b      	beq.n	80052f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff ffad 	bl	800521c <sync_window>
 80052c2:	4603      	mov	r3, r0
 80052c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d113      	bne.n	80052f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	7858      	ldrb	r0, [r3, #1]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80052d6:	2301      	movs	r3, #1
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	f7ff fcd5 	bl	8004c88 <disk_read>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d004      	beq.n	80052ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80052e4:	f04f 33ff 	mov.w	r3, #4294967295
 80052e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff ff87 	bl	800521c <sync_window>
 800530e:	4603      	mov	r3, r0
 8005310:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005312:	7bfb      	ldrb	r3, [r7, #15]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d159      	bne.n	80053cc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b03      	cmp	r3, #3
 800531e:	d149      	bne.n	80053b4 <sync_fs+0xb4>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	791b      	ldrb	r3, [r3, #4]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d145      	bne.n	80053b4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	899b      	ldrh	r3, [r3, #12]
 8005332:	461a      	mov	r2, r3
 8005334:	2100      	movs	r1, #0
 8005336:	f7ff fda8 	bl	8004e8a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3338      	adds	r3, #56	; 0x38
 800533e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005342:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff fd37 	bl	8004dba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3338      	adds	r3, #56	; 0x38
 8005350:	4921      	ldr	r1, [pc, #132]	; (80053d8 <sync_fs+0xd8>)
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fd4c 	bl	8004df0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3338      	adds	r3, #56	; 0x38
 800535c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005360:	491e      	ldr	r1, [pc, #120]	; (80053dc <sync_fs+0xdc>)
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fd44 	bl	8004df0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3338      	adds	r3, #56	; 0x38
 800536c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	4619      	mov	r1, r3
 8005376:	4610      	mov	r0, r2
 8005378:	f7ff fd3a 	bl	8004df0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3338      	adds	r3, #56	; 0x38
 8005380:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	4619      	mov	r1, r3
 800538a:	4610      	mov	r0, r2
 800538c:	f7ff fd30 	bl	8004df0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	7858      	ldrb	r0, [r3, #1]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a8:	2301      	movs	r3, #1
 80053aa:	f7ff fc8d 	bl	8004cc8 <disk_write>
			fs->fsi_flag = 0;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	785b      	ldrb	r3, [r3, #1]
 80053b8:	2200      	movs	r2, #0
 80053ba:	2100      	movs	r1, #0
 80053bc:	4618      	mov	r0, r3
 80053be:	f7ff fca3 	bl	8004d08 <disk_ioctl>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <sync_fs+0xcc>
 80053c8:	2301      	movs	r3, #1
 80053ca:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	41615252 	.word	0x41615252
 80053dc:	61417272 	.word	0x61417272

080053e0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	3b02      	subs	r3, #2
 80053ee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	3b02      	subs	r3, #2
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d301      	bcc.n	8005400 <clust2sect+0x20>
 80053fc:	2300      	movs	r3, #0
 80053fe:	e008      	b.n	8005412 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	895b      	ldrh	r3, [r3, #10]
 8005404:	461a      	mov	r2, r3
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	fb03 f202 	mul.w	r2, r3, r2
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005410:	4413      	add	r3, r2
}
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b086      	sub	sp, #24
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d904      	bls.n	800543e <get_fat+0x20>
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d302      	bcc.n	8005444 <get_fat+0x26>
		val = 1;	/* Internal error */
 800543e:	2301      	movs	r3, #1
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	e0b7      	b.n	80055b4 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005444:	f04f 33ff 	mov.w	r3, #4294967295
 8005448:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b02      	cmp	r3, #2
 8005450:	d05a      	beq.n	8005508 <get_fat+0xea>
 8005452:	2b03      	cmp	r3, #3
 8005454:	d07d      	beq.n	8005552 <get_fat+0x134>
 8005456:	2b01      	cmp	r3, #1
 8005458:	f040 80a2 	bne.w	80055a0 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	085b      	lsrs	r3, r3, #1
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	899b      	ldrh	r3, [r3, #12]
 8005472:	4619      	mov	r1, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	fbb3 f3f1 	udiv	r3, r3, r1
 800547a:	4413      	add	r3, r2
 800547c:	4619      	mov	r1, r3
 800547e:	6938      	ldr	r0, [r7, #16]
 8005480:	f7ff ff10 	bl	80052a4 <move_window>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	f040 808d 	bne.w	80055a6 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	60fa      	str	r2, [r7, #12]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	8992      	ldrh	r2, [r2, #12]
 8005496:	fbb3 f1f2 	udiv	r1, r3, r2
 800549a:	fb02 f201 	mul.w	r2, r2, r1
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4413      	add	r3, r2
 80054a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	899b      	ldrh	r3, [r3, #12]
 80054b2:	4619      	mov	r1, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80054ba:	4413      	add	r3, r2
 80054bc:	4619      	mov	r1, r3
 80054be:	6938      	ldr	r0, [r7, #16]
 80054c0:	f7ff fef0 	bl	80052a4 <move_window>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d16f      	bne.n	80055aa <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	899b      	ldrh	r3, [r3, #12]
 80054ce:	461a      	mov	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80054d6:	fb02 f201 	mul.w	r2, r2, r1
 80054da:	1a9b      	subs	r3, r3, r2
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4413      	add	r3, r2
 80054e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	461a      	mov	r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <get_fat+0xe0>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	091b      	lsrs	r3, r3, #4
 80054fc:	e002      	b.n	8005504 <get_fat+0xe6>
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005504:	617b      	str	r3, [r7, #20]
			break;
 8005506:	e055      	b.n	80055b4 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	899b      	ldrh	r3, [r3, #12]
 8005510:	085b      	lsrs	r3, r3, #1
 8005512:	b29b      	uxth	r3, r3
 8005514:	4619      	mov	r1, r3
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	fbb3 f3f1 	udiv	r3, r3, r1
 800551c:	4413      	add	r3, r2
 800551e:	4619      	mov	r1, r3
 8005520:	6938      	ldr	r0, [r7, #16]
 8005522:	f7ff febf 	bl	80052a4 <move_window>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d140      	bne.n	80055ae <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	8992      	ldrh	r2, [r2, #12]
 800553a:	fbb3 f0f2 	udiv	r0, r3, r2
 800553e:	fb02 f200 	mul.w	r2, r2, r0
 8005542:	1a9b      	subs	r3, r3, r2
 8005544:	440b      	add	r3, r1
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff fbfc 	bl	8004d44 <ld_word>
 800554c:	4603      	mov	r3, r0
 800554e:	617b      	str	r3, [r7, #20]
			break;
 8005550:	e030      	b.n	80055b4 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	899b      	ldrh	r3, [r3, #12]
 800555a:	089b      	lsrs	r3, r3, #2
 800555c:	b29b      	uxth	r3, r3
 800555e:	4619      	mov	r1, r3
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	fbb3 f3f1 	udiv	r3, r3, r1
 8005566:	4413      	add	r3, r2
 8005568:	4619      	mov	r1, r3
 800556a:	6938      	ldr	r0, [r7, #16]
 800556c:	f7ff fe9a 	bl	80052a4 <move_window>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d11d      	bne.n	80055b2 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	8992      	ldrh	r2, [r2, #12]
 8005584:	fbb3 f0f2 	udiv	r0, r3, r2
 8005588:	fb02 f200 	mul.w	r2, r2, r0
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	440b      	add	r3, r1
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff fbef 	bl	8004d74 <ld_dword>
 8005596:	4603      	mov	r3, r0
 8005598:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800559c:	617b      	str	r3, [r7, #20]
			break;
 800559e:	e009      	b.n	80055b4 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80055a0:	2301      	movs	r3, #1
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	e006      	b.n	80055b4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80055a6:	bf00      	nop
 80055a8:	e004      	b.n	80055b4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80055aa:	bf00      	nop
 80055ac:	e002      	b.n	80055b4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80055ae:	bf00      	nop
 80055b0:	e000      	b.n	80055b4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80055b2:	bf00      	nop
		}
	}

	return val;
 80055b4:	697b      	ldr	r3, [r7, #20]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3718      	adds	r7, #24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80055be:	b590      	push	{r4, r7, lr}
 80055c0:	b089      	sub	sp, #36	; 0x24
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	60b9      	str	r1, [r7, #8]
 80055c8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80055ca:	2302      	movs	r3, #2
 80055cc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	f240 8106 	bls.w	80057e2 <put_fat+0x224>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	429a      	cmp	r2, r3
 80055de:	f080 8100 	bcs.w	80057e2 <put_fat+0x224>
		switch (fs->fs_type) {
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	f000 8088 	beq.w	80056fc <put_fat+0x13e>
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	f000 80b0 	beq.w	8005752 <put_fat+0x194>
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	f040 80f5 	bne.w	80057e2 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	61bb      	str	r3, [r7, #24]
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	085b      	lsrs	r3, r3, #1
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4413      	add	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	899b      	ldrh	r3, [r3, #12]
 800560e:	4619      	mov	r1, r3
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	fbb3 f3f1 	udiv	r3, r3, r1
 8005616:	4413      	add	r3, r2
 8005618:	4619      	mov	r1, r3
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f7ff fe42 	bl	80052a4 <move_window>
 8005620:	4603      	mov	r3, r0
 8005622:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005624:	7ffb      	ldrb	r3, [r7, #31]
 8005626:	2b00      	cmp	r3, #0
 8005628:	f040 80d4 	bne.w	80057d4 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	61ba      	str	r2, [r7, #24]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	8992      	ldrh	r2, [r2, #12]
 800563c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005640:	fb02 f200 	mul.w	r2, r2, r0
 8005644:	1a9b      	subs	r3, r3, r2
 8005646:	440b      	add	r3, r1
 8005648:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00d      	beq.n	8005670 <put_fat+0xb2>
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	b25b      	sxtb	r3, r3
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	b25a      	sxtb	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	b25b      	sxtb	r3, r3
 8005668:	4313      	orrs	r3, r2
 800566a:	b25b      	sxtb	r3, r3
 800566c:	b2db      	uxtb	r3, r3
 800566e:	e001      	b.n	8005674 <put_fat+0xb6>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	b2db      	uxtb	r3, r3
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	899b      	ldrh	r3, [r3, #12]
 8005686:	4619      	mov	r1, r3
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	fbb3 f3f1 	udiv	r3, r3, r1
 800568e:	4413      	add	r3, r2
 8005690:	4619      	mov	r1, r3
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f7ff fe06 	bl	80052a4 <move_window>
 8005698:	4603      	mov	r3, r0
 800569a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800569c:	7ffb      	ldrb	r3, [r7, #31]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f040 809a 	bne.w	80057d8 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	899b      	ldrh	r3, [r3, #12]
 80056ae:	461a      	mov	r2, r3
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80056b6:	fb02 f200 	mul.w	r2, r2, r0
 80056ba:	1a9b      	subs	r3, r3, r2
 80056bc:	440b      	add	r3, r1
 80056be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <put_fat+0x114>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	091b      	lsrs	r3, r3, #4
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	e00e      	b.n	80056f0 <put_fat+0x132>
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	b25b      	sxtb	r3, r3
 80056d8:	f023 030f 	bic.w	r3, r3, #15
 80056dc:	b25a      	sxtb	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	0a1b      	lsrs	r3, r3, #8
 80056e2:	b25b      	sxtb	r3, r3
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	b25b      	sxtb	r3, r3
 80056ea:	4313      	orrs	r3, r2
 80056ec:	b25b      	sxtb	r3, r3
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2201      	movs	r2, #1
 80056f8:	70da      	strb	r2, [r3, #3]
			break;
 80056fa:	e072      	b.n	80057e2 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	899b      	ldrh	r3, [r3, #12]
 8005704:	085b      	lsrs	r3, r3, #1
 8005706:	b29b      	uxth	r3, r3
 8005708:	4619      	mov	r1, r3
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005710:	4413      	add	r3, r2
 8005712:	4619      	mov	r1, r3
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7ff fdc5 	bl	80052a4 <move_window>
 800571a:	4603      	mov	r3, r0
 800571c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800571e:	7ffb      	ldrb	r3, [r7, #31]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d15b      	bne.n	80057dc <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	8992      	ldrh	r2, [r2, #12]
 8005732:	fbb3 f0f2 	udiv	r0, r3, r2
 8005736:	fb02 f200 	mul.w	r2, r2, r0
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	440b      	add	r3, r1
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	b292      	uxth	r2, r2
 8005742:	4611      	mov	r1, r2
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff fb38 	bl	8004dba <st_word>
			fs->wflag = 1;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	70da      	strb	r2, [r3, #3]
			break;
 8005750:	e047      	b.n	80057e2 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	899b      	ldrh	r3, [r3, #12]
 800575a:	089b      	lsrs	r3, r3, #2
 800575c:	b29b      	uxth	r3, r3
 800575e:	4619      	mov	r1, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	fbb3 f3f1 	udiv	r3, r3, r1
 8005766:	4413      	add	r3, r2
 8005768:	4619      	mov	r1, r3
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f7ff fd9a 	bl	80052a4 <move_window>
 8005770:	4603      	mov	r3, r0
 8005772:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005774:	7ffb      	ldrb	r3, [r7, #31]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d132      	bne.n	80057e0 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	8992      	ldrh	r2, [r2, #12]
 800578e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005792:	fb02 f200 	mul.w	r2, r2, r0
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	440b      	add	r3, r1
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff faea 	bl	8004d74 <ld_dword>
 80057a0:	4603      	mov	r3, r0
 80057a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80057a6:	4323      	orrs	r3, r4
 80057a8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	8992      	ldrh	r2, [r2, #12]
 80057b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80057bc:	fb02 f200 	mul.w	r2, r2, r0
 80057c0:	1a9b      	subs	r3, r3, r2
 80057c2:	440b      	add	r3, r1
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff fb12 	bl	8004df0 <st_dword>
			fs->wflag = 1;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	70da      	strb	r2, [r3, #3]
			break;
 80057d2:	e006      	b.n	80057e2 <put_fat+0x224>
			if (res != FR_OK) break;
 80057d4:	bf00      	nop
 80057d6:	e004      	b.n	80057e2 <put_fat+0x224>
			if (res != FR_OK) break;
 80057d8:	bf00      	nop
 80057da:	e002      	b.n	80057e2 <put_fat+0x224>
			if (res != FR_OK) break;
 80057dc:	bf00      	nop
 80057de:	e000      	b.n	80057e2 <put_fat+0x224>
			if (res != FR_OK) break;
 80057e0:	bf00      	nop
		}
	}
	return res;
 80057e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3724      	adds	r7, #36	; 0x24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd90      	pop	{r4, r7, pc}

080057ec <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d904      	bls.n	8005812 <remove_chain+0x26>
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	429a      	cmp	r2, r3
 8005810:	d301      	bcc.n	8005816 <remove_chain+0x2a>
 8005812:	2302      	movs	r3, #2
 8005814:	e04b      	b.n	80058ae <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00c      	beq.n	8005836 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800581c:	f04f 32ff 	mov.w	r2, #4294967295
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	69b8      	ldr	r0, [r7, #24]
 8005824:	f7ff fecb 	bl	80055be <put_fat>
 8005828:	4603      	mov	r3, r0
 800582a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800582c:	7ffb      	ldrb	r3, [r7, #31]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <remove_chain+0x4a>
 8005832:	7ffb      	ldrb	r3, [r7, #31]
 8005834:	e03b      	b.n	80058ae <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005836:	68b9      	ldr	r1, [r7, #8]
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f7ff fdf0 	bl	800541e <get_fat>
 800583e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d031      	beq.n	80058aa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <remove_chain+0x64>
 800584c:	2302      	movs	r3, #2
 800584e:	e02e      	b.n	80058ae <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005856:	d101      	bne.n	800585c <remove_chain+0x70>
 8005858:	2301      	movs	r3, #1
 800585a:	e028      	b.n	80058ae <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800585c:	2200      	movs	r2, #0
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	69b8      	ldr	r0, [r7, #24]
 8005862:	f7ff feac 	bl	80055be <put_fat>
 8005866:	4603      	mov	r3, r0
 8005868:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800586a:	7ffb      	ldrb	r3, [r7, #31]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <remove_chain+0x88>
 8005870:	7ffb      	ldrb	r3, [r7, #31]
 8005872:	e01c      	b.n	80058ae <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	699a      	ldr	r2, [r3, #24]
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	3b02      	subs	r3, #2
 800587e:	429a      	cmp	r2, r3
 8005880:	d20b      	bcs.n	800589a <remove_chain+0xae>
			fs->free_clst++;
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	791b      	ldrb	r3, [r3, #4]
 8005890:	f043 0301 	orr.w	r3, r3, #1
 8005894:	b2da      	uxtb	r2, r3
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d3c6      	bcc.n	8005836 <remove_chain+0x4a>
 80058a8:	e000      	b.n	80058ac <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80058aa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3720      	adds	r7, #32
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b088      	sub	sp, #32
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10d      	bne.n	80058e8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d004      	beq.n	80058e2 <create_chain+0x2c>
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d31b      	bcc.n	800591a <create_chain+0x64>
 80058e2:	2301      	movs	r3, #1
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	e018      	b.n	800591a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80058e8:	6839      	ldr	r1, [r7, #0]
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7ff fd97 	bl	800541e <get_fat>
 80058f0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d801      	bhi.n	80058fc <create_chain+0x46>
 80058f8:	2301      	movs	r3, #1
 80058fa:	e070      	b.n	80059de <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d101      	bne.n	8005908 <create_chain+0x52>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	e06a      	b.n	80059de <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	429a      	cmp	r2, r3
 8005910:	d201      	bcs.n	8005916 <create_chain+0x60>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	e063      	b.n	80059de <create_chain+0x128>
		scl = clst;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	3301      	adds	r3, #1
 8005922:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	429a      	cmp	r2, r3
 800592c:	d307      	bcc.n	800593e <create_chain+0x88>
				ncl = 2;
 800592e:	2302      	movs	r3, #2
 8005930:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	429a      	cmp	r2, r3
 8005938:	d901      	bls.n	800593e <create_chain+0x88>
 800593a:	2300      	movs	r3, #0
 800593c:	e04f      	b.n	80059de <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800593e:	69f9      	ldr	r1, [r7, #28]
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff fd6c 	bl	800541e <get_fat>
 8005946:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00e      	beq.n	800596c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d003      	beq.n	800595c <create_chain+0xa6>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595a:	d101      	bne.n	8005960 <create_chain+0xaa>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	e03e      	b.n	80059de <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	429a      	cmp	r2, r3
 8005966:	d1da      	bne.n	800591e <create_chain+0x68>
 8005968:	2300      	movs	r3, #0
 800596a:	e038      	b.n	80059de <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800596c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800596e:	f04f 32ff 	mov.w	r2, #4294967295
 8005972:	69f9      	ldr	r1, [r7, #28]
 8005974:	6938      	ldr	r0, [r7, #16]
 8005976:	f7ff fe22 	bl	80055be <put_fat>
 800597a:	4603      	mov	r3, r0
 800597c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800597e:	7dfb      	ldrb	r3, [r7, #23]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d109      	bne.n	8005998 <create_chain+0xe2>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d006      	beq.n	8005998 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	6839      	ldr	r1, [r7, #0]
 800598e:	6938      	ldr	r0, [r7, #16]
 8005990:	f7ff fe15 	bl	80055be <put_fat>
 8005994:	4603      	mov	r3, r0
 8005996:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005998:	7dfb      	ldrb	r3, [r7, #23]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d116      	bne.n	80059cc <create_chain+0x116>
		fs->last_clst = ncl;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	69fa      	ldr	r2, [r7, #28]
 80059a2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	699a      	ldr	r2, [r3, #24]
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	3b02      	subs	r3, #2
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d804      	bhi.n	80059bc <create_chain+0x106>
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	1e5a      	subs	r2, r3, #1
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	791b      	ldrb	r3, [r3, #4]
 80059c0:	f043 0301 	orr.w	r3, r3, #1
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	711a      	strb	r2, [r3, #4]
 80059ca:	e007      	b.n	80059dc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80059cc:	7dfb      	ldrb	r3, [r7, #23]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d102      	bne.n	80059d8 <create_chain+0x122>
 80059d2:	f04f 33ff 	mov.w	r3, #4294967295
 80059d6:	e000      	b.n	80059da <create_chain+0x124>
 80059d8:	2301      	movs	r3, #1
 80059da:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80059dc:	69fb      	ldr	r3, [r7, #28]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3720      	adds	r7, #32
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b087      	sub	sp, #28
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fa:	3304      	adds	r3, #4
 80059fc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	899b      	ldrh	r3, [r3, #12]
 8005a02:	461a      	mov	r2, r3
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	8952      	ldrh	r2, [r2, #10]
 8005a0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a12:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1d1a      	adds	r2, r3, #4
 8005a18:	613a      	str	r2, [r7, #16]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <clmt_clust+0x42>
 8005a24:	2300      	movs	r3, #0
 8005a26:	e010      	b.n	8005a4a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d307      	bcc.n	8005a40 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005a3e:	e7e9      	b.n	8005a14 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005a40:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	4413      	add	r3, r2
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b086      	sub	sp, #24
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a6c:	d204      	bcs.n	8005a78 <dir_sdi+0x22>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	f003 031f 	and.w	r3, r3, #31
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <dir_sdi+0x26>
		return FR_INT_ERR;
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e071      	b.n	8005b60 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <dir_sdi+0x46>
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d902      	bls.n	8005a9c <dir_sdi+0x46>
		clst = fs->dirbase;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10c      	bne.n	8005abc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	095b      	lsrs	r3, r3, #5
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	8912      	ldrh	r2, [r2, #8]
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d301      	bcc.n	8005ab2 <dir_sdi+0x5c>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e056      	b.n	8005b60 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	61da      	str	r2, [r3, #28]
 8005aba:	e02d      	b.n	8005b18 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	895b      	ldrh	r3, [r3, #10]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	899b      	ldrh	r3, [r3, #12]
 8005ac6:	fb03 f302 	mul.w	r3, r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005acc:	e019      	b.n	8005b02 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6979      	ldr	r1, [r7, #20]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7ff fca3 	bl	800541e <get_fat>
 8005ad8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae0:	d101      	bne.n	8005ae6 <dir_sdi+0x90>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e03c      	b.n	8005b60 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d904      	bls.n	8005af6 <dir_sdi+0xa0>
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d301      	bcc.n	8005afa <dir_sdi+0xa4>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e032      	b.n	8005b60 <dir_sdi+0x10a>
			ofs -= csz;
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d2e1      	bcs.n	8005ace <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005b0a:	6979      	ldr	r1, [r7, #20]
 8005b0c:	6938      	ldr	r0, [r7, #16]
 8005b0e:	f7ff fc67 	bl	80053e0 <clust2sect>
 8005b12:	4602      	mov	r2, r0
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <dir_sdi+0xd4>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e01a      	b.n	8005b60 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69da      	ldr	r2, [r3, #28]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	899b      	ldrh	r3, [r3, #12]
 8005b32:	4619      	mov	r1, r3
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b3a:	441a      	add	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	899b      	ldrh	r3, [r3, #12]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b52:	fb02 f200 	mul.w	r2, r2, r0
 8005b56:	1a9b      	subs	r3, r3, r2
 8005b58:	18ca      	adds	r2, r1, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	3320      	adds	r3, #32
 8005b7e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <dir_next+0x28>
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b8e:	d301      	bcc.n	8005b94 <dir_next+0x2c>
 8005b90:	2304      	movs	r3, #4
 8005b92:	e0bb      	b.n	8005d0c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	899b      	ldrh	r3, [r3, #12]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ba0:	fb02 f201 	mul.w	r2, r2, r1
 8005ba4:	1a9b      	subs	r3, r3, r2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f040 809d 	bne.w	8005ce6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10b      	bne.n	8005bd6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	095b      	lsrs	r3, r3, #5
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	8912      	ldrh	r2, [r2, #8]
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	f0c0 808d 	bcc.w	8005ce6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	61da      	str	r2, [r3, #28]
 8005bd2:	2304      	movs	r3, #4
 8005bd4:	e09a      	b.n	8005d0c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	899b      	ldrh	r3, [r3, #12]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	fbb3 f3f2 	udiv	r3, r3, r2
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	8952      	ldrh	r2, [r2, #10]
 8005be6:	3a01      	subs	r2, #1
 8005be8:	4013      	ands	r3, r2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d17b      	bne.n	8005ce6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	f7ff fc11 	bl	800541e <get_fat>
 8005bfc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d801      	bhi.n	8005c08 <dir_next+0xa0>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e081      	b.n	8005d0c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d101      	bne.n	8005c14 <dir_next+0xac>
 8005c10:	2301      	movs	r3, #1
 8005c12:	e07b      	b.n	8005d0c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d359      	bcc.n	8005cd2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d104      	bne.n	8005c2e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	61da      	str	r2, [r3, #28]
 8005c2a:	2304      	movs	r3, #4
 8005c2c:	e06e      	b.n	8005d0c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	4619      	mov	r1, r3
 8005c36:	4610      	mov	r0, r2
 8005c38:	f7ff fe3d 	bl	80058b6 <create_chain>
 8005c3c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <dir_next+0xe0>
 8005c44:	2307      	movs	r3, #7
 8005c46:	e061      	b.n	8005d0c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d101      	bne.n	8005c52 <dir_next+0xea>
 8005c4e:	2302      	movs	r3, #2
 8005c50:	e05c      	b.n	8005d0c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c58:	d101      	bne.n	8005c5e <dir_next+0xf6>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e056      	b.n	8005d0c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f7ff fadc 	bl	800521c <sync_window>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <dir_next+0x106>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e04e      	b.n	8005d0c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	899b      	ldrh	r3, [r3, #12]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	f7ff f905 	bl	8004e8a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005c80:	2300      	movs	r3, #0
 8005c82:	613b      	str	r3, [r7, #16]
 8005c84:	6979      	ldr	r1, [r7, #20]
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f7ff fbaa 	bl	80053e0 <clust2sect>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	635a      	str	r2, [r3, #52]	; 0x34
 8005c92:	e012      	b.n	8005cba <dir_next+0x152>
						fs->wflag = 1;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f7ff fabe 	bl	800521c <sync_window>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <dir_next+0x142>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e030      	b.n	8005d0c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	3301      	adds	r3, #1
 8005cae:	613b      	str	r3, [r7, #16]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	635a      	str	r2, [r3, #52]	; 0x34
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	895b      	ldrh	r3, [r3, #10]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d3e6      	bcc.n	8005c94 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad2      	subs	r2, r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005cd8:	6979      	ldr	r1, [r7, #20]
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7ff fb80 	bl	80053e0 <clust2sect>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	899b      	ldrh	r3, [r3, #12]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cfe:	fb02 f200 	mul.w	r2, r2, r0
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	18ca      	adds	r2, r1, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005d24:	2100      	movs	r1, #0
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff fe95 	bl	8005a56 <dir_sdi>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d12b      	bne.n	8005d8e <dir_alloc+0x7a>
		n = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f7ff faaf 	bl	80052a4 <move_window>
 8005d46:	4603      	mov	r3, r0
 8005d48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d11d      	bne.n	8005d8c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2be5      	cmp	r3, #229	; 0xe5
 8005d58:	d004      	beq.n	8005d64 <dir_alloc+0x50>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d107      	bne.n	8005d74 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	3301      	adds	r3, #1
 8005d68:	613b      	str	r3, [r7, #16]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d102      	bne.n	8005d78 <dir_alloc+0x64>
 8005d72:	e00c      	b.n	8005d8e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005d74:	2300      	movs	r3, #0
 8005d76:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005d78:	2101      	movs	r1, #1
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff fef4 	bl	8005b68 <dir_next>
 8005d80:	4603      	mov	r3, r0
 8005d82:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005d84:	7dfb      	ldrb	r3, [r7, #23]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0d7      	beq.n	8005d3a <dir_alloc+0x26>
 8005d8a:	e000      	b.n	8005d8e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005d8c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005d8e:	7dfb      	ldrb	r3, [r7, #23]
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	d101      	bne.n	8005d98 <dir_alloc+0x84>
 8005d94:	2307      	movs	r3, #7
 8005d96:	75fb      	strb	r3, [r7, #23]
	return res;
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	331a      	adds	r3, #26
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fe ffc7 	bl	8004d44 <ld_word>
 8005db6:	4603      	mov	r3, r0
 8005db8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	d109      	bne.n	8005dd6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	3314      	adds	r3, #20
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fe ffbc 	bl	8004d44 <ld_word>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	041b      	lsls	r3, r3, #16
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	331a      	adds	r3, #26
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	b292      	uxth	r2, r2
 8005df4:	4611      	mov	r1, r2
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fe ffdf 	bl	8004dba <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	d109      	bne.n	8005e18 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f103 0214 	add.w	r2, r3, #20
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	0c1b      	lsrs	r3, r3, #16
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	4619      	mov	r1, r3
 8005e12:	4610      	mov	r0, r2
 8005e14:	f7fe ffd1 	bl	8004dba <st_word>
	}
}
 8005e18:	bf00      	nop
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005e20:	b590      	push	{r4, r7, lr}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	331a      	adds	r3, #26
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe ff88 	bl	8004d44 <ld_word>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <cmp_lfn+0x1e>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e059      	b.n	8005ef2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e46:	1e5a      	subs	r2, r3, #1
 8005e48:	4613      	mov	r3, r2
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	4413      	add	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005e54:	2301      	movs	r3, #1
 8005e56:	81fb      	strh	r3, [r7, #14]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	613b      	str	r3, [r7, #16]
 8005e5c:	e033      	b.n	8005ec6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005e5e:	4a27      	ldr	r2, [pc, #156]	; (8005efc <cmp_lfn+0xdc>)
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	4413      	add	r3, r2
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fe ff69 	bl	8004d44 <ld_word>
 8005e72:	4603      	mov	r3, r0
 8005e74:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005e76:	89fb      	ldrh	r3, [r7, #14]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d01a      	beq.n	8005eb2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2bfe      	cmp	r3, #254	; 0xfe
 8005e80:	d812      	bhi.n	8005ea8 <cmp_lfn+0x88>
 8005e82:	89bb      	ldrh	r3, [r7, #12]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f001 ffaf 	bl	8007de8 <ff_wtoupper>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	461c      	mov	r4, r3
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	617a      	str	r2, [r7, #20]
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	4413      	add	r3, r2
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 ffa3 	bl	8007de8 <ff_wtoupper>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	429c      	cmp	r4, r3
 8005ea6:	d001      	beq.n	8005eac <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	e022      	b.n	8005ef2 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005eac:	89bb      	ldrh	r3, [r7, #12]
 8005eae:	81fb      	strh	r3, [r7, #14]
 8005eb0:	e006      	b.n	8005ec0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005eb2:	89bb      	ldrh	r3, [r7, #12]
 8005eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d001      	beq.n	8005ec0 <cmp_lfn+0xa0>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e018      	b.n	8005ef2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	613b      	str	r3, [r7, #16]
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2b0c      	cmp	r3, #12
 8005eca:	d9c8      	bls.n	8005e5e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00b      	beq.n	8005ef0 <cmp_lfn+0xd0>
 8005ed8:	89fb      	ldrh	r3, [r7, #14]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d008      	beq.n	8005ef0 <cmp_lfn+0xd0>
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <cmp_lfn+0xd0>
 8005eec:	2300      	movs	r3, #0
 8005eee:	e000      	b.n	8005ef2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005ef0:	2301      	movs	r3, #1
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd90      	pop	{r4, r7, pc}
 8005efa:	bf00      	nop
 8005efc:	08009024 	.word	0x08009024

08005f00 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	460b      	mov	r3, r1
 8005f10:	71fb      	strb	r3, [r7, #7]
 8005f12:	4613      	mov	r3, r2
 8005f14:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	330d      	adds	r3, #13
 8005f1a:	79ba      	ldrb	r2, [r7, #6]
 8005f1c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	330b      	adds	r3, #11
 8005f22:	220f      	movs	r2, #15
 8005f24:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	330c      	adds	r3, #12
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	331a      	adds	r3, #26
 8005f32:	2100      	movs	r1, #0
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fe ff40 	bl	8004dba <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005f3a:	79fb      	ldrb	r3, [r7, #7]
 8005f3c:	1e5a      	subs	r2, r3, #1
 8005f3e:	4613      	mov	r3, r2
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	4413      	add	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	82fb      	strh	r3, [r7, #22]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005f52:	8afb      	ldrh	r3, [r7, #22]
 8005f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d007      	beq.n	8005f6c <put_lfn+0x6c>
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	61fa      	str	r2, [r7, #28]
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4413      	add	r3, r2
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005f6c:	4a17      	ldr	r2, [pc, #92]	; (8005fcc <put_lfn+0xcc>)
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	4413      	add	r3, r2
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	461a      	mov	r2, r3
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	4413      	add	r3, r2
 8005f7a:	8afa      	ldrh	r2, [r7, #22]
 8005f7c:	4611      	mov	r1, r2
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe ff1b 	bl	8004dba <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005f84:	8afb      	ldrh	r3, [r7, #22]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d102      	bne.n	8005f90 <put_lfn+0x90>
 8005f8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f8e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	3301      	adds	r3, #1
 8005f94:	61bb      	str	r3, [r7, #24]
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	2b0c      	cmp	r3, #12
 8005f9a:	d9da      	bls.n	8005f52 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005f9c:	8afb      	ldrh	r3, [r7, #22]
 8005f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d006      	beq.n	8005fb4 <put_lfn+0xb4>
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4413      	add	r3, r2
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d103      	bne.n	8005fbc <put_lfn+0xbc>
 8005fb4:	79fb      	ldrb	r3, [r7, #7]
 8005fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fba:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	79fa      	ldrb	r2, [r7, #7]
 8005fc0:	701a      	strb	r2, [r3, #0]
}
 8005fc2:	bf00      	nop
 8005fc4:	3720      	adds	r7, #32
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	08009024 	.word	0x08009024

08005fd0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b08c      	sub	sp, #48	; 0x30
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005fde:	220b      	movs	r2, #11
 8005fe0:	68b9      	ldr	r1, [r7, #8]
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f7fe ff30 	bl	8004e48 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b05      	cmp	r3, #5
 8005fec:	d92b      	bls.n	8006046 <gen_numname+0x76>
		sr = seq;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005ff2:	e022      	b.n	800603a <gen_numname+0x6a>
			wc = *lfn++;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	1c9a      	adds	r2, r3, #2
 8005ff8:	607a      	str	r2, [r7, #4]
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8005ffe:	2300      	movs	r3, #0
 8006000:	62bb      	str	r3, [r7, #40]	; 0x28
 8006002:	e017      	b.n	8006034 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	005a      	lsls	r2, r3, #1
 8006008:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	4413      	add	r3, r2
 8006010:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006012:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006014:	085b      	lsrs	r3, r3, #1
 8006016:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d005      	beq.n	800602e <gen_numname+0x5e>
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006028:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800602c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006030:	3301      	adds	r3, #1
 8006032:	62bb      	str	r3, [r7, #40]	; 0x28
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	2b0f      	cmp	r3, #15
 8006038:	d9e4      	bls.n	8006004 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1d8      	bne.n	8005ff4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006046:	2307      	movs	r3, #7
 8006048:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	b2db      	uxtb	r3, r3
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	b2db      	uxtb	r3, r3
 8006054:	3330      	adds	r3, #48	; 0x30
 8006056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800605a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800605e:	2b39      	cmp	r3, #57	; 0x39
 8006060:	d904      	bls.n	800606c <gen_numname+0x9c>
 8006062:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006066:	3307      	adds	r3, #7
 8006068:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	1e5a      	subs	r2, r3, #1
 8006070:	62ba      	str	r2, [r7, #40]	; 0x28
 8006072:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006076:	4413      	add	r3, r2
 8006078:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800607c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	091b      	lsrs	r3, r3, #4
 8006084:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1de      	bne.n	800604a <gen_numname+0x7a>
	ns[i] = '~';
 800608c:	f107 0214 	add.w	r2, r7, #20
 8006090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006092:	4413      	add	r3, r2
 8006094:	227e      	movs	r2, #126	; 0x7e
 8006096:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006098:	2300      	movs	r3, #0
 800609a:	627b      	str	r3, [r7, #36]	; 0x24
 800609c:	e002      	b.n	80060a4 <gen_numname+0xd4>
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	3301      	adds	r3, #1
 80060a2:	627b      	str	r3, [r7, #36]	; 0x24
 80060a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d205      	bcs.n	80060b8 <gen_numname+0xe8>
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	4413      	add	r3, r2
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	d1f2      	bne.n	800609e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ba:	2b07      	cmp	r3, #7
 80060bc:	d808      	bhi.n	80060d0 <gen_numname+0x100>
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80060c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80060c8:	4413      	add	r3, r2
 80060ca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80060ce:	e000      	b.n	80060d2 <gen_numname+0x102>
 80060d0:	2120      	movs	r1, #32
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	627a      	str	r2, [r7, #36]	; 0x24
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	460a      	mov	r2, r1
 80060de:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	2b07      	cmp	r3, #7
 80060e4:	d9e8      	bls.n	80060b8 <gen_numname+0xe8>
}
 80060e6:	bf00      	nop
 80060e8:	3730      	adds	r7, #48	; 0x30
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80060fa:	230b      	movs	r3, #11
 80060fc:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
 8006100:	b2da      	uxtb	r2, r3
 8006102:	0852      	lsrs	r2, r2, #1
 8006104:	01db      	lsls	r3, r3, #7
 8006106:	4313      	orrs	r3, r2
 8006108:	b2da      	uxtb	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	1c59      	adds	r1, r3, #1
 800610e:	6079      	str	r1, [r7, #4]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	4413      	add	r3, r2
 8006114:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	3b01      	subs	r3, #1
 800611a:	60bb      	str	r3, [r7, #8]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1ed      	bne.n	80060fe <sum_sfn+0x10>
	return sum;
 8006122:	7bfb      	ldrb	r3, [r7, #15]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800613e:	2100      	movs	r1, #0
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7ff fc88 	bl	8005a56 <dir_sdi>
 8006146:	4603      	mov	r3, r0
 8006148:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800614a:	7dfb      	ldrb	r3, [r7, #23]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <dir_find+0x24>
 8006150:	7dfb      	ldrb	r3, [r7, #23]
 8006152:	e0a9      	b.n	80062a8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006154:	23ff      	movs	r3, #255	; 0xff
 8006156:	753b      	strb	r3, [r7, #20]
 8006158:	7d3b      	ldrb	r3, [r7, #20]
 800615a:	757b      	strb	r3, [r7, #21]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f04f 32ff 	mov.w	r2, #4294967295
 8006162:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	4619      	mov	r1, r3
 800616a:	6938      	ldr	r0, [r7, #16]
 800616c:	f7ff f89a 	bl	80052a4 <move_window>
 8006170:	4603      	mov	r3, r0
 8006172:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	2b00      	cmp	r3, #0
 8006178:	f040 8090 	bne.w	800629c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006184:	7dbb      	ldrb	r3, [r7, #22]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d102      	bne.n	8006190 <dir_find+0x60>
 800618a:	2304      	movs	r3, #4
 800618c:	75fb      	strb	r3, [r7, #23]
 800618e:	e08a      	b.n	80062a6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	330b      	adds	r3, #11
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800619c:	73fb      	strb	r3, [r7, #15]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	7bfa      	ldrb	r2, [r7, #15]
 80061a2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80061a4:	7dbb      	ldrb	r3, [r7, #22]
 80061a6:	2be5      	cmp	r3, #229	; 0xe5
 80061a8:	d007      	beq.n	80061ba <dir_find+0x8a>
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	f003 0308 	and.w	r3, r3, #8
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d009      	beq.n	80061c8 <dir_find+0x98>
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	2b0f      	cmp	r3, #15
 80061b8:	d006      	beq.n	80061c8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80061ba:	23ff      	movs	r3, #255	; 0xff
 80061bc:	757b      	strb	r3, [r7, #21]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f04f 32ff 	mov.w	r2, #4294967295
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
 80061c6:	e05e      	b.n	8006286 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
 80061ca:	2b0f      	cmp	r3, #15
 80061cc:	d136      	bne.n	800623c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80061d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d154      	bne.n	8006286 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80061dc:	7dbb      	ldrb	r3, [r7, #22]
 80061de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00d      	beq.n	8006202 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	7b5b      	ldrb	r3, [r3, #13]
 80061ec:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80061ee:	7dbb      	ldrb	r3, [r7, #22]
 80061f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f4:	75bb      	strb	r3, [r7, #22]
 80061f6:	7dbb      	ldrb	r3, [r7, #22]
 80061f8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695a      	ldr	r2, [r3, #20]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006202:	7dba      	ldrb	r2, [r7, #22]
 8006204:	7d7b      	ldrb	r3, [r7, #21]
 8006206:	429a      	cmp	r2, r3
 8006208:	d115      	bne.n	8006236 <dir_find+0x106>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	330d      	adds	r3, #13
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	7d3a      	ldrb	r2, [r7, #20]
 8006214:	429a      	cmp	r2, r3
 8006216:	d10e      	bne.n	8006236 <dir_find+0x106>
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	691a      	ldr	r2, [r3, #16]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	4619      	mov	r1, r3
 8006222:	4610      	mov	r0, r2
 8006224:	f7ff fdfc 	bl	8005e20 <cmp_lfn>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <dir_find+0x106>
 800622e:	7d7b      	ldrb	r3, [r7, #21]
 8006230:	3b01      	subs	r3, #1
 8006232:	b2db      	uxtb	r3, r3
 8006234:	e000      	b.n	8006238 <dir_find+0x108>
 8006236:	23ff      	movs	r3, #255	; 0xff
 8006238:	757b      	strb	r3, [r7, #21]
 800623a:	e024      	b.n	8006286 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800623c:	7d7b      	ldrb	r3, [r7, #21]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d109      	bne.n	8006256 <dir_find+0x126>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	4618      	mov	r0, r3
 8006248:	f7ff ff51 	bl	80060ee <sum_sfn>
 800624c:	4603      	mov	r3, r0
 800624e:	461a      	mov	r2, r3
 8006250:	7d3b      	ldrb	r3, [r7, #20]
 8006252:	4293      	cmp	r3, r2
 8006254:	d024      	beq.n	80062a0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <dir_find+0x14a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a18      	ldr	r0, [r3, #32]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3324      	adds	r3, #36	; 0x24
 800626c:	220b      	movs	r2, #11
 800626e:	4619      	mov	r1, r3
 8006270:	f7fe fe25 	bl	8004ebe <mem_cmp>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d014      	beq.n	80062a4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800627a:	23ff      	movs	r3, #255	; 0xff
 800627c:	757b      	strb	r3, [r7, #21]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f04f 32ff 	mov.w	r2, #4294967295
 8006284:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006286:	2100      	movs	r1, #0
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff fc6d 	bl	8005b68 <dir_next>
 800628e:	4603      	mov	r3, r0
 8006290:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006292:	7dfb      	ldrb	r3, [r7, #23]
 8006294:	2b00      	cmp	r3, #0
 8006296:	f43f af65 	beq.w	8006164 <dir_find+0x34>
 800629a:	e004      	b.n	80062a6 <dir_find+0x176>
		if (res != FR_OK) break;
 800629c:	bf00      	nop
 800629e:	e002      	b.n	80062a6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80062a0:	bf00      	nop
 80062a2:	e000      	b.n	80062a6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80062a4:	bf00      	nop

	return res;
 80062a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08c      	sub	sp, #48	; 0x30
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80062c4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <dir_register+0x20>
 80062cc:	2306      	movs	r3, #6
 80062ce:	e0e0      	b.n	8006492 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80062d0:	2300      	movs	r3, #0
 80062d2:	627b      	str	r3, [r7, #36]	; 0x24
 80062d4:	e002      	b.n	80062dc <dir_register+0x2c>
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	3301      	adds	r3, #1
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	691a      	ldr	r2, [r3, #16]
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	4413      	add	r3, r2
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1f4      	bne.n	80062d6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80062f2:	f107 030c 	add.w	r3, r7, #12
 80062f6:	220c      	movs	r2, #12
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fe fda5 	bl	8004e48 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	d032      	beq.n	800636e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2240      	movs	r2, #64	; 0x40
 800630c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006310:	2301      	movs	r3, #1
 8006312:	62bb      	str	r3, [r7, #40]	; 0x28
 8006314:	e016      	b.n	8006344 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	691a      	ldr	r2, [r3, #16]
 8006320:	f107 010c 	add.w	r1, r7, #12
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	f7ff fe53 	bl	8005fd0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7ff ff00 	bl	8006130 <dir_find>
 8006330:	4603      	mov	r3, r0
 8006332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800633a:	2b00      	cmp	r3, #0
 800633c:	d106      	bne.n	800634c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	3301      	adds	r3, #1
 8006342:	62bb      	str	r3, [r7, #40]	; 0x28
 8006344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006346:	2b63      	cmp	r3, #99	; 0x63
 8006348:	d9e5      	bls.n	8006316 <dir_register+0x66>
 800634a:	e000      	b.n	800634e <dir_register+0x9e>
			if (res != FR_OK) break;
 800634c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006350:	2b64      	cmp	r3, #100	; 0x64
 8006352:	d101      	bne.n	8006358 <dir_register+0xa8>
 8006354:	2307      	movs	r3, #7
 8006356:	e09c      	b.n	8006492 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006358:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800635c:	2b04      	cmp	r3, #4
 800635e:	d002      	beq.n	8006366 <dir_register+0xb6>
 8006360:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006364:	e095      	b.n	8006492 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006366:	7dfa      	ldrb	r2, [r7, #23]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800636e:	7dfb      	ldrb	r3, [r7, #23]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d007      	beq.n	8006388 <dir_register+0xd8>
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	330c      	adds	r3, #12
 800637c:	4a47      	ldr	r2, [pc, #284]	; (800649c <dir_register+0x1ec>)
 800637e:	fba2 2303 	umull	r2, r3, r2, r3
 8006382:	089b      	lsrs	r3, r3, #2
 8006384:	3301      	adds	r3, #1
 8006386:	e000      	b.n	800638a <dir_register+0xda>
 8006388:	2301      	movs	r3, #1
 800638a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800638c:	6a39      	ldr	r1, [r7, #32]
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7ff fcc0 	bl	8005d14 <dir_alloc>
 8006394:	4603      	mov	r3, r0
 8006396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800639a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d148      	bne.n	8006434 <dir_register+0x184>
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	623b      	str	r3, [r7, #32]
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d042      	beq.n	8006434 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695a      	ldr	r2, [r3, #20]
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	015b      	lsls	r3, r3, #5
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	4619      	mov	r1, r3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff fb4b 	bl	8005a56 <dir_sdi>
 80063c0:	4603      	mov	r3, r0
 80063c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80063c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d132      	bne.n	8006434 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	3324      	adds	r3, #36	; 0x24
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff fe8b 	bl	80060ee <sum_sfn>
 80063d8:	4603      	mov	r3, r0
 80063da:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	4619      	mov	r1, r3
 80063e2:	69f8      	ldr	r0, [r7, #28]
 80063e4:	f7fe ff5e 	bl	80052a4 <move_window>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80063ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d11d      	bne.n	8006432 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	6918      	ldr	r0, [r3, #16]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a19      	ldr	r1, [r3, #32]
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	b2da      	uxtb	r2, r3
 8006402:	7efb      	ldrb	r3, [r7, #27]
 8006404:	f7ff fd7c 	bl	8005f00 <put_lfn>
				fs->wflag = 1;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	2201      	movs	r2, #1
 800640c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800640e:	2100      	movs	r1, #0
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7ff fba9 	bl	8005b68 <dir_next>
 8006416:	4603      	mov	r3, r0
 8006418:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800641c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006420:	2b00      	cmp	r3, #0
 8006422:	d107      	bne.n	8006434 <dir_register+0x184>
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	3b01      	subs	r3, #1
 8006428:	623b      	str	r3, [r7, #32]
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1d5      	bne.n	80063dc <dir_register+0x12c>
 8006430:	e000      	b.n	8006434 <dir_register+0x184>
				if (res != FR_OK) break;
 8006432:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006434:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006438:	2b00      	cmp	r3, #0
 800643a:	d128      	bne.n	800648e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	4619      	mov	r1, r3
 8006442:	69f8      	ldr	r0, [r7, #28]
 8006444:	f7fe ff2e 	bl	80052a4 <move_window>
 8006448:	4603      	mov	r3, r0
 800644a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800644e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006452:	2b00      	cmp	r3, #0
 8006454:	d11b      	bne.n	800648e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	2220      	movs	r2, #32
 800645c:	2100      	movs	r1, #0
 800645e:	4618      	mov	r0, r3
 8006460:	f7fe fd13 	bl	8004e8a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a18      	ldr	r0, [r3, #32]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3324      	adds	r3, #36	; 0x24
 800646c:	220b      	movs	r2, #11
 800646e:	4619      	mov	r1, r3
 8006470:	f7fe fcea 	bl	8004e48 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	330c      	adds	r3, #12
 8006480:	f002 0218 	and.w	r2, r2, #24
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	2201      	movs	r2, #1
 800648c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800648e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006492:	4618      	mov	r0, r3
 8006494:	3730      	adds	r7, #48	; 0x30
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	4ec4ec4f 	.word	0x4ec4ec4f

080064a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08a      	sub	sp, #40	; 0x28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	613b      	str	r3, [r7, #16]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	61ba      	str	r2, [r7, #24]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4413      	add	r3, r2
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80064ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064d0:	2b1f      	cmp	r3, #31
 80064d2:	d940      	bls.n	8006556 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80064d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064d6:	2b2f      	cmp	r3, #47	; 0x2f
 80064d8:	d006      	beq.n	80064e8 <create_name+0x48>
 80064da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064dc:	2b5c      	cmp	r3, #92	; 0x5c
 80064de:	d110      	bne.n	8006502 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80064e0:	e002      	b.n	80064e8 <create_name+0x48>
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	3301      	adds	r3, #1
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	4413      	add	r3, r2
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b2f      	cmp	r3, #47	; 0x2f
 80064f2:	d0f6      	beq.n	80064e2 <create_name+0x42>
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	4413      	add	r3, r2
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b5c      	cmp	r3, #92	; 0x5c
 80064fe:	d0f0      	beq.n	80064e2 <create_name+0x42>
			break;
 8006500:	e02a      	b.n	8006558 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2bfe      	cmp	r3, #254	; 0xfe
 8006506:	d901      	bls.n	800650c <create_name+0x6c>
 8006508:	2306      	movs	r3, #6
 800650a:	e177      	b.n	80067fc <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800650c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800650e:	b2db      	uxtb	r3, r3
 8006510:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006514:	2101      	movs	r1, #1
 8006516:	4618      	mov	r0, r3
 8006518:	f001 fc2a 	bl	8007d70 <ff_convert>
 800651c:	4603      	mov	r3, r0
 800651e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006520:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <create_name+0x8a>
 8006526:	2306      	movs	r3, #6
 8006528:	e168      	b.n	80067fc <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800652a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800652c:	2b7f      	cmp	r3, #127	; 0x7f
 800652e:	d809      	bhi.n	8006544 <create_name+0xa4>
 8006530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006532:	4619      	mov	r1, r3
 8006534:	48b3      	ldr	r0, [pc, #716]	; (8006804 <create_name+0x364>)
 8006536:	f7fe fce9 	bl	8004f0c <chk_chr>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <create_name+0xa4>
 8006540:	2306      	movs	r3, #6
 8006542:	e15b      	b.n	80067fc <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	617a      	str	r2, [r7, #20]
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4413      	add	r3, r2
 8006550:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006552:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006554:	e7b4      	b.n	80064c0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006556:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	441a      	add	r2, r3
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006564:	2b1f      	cmp	r3, #31
 8006566:	d801      	bhi.n	800656c <create_name+0xcc>
 8006568:	2304      	movs	r3, #4
 800656a:	e000      	b.n	800656e <create_name+0xce>
 800656c:	2300      	movs	r3, #0
 800656e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006572:	e011      	b.n	8006598 <create_name+0xf8>
		w = lfn[di - 1];
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800657a:	3b01      	subs	r3, #1
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4413      	add	r3, r2
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006588:	2b20      	cmp	r3, #32
 800658a:	d002      	beq.n	8006592 <create_name+0xf2>
 800658c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800658e:	2b2e      	cmp	r3, #46	; 0x2e
 8006590:	d106      	bne.n	80065a0 <create_name+0x100>
		di--;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	3b01      	subs	r3, #1
 8006596:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1ea      	bne.n	8006574 <create_name+0xd4>
 800659e:	e000      	b.n	80065a2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80065a0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4413      	add	r3, r2
 80065aa:	2200      	movs	r2, #0
 80065ac:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <create_name+0x118>
 80065b4:	2306      	movs	r3, #6
 80065b6:	e121      	b.n	80067fc <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3324      	adds	r3, #36	; 0x24
 80065bc:	220b      	movs	r2, #11
 80065be:	2120      	movs	r1, #32
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7fe fc62 	bl	8004e8a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80065c6:	2300      	movs	r3, #0
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	e002      	b.n	80065d2 <create_name+0x132>
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	3301      	adds	r3, #1
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4413      	add	r3, r2
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d0f5      	beq.n	80065cc <create_name+0x12c>
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4413      	add	r3, r2
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	2b2e      	cmp	r3, #46	; 0x2e
 80065ec:	d0ee      	beq.n	80065cc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d009      	beq.n	8006608 <create_name+0x168>
 80065f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065f8:	f043 0303 	orr.w	r3, r3, #3
 80065fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006600:	e002      	b.n	8006608 <create_name+0x168>
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	3b01      	subs	r3, #1
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d009      	beq.n	8006622 <create_name+0x182>
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006614:	3b01      	subs	r3, #1
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	2b2e      	cmp	r3, #46	; 0x2e
 8006620:	d1ef      	bne.n	8006602 <create_name+0x162>

	i = b = 0; ni = 8;
 8006622:	2300      	movs	r3, #0
 8006624:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006628:	2300      	movs	r3, #0
 800662a:	623b      	str	r3, [r7, #32]
 800662c:	2308      	movs	r3, #8
 800662e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	61ba      	str	r2, [r7, #24]
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4413      	add	r3, r2
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006640:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 8090 	beq.w	8006768 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006648:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800664a:	2b20      	cmp	r3, #32
 800664c:	d006      	beq.n	800665c <create_name+0x1bc>
 800664e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006650:	2b2e      	cmp	r3, #46	; 0x2e
 8006652:	d10a      	bne.n	800666a <create_name+0x1ca>
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	429a      	cmp	r2, r3
 800665a:	d006      	beq.n	800666a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800665c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006660:	f043 0303 	orr.w	r3, r3, #3
 8006664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006668:	e07d      	b.n	8006766 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800666a:	6a3a      	ldr	r2, [r7, #32]
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	429a      	cmp	r2, r3
 8006670:	d203      	bcs.n	800667a <create_name+0x1da>
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	429a      	cmp	r2, r3
 8006678:	d123      	bne.n	80066c2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	2b0b      	cmp	r3, #11
 800667e:	d106      	bne.n	800668e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006684:	f043 0303 	orr.w	r3, r3, #3
 8006688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800668c:	e06f      	b.n	800676e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	429a      	cmp	r2, r3
 8006694:	d005      	beq.n	80066a2 <create_name+0x202>
 8006696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800669a:	f043 0303 	orr.w	r3, r3, #3
 800669e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d860      	bhi.n	800676c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	2308      	movs	r3, #8
 80066b0:	623b      	str	r3, [r7, #32]
 80066b2:	230b      	movs	r3, #11
 80066b4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80066b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80066c0:	e051      	b.n	8006766 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80066c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066c4:	2b7f      	cmp	r3, #127	; 0x7f
 80066c6:	d914      	bls.n	80066f2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80066c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066ca:	2100      	movs	r1, #0
 80066cc:	4618      	mov	r0, r3
 80066ce:	f001 fb4f 	bl	8007d70 <ff_convert>
 80066d2:	4603      	mov	r3, r0
 80066d4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80066d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d004      	beq.n	80066e6 <create_name+0x246>
 80066dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066de:	3b80      	subs	r3, #128	; 0x80
 80066e0:	4a49      	ldr	r2, [pc, #292]	; (8006808 <create_name+0x368>)
 80066e2:	5cd3      	ldrb	r3, [r2, r3]
 80066e4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80066e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066ea:	f043 0302 	orr.w	r3, r3, #2
 80066ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80066f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <create_name+0x268>
 80066f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066fa:	4619      	mov	r1, r3
 80066fc:	4843      	ldr	r0, [pc, #268]	; (800680c <create_name+0x36c>)
 80066fe:	f7fe fc05 	bl	8004f0c <chk_chr>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d008      	beq.n	800671a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006708:	235f      	movs	r3, #95	; 0x5f
 800670a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800670c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006710:	f043 0303 	orr.w	r3, r3, #3
 8006714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006718:	e01b      	b.n	8006752 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800671a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800671c:	2b40      	cmp	r3, #64	; 0x40
 800671e:	d909      	bls.n	8006734 <create_name+0x294>
 8006720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006722:	2b5a      	cmp	r3, #90	; 0x5a
 8006724:	d806      	bhi.n	8006734 <create_name+0x294>
					b |= 2;
 8006726:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800672a:	f043 0302 	orr.w	r3, r3, #2
 800672e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006732:	e00e      	b.n	8006752 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006734:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006736:	2b60      	cmp	r3, #96	; 0x60
 8006738:	d90b      	bls.n	8006752 <create_name+0x2b2>
 800673a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800673c:	2b7a      	cmp	r3, #122	; 0x7a
 800673e:	d808      	bhi.n	8006752 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006740:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006744:	f043 0301 	orr.w	r3, r3, #1
 8006748:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800674c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800674e:	3b20      	subs	r3, #32
 8006750:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	623a      	str	r2, [r7, #32]
 8006758:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800675a:	b2d1      	uxtb	r1, r2
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	4413      	add	r3, r2
 8006760:	460a      	mov	r2, r1
 8006762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006766:	e763      	b.n	8006630 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006768:	bf00      	nop
 800676a:	e000      	b.n	800676e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800676c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006774:	2be5      	cmp	r3, #229	; 0xe5
 8006776:	d103      	bne.n	8006780 <create_name+0x2e0>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2205      	movs	r2, #5
 800677c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	2b08      	cmp	r3, #8
 8006784:	d104      	bne.n	8006790 <create_name+0x2f0>
 8006786:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006790:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006794:	f003 030c 	and.w	r3, r3, #12
 8006798:	2b0c      	cmp	r3, #12
 800679a:	d005      	beq.n	80067a8 <create_name+0x308>
 800679c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80067a0:	f003 0303 	and.w	r3, r3, #3
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d105      	bne.n	80067b4 <create_name+0x314>
 80067a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067ac:	f043 0302 	orr.w	r3, r3, #2
 80067b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80067b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d117      	bne.n	80067f0 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80067c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80067c4:	f003 0303 	and.w	r3, r3, #3
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d105      	bne.n	80067d8 <create_name+0x338>
 80067cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067d0:	f043 0310 	orr.w	r3, r3, #16
 80067d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80067d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80067dc:	f003 030c 	and.w	r3, r3, #12
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	d105      	bne.n	80067f0 <create_name+0x350>
 80067e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067e8:	f043 0308 	orr.w	r3, r3, #8
 80067ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80067f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80067fa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3728      	adds	r7, #40	; 0x28
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	08008f14 	.word	0x08008f14
 8006808:	08008fa4 	.word	0x08008fa4
 800680c:	08008f20 	.word	0x08008f20

08006810 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006824:	e002      	b.n	800682c <follow_path+0x1c>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	3301      	adds	r3, #1
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b2f      	cmp	r3, #47	; 0x2f
 8006832:	d0f8      	beq.n	8006826 <follow_path+0x16>
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b5c      	cmp	r3, #92	; 0x5c
 800683a:	d0f4      	beq.n	8006826 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	2200      	movs	r2, #0
 8006840:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b1f      	cmp	r3, #31
 8006848:	d80a      	bhi.n	8006860 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2280      	movs	r2, #128	; 0x80
 800684e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006852:	2100      	movs	r1, #0
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff f8fe 	bl	8005a56 <dir_sdi>
 800685a:	4603      	mov	r3, r0
 800685c:	75fb      	strb	r3, [r7, #23]
 800685e:	e048      	b.n	80068f2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006860:	463b      	mov	r3, r7
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7ff fe1b 	bl	80064a0 <create_name>
 800686a:	4603      	mov	r3, r0
 800686c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d139      	bne.n	80068e8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7ff fc5b 	bl	8006130 <dir_find>
 800687a:	4603      	mov	r3, r0
 800687c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006884:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006886:	7dfb      	ldrb	r3, [r7, #23]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00a      	beq.n	80068a2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800688c:	7dfb      	ldrb	r3, [r7, #23]
 800688e:	2b04      	cmp	r3, #4
 8006890:	d12c      	bne.n	80068ec <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006892:	7afb      	ldrb	r3, [r7, #11]
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b00      	cmp	r3, #0
 800689a:	d127      	bne.n	80068ec <follow_path+0xdc>
 800689c:	2305      	movs	r3, #5
 800689e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80068a0:	e024      	b.n	80068ec <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80068a2:	7afb      	ldrb	r3, [r7, #11]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d121      	bne.n	80068f0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	799b      	ldrb	r3, [r3, #6]
 80068b0:	f003 0310 	and.w	r3, r3, #16
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d102      	bne.n	80068be <follow_path+0xae>
				res = FR_NO_PATH; break;
 80068b8:	2305      	movs	r3, #5
 80068ba:	75fb      	strb	r3, [r7, #23]
 80068bc:	e019      	b.n	80068f2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	8992      	ldrh	r2, [r2, #12]
 80068cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80068d0:	fb02 f200 	mul.w	r2, r2, r0
 80068d4:	1a9b      	subs	r3, r3, r2
 80068d6:	440b      	add	r3, r1
 80068d8:	4619      	mov	r1, r3
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f7ff fa61 	bl	8005da2 <ld_clust>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80068e6:	e7bb      	b.n	8006860 <follow_path+0x50>
			if (res != FR_OK) break;
 80068e8:	bf00      	nop
 80068ea:	e002      	b.n	80068f2 <follow_path+0xe2>
				break;
 80068ec:	bf00      	nop
 80068ee:	e000      	b.n	80068f2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80068f0:	bf00      	nop
			}
		}
	}

	return res;
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006904:	f04f 33ff 	mov.w	r3, #4294967295
 8006908:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d031      	beq.n	8006976 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	e002      	b.n	8006920 <get_ldnumber+0x24>
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	3301      	adds	r3, #1
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b1f      	cmp	r3, #31
 8006926:	d903      	bls.n	8006930 <get_ldnumber+0x34>
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b3a      	cmp	r3, #58	; 0x3a
 800692e:	d1f4      	bne.n	800691a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b3a      	cmp	r3, #58	; 0x3a
 8006936:	d11c      	bne.n	8006972 <get_ldnumber+0x76>
			tp = *path;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	60fa      	str	r2, [r7, #12]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	3b30      	subs	r3, #48	; 0x30
 8006948:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b09      	cmp	r3, #9
 800694e:	d80e      	bhi.n	800696e <get_ldnumber+0x72>
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	429a      	cmp	r2, r3
 8006956:	d10a      	bne.n	800696e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d107      	bne.n	800696e <get_ldnumber+0x72>
					vol = (int)i;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	3301      	adds	r3, #1
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	e002      	b.n	8006978 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006972:	2300      	movs	r3, #0
 8006974:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006976:	693b      	ldr	r3, [r7, #16]
}
 8006978:	4618      	mov	r0, r3
 800697a:	371c      	adds	r7, #28
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	70da      	strb	r2, [r3, #3]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f04f 32ff 	mov.w	r2, #4294967295
 800699a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7fe fc80 	bl	80052a4 <move_window>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <check_fs+0x2a>
 80069aa:	2304      	movs	r3, #4
 80069ac:	e038      	b.n	8006a20 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	3338      	adds	r3, #56	; 0x38
 80069b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fe f9c4 	bl	8004d44 <ld_word>
 80069bc:	4603      	mov	r3, r0
 80069be:	461a      	mov	r2, r3
 80069c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d001      	beq.n	80069cc <check_fs+0x48>
 80069c8:	2303      	movs	r3, #3
 80069ca:	e029      	b.n	8006a20 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069d2:	2be9      	cmp	r3, #233	; 0xe9
 80069d4:	d009      	beq.n	80069ea <check_fs+0x66>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069dc:	2beb      	cmp	r3, #235	; 0xeb
 80069de:	d11e      	bne.n	8006a1e <check_fs+0x9a>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80069e6:	2b90      	cmp	r3, #144	; 0x90
 80069e8:	d119      	bne.n	8006a1e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	3338      	adds	r3, #56	; 0x38
 80069ee:	3336      	adds	r3, #54	; 0x36
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7fe f9bf 	bl	8004d74 <ld_dword>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80069fc:	4a0a      	ldr	r2, [pc, #40]	; (8006a28 <check_fs+0xa4>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d101      	bne.n	8006a06 <check_fs+0x82>
 8006a02:	2300      	movs	r3, #0
 8006a04:	e00c      	b.n	8006a20 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3338      	adds	r3, #56	; 0x38
 8006a0a:	3352      	adds	r3, #82	; 0x52
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fe f9b1 	bl	8004d74 <ld_dword>
 8006a12:	4602      	mov	r2, r0
 8006a14:	4b05      	ldr	r3, [pc, #20]	; (8006a2c <check_fs+0xa8>)
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d101      	bne.n	8006a1e <check_fs+0x9a>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e000      	b.n	8006a20 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006a1e:	2302      	movs	r3, #2
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	00544146 	.word	0x00544146
 8006a2c:	33544146 	.word	0x33544146

08006a30 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b096      	sub	sp, #88	; 0x58
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f7ff ff59 	bl	80068fc <get_ldnumber>
 8006a4a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	da01      	bge.n	8006a56 <find_volume+0x26>
 8006a52:	230b      	movs	r3, #11
 8006a54:	e268      	b.n	8006f28 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006a56:	4ab0      	ldr	r2, [pc, #704]	; (8006d18 <find_volume+0x2e8>)
 8006a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a5e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <find_volume+0x3a>
 8006a66:	230c      	movs	r3, #12
 8006a68:	e25e      	b.n	8006f28 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a6e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006a70:	79fb      	ldrb	r3, [r7, #7]
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d01a      	beq.n	8006ab6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe f8bf 	bl	8004c08 <disk_status>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006a90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10c      	bne.n	8006ab6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006a9c:	79fb      	ldrb	r3, [r7, #7]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d007      	beq.n	8006ab2 <find_volume+0x82>
 8006aa2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006aa6:	f003 0304 	and.w	r3, r3, #4
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006aae:	230a      	movs	r3, #10
 8006ab0:	e23a      	b.n	8006f28 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	e238      	b.n	8006f28 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	2200      	movs	r2, #0
 8006aba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	785b      	ldrb	r3, [r3, #1]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe f8b7 	bl	8004c3c <disk_initialize>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006ad4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e221      	b.n	8006f28 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d007      	beq.n	8006afa <find_volume+0xca>
 8006aea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006aee:	f003 0304 	and.w	r3, r3, #4
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006af6:	230a      	movs	r3, #10
 8006af8:	e216      	b.n	8006f28 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afc:	7858      	ldrb	r0, [r3, #1]
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b00:	330c      	adds	r3, #12
 8006b02:	461a      	mov	r2, r3
 8006b04:	2102      	movs	r1, #2
 8006b06:	f7fe f8ff 	bl	8004d08 <disk_ioctl>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <find_volume+0xe4>
 8006b10:	2301      	movs	r3, #1
 8006b12:	e209      	b.n	8006f28 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	899b      	ldrh	r3, [r3, #12]
 8006b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1c:	d80d      	bhi.n	8006b3a <find_volume+0x10a>
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b20:	899b      	ldrh	r3, [r3, #12]
 8006b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b26:	d308      	bcc.n	8006b3a <find_volume+0x10a>
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	899b      	ldrh	r3, [r3, #12]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	899b      	ldrh	r3, [r3, #12]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	4013      	ands	r3, r2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <find_volume+0x10e>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e1f4      	b.n	8006f28 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006b42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b46:	f7ff ff1d 	bl	8006984 <check_fs>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006b50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d14b      	bne.n	8006bf0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006b58:	2300      	movs	r3, #0
 8006b5a:	643b      	str	r3, [r7, #64]	; 0x40
 8006b5c:	e01f      	b.n	8006b9e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b60:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006b6c:	4413      	add	r3, r2
 8006b6e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	3304      	adds	r3, #4
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d006      	beq.n	8006b88 <find_volume+0x158>
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	3308      	adds	r3, #8
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fe f8f8 	bl	8004d74 <ld_dword>
 8006b84:	4602      	mov	r2, r0
 8006b86:	e000      	b.n	8006b8a <find_volume+0x15a>
 8006b88:	2200      	movs	r2, #0
 8006b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006b92:	440b      	add	r3, r1
 8006b94:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	d9dc      	bls.n	8006b5e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d002      	beq.n	8006bb4 <find_volume+0x184>
 8006bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006bc2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <find_volume+0x1a6>
 8006bca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006bcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bce:	f7ff fed9 	bl	8006984 <check_fs>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	e000      	b.n	8006bd8 <find_volume+0x1a8>
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006bdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d905      	bls.n	8006bf0 <find_volume+0x1c0>
 8006be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006be6:	3301      	adds	r3, #1
 8006be8:	643b      	str	r3, [r7, #64]	; 0x40
 8006bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bec:	2b03      	cmp	r3, #3
 8006bee:	d9e1      	bls.n	8006bb4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006bf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	d101      	bne.n	8006bfc <find_volume+0x1cc>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e195      	b.n	8006f28 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d901      	bls.n	8006c08 <find_volume+0x1d8>
 8006c04:	230d      	movs	r3, #13
 8006c06:	e18f      	b.n	8006f28 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0a:	3338      	adds	r3, #56	; 0x38
 8006c0c:	330b      	adds	r3, #11
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7fe f898 	bl	8004d44 <ld_word>
 8006c14:	4603      	mov	r3, r0
 8006c16:	461a      	mov	r2, r3
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	899b      	ldrh	r3, [r3, #12]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d001      	beq.n	8006c24 <find_volume+0x1f4>
 8006c20:	230d      	movs	r3, #13
 8006c22:	e181      	b.n	8006f28 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	3338      	adds	r3, #56	; 0x38
 8006c28:	3316      	adds	r3, #22
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe f88a 	bl	8004d44 <ld_word>
 8006c30:	4603      	mov	r3, r0
 8006c32:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <find_volume+0x218>
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3c:	3338      	adds	r3, #56	; 0x38
 8006c3e:	3324      	adds	r3, #36	; 0x24
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fe f897 	bl	8004d74 <ld_dword>
 8006c46:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c4c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c50:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c56:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	789b      	ldrb	r3, [r3, #2]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d005      	beq.n	8006c6c <find_volume+0x23c>
 8006c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c62:	789b      	ldrb	r3, [r3, #2]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d001      	beq.n	8006c6c <find_volume+0x23c>
 8006c68:	230d      	movs	r3, #13
 8006c6a:	e15d      	b.n	8006f28 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6e:	789b      	ldrb	r3, [r3, #2]
 8006c70:	461a      	mov	r2, r3
 8006c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c74:	fb02 f303 	mul.w	r3, r2, r3
 8006c78:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	895b      	ldrh	r3, [r3, #10]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d008      	beq.n	8006ca0 <find_volume+0x270>
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	895b      	ldrh	r3, [r3, #10]
 8006c92:	461a      	mov	r2, r3
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	895b      	ldrh	r3, [r3, #10]
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <find_volume+0x274>
 8006ca0:	230d      	movs	r3, #13
 8006ca2:	e141      	b.n	8006f28 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	3338      	adds	r3, #56	; 0x38
 8006ca8:	3311      	adds	r3, #17
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fe f84a 	bl	8004d44 <ld_word>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	891b      	ldrh	r3, [r3, #8]
 8006cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cbe:	8992      	ldrh	r2, [r2, #12]
 8006cc0:	0952      	lsrs	r2, r2, #5
 8006cc2:	b292      	uxth	r2, r2
 8006cc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cc8:	fb02 f201 	mul.w	r2, r2, r1
 8006ccc:	1a9b      	subs	r3, r3, r2
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <find_volume+0x2a8>
 8006cd4:	230d      	movs	r3, #13
 8006cd6:	e127      	b.n	8006f28 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cda:	3338      	adds	r3, #56	; 0x38
 8006cdc:	3313      	adds	r3, #19
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7fe f830 	bl	8004d44 <ld_word>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d106      	bne.n	8006cfc <find_volume+0x2cc>
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	3338      	adds	r3, #56	; 0x38
 8006cf2:	3320      	adds	r3, #32
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fe f83d 	bl	8004d74 <ld_dword>
 8006cfa:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfe:	3338      	adds	r3, #56	; 0x38
 8006d00:	330e      	adds	r3, #14
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fe f81e 	bl	8004d44 <ld_word>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006d0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d104      	bne.n	8006d1c <find_volume+0x2ec>
 8006d12:	230d      	movs	r3, #13
 8006d14:	e108      	b.n	8006f28 <find_volume+0x4f8>
 8006d16:	bf00      	nop
 8006d18:	200000ac 	.word	0x200000ac

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006d1c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d20:	4413      	add	r3, r2
 8006d22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d24:	8911      	ldrh	r1, [r2, #8]
 8006d26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d28:	8992      	ldrh	r2, [r2, #12]
 8006d2a:	0952      	lsrs	r2, r2, #5
 8006d2c:	b292      	uxth	r2, r2
 8006d2e:	fbb1 f2f2 	udiv	r2, r1, r2
 8006d32:	b292      	uxth	r2, r2
 8006d34:	4413      	add	r3, r2
 8006d36:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006d38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d201      	bcs.n	8006d44 <find_volume+0x314>
 8006d40:	230d      	movs	r3, #13
 8006d42:	e0f1      	b.n	8006f28 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d4c:	8952      	ldrh	r2, [r2, #10]
 8006d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d52:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <find_volume+0x32e>
 8006d5a:	230d      	movs	r3, #13
 8006d5c:	e0e4      	b.n	8006f28 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d802      	bhi.n	8006d74 <find_volume+0x344>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d802      	bhi.n	8006d84 <find_volume+0x354>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	1c9a      	adds	r2, r3, #2
 8006d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d90:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006d92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d96:	441a      	add	r2, r3
 8006d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006d9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	441a      	add	r2, r3
 8006da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da4:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006da6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d11e      	bne.n	8006dec <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db0:	3338      	adds	r3, #56	; 0x38
 8006db2:	332a      	adds	r3, #42	; 0x2a
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fd ffc5 	bl	8004d44 <ld_word>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <find_volume+0x394>
 8006dc0:	230d      	movs	r3, #13
 8006dc2:	e0b1      	b.n	8006f28 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	891b      	ldrh	r3, [r3, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <find_volume+0x3a0>
 8006dcc:	230d      	movs	r3, #13
 8006dce:	e0ab      	b.n	8006f28 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd2:	3338      	adds	r3, #56	; 0x38
 8006dd4:	332c      	adds	r3, #44	; 0x2c
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fd ffcc 	bl	8004d74 <ld_dword>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	647b      	str	r3, [r7, #68]	; 0x44
 8006dea:	e01f      	b.n	8006e2c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	891b      	ldrh	r3, [r3, #8]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <find_volume+0x3c8>
 8006df4:	230d      	movs	r3, #13
 8006df6:	e097      	b.n	8006f28 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dfe:	441a      	add	r2, r3
 8006e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e02:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006e04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d103      	bne.n	8006e14 <find_volume+0x3e4>
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	e00a      	b.n	8006e2a <find_volume+0x3fa>
 8006e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e16:	69da      	ldr	r2, [r3, #28]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	4413      	add	r3, r2
 8006e1e:	085a      	lsrs	r2, r3, #1
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006e2a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	6a1a      	ldr	r2, [r3, #32]
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	899b      	ldrh	r3, [r3, #12]
 8006e34:	4619      	mov	r1, r3
 8006e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e38:	440b      	add	r3, r1
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e3e:	8989      	ldrh	r1, [r1, #12]
 8006e40:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d201      	bcs.n	8006e4c <find_volume+0x41c>
 8006e48:	230d      	movs	r3, #13
 8006e4a:	e06d      	b.n	8006f28 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e52:	619a      	str	r2, [r3, #24]
 8006e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e56:	699a      	ldr	r2, [r3, #24]
 8006e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5e:	2280      	movs	r2, #128	; 0x80
 8006e60:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006e62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d149      	bne.n	8006efe <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	3338      	adds	r3, #56	; 0x38
 8006e6e:	3330      	adds	r3, #48	; 0x30
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fd ff67 	bl	8004d44 <ld_word>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d140      	bne.n	8006efe <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e7e:	3301      	adds	r3, #1
 8006e80:	4619      	mov	r1, r3
 8006e82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e84:	f7fe fa0e 	bl	80052a4 <move_window>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d137      	bne.n	8006efe <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	2200      	movs	r2, #0
 8006e92:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e96:	3338      	adds	r3, #56	; 0x38
 8006e98:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fd ff51 	bl	8004d44 <ld_word>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d127      	bne.n	8006efe <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	3338      	adds	r3, #56	; 0x38
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fd ff5e 	bl	8004d74 <ld_dword>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	4b1d      	ldr	r3, [pc, #116]	; (8006f30 <find_volume+0x500>)
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d11e      	bne.n	8006efe <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec2:	3338      	adds	r3, #56	; 0x38
 8006ec4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fd ff53 	bl	8004d74 <ld_dword>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	4b18      	ldr	r3, [pc, #96]	; (8006f34 <find_volume+0x504>)
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d113      	bne.n	8006efe <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed8:	3338      	adds	r3, #56	; 0x38
 8006eda:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fd ff48 	bl	8004d74 <ld_dword>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee8:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	3338      	adds	r3, #56	; 0x38
 8006eee:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fd ff3e 	bl	8004d74 <ld_dword>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efc:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f00:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006f04:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006f06:	4b0c      	ldr	r3, [pc, #48]	; (8006f38 <find_volume+0x508>)
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <find_volume+0x508>)
 8006f10:	801a      	strh	r2, [r3, #0]
 8006f12:	4b09      	ldr	r3, [pc, #36]	; (8006f38 <find_volume+0x508>)
 8006f14:	881a      	ldrh	r2, [r3, #0]
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1c:	4a07      	ldr	r2, [pc, #28]	; (8006f3c <find_volume+0x50c>)
 8006f1e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006f20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f22:	f7fe f957 	bl	80051d4 <clear_lock>
#endif
	return FR_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3758      	adds	r7, #88	; 0x58
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	41615252 	.word	0x41615252
 8006f34:	61417272 	.word	0x61417272
 8006f38:	200000b0 	.word	0x200000b0
 8006f3c:	200000d4 	.word	0x200000d4

08006f40 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006f4a:	2309      	movs	r3, #9
 8006f4c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d01c      	beq.n	8006f8e <validate+0x4e>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d018      	beq.n	8006f8e <validate+0x4e>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d013      	beq.n	8006f8e <validate+0x4e>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	889a      	ldrh	r2, [r3, #4]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	88db      	ldrh	r3, [r3, #6]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d10c      	bne.n	8006f8e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	785b      	ldrb	r3, [r3, #1]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fd fe44 	bl	8004c08 <disk_status>
 8006f80:	4603      	mov	r3, r0
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <validate+0x4e>
			res = FR_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d102      	bne.n	8006f9a <validate+0x5a>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	e000      	b.n	8006f9c <validate+0x5c>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	6013      	str	r3, [r2, #0]
	return res;
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006fbe:	f107 0310 	add.w	r3, r7, #16
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7ff fc9a 	bl	80068fc <get_ldnumber>
 8006fc8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	da01      	bge.n	8006fd4 <f_mount+0x28>
 8006fd0:	230b      	movs	r3, #11
 8006fd2:	e02b      	b.n	800702c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006fd4:	4a17      	ldr	r2, [pc, #92]	; (8007034 <f_mount+0x88>)
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fdc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006fe4:	69b8      	ldr	r0, [r7, #24]
 8006fe6:	f7fe f8f5 	bl	80051d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	2200      	movs	r2, #0
 8006fee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d002      	beq.n	8006ffc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	490d      	ldr	r1, [pc, #52]	; (8007034 <f_mount+0x88>)
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <f_mount+0x66>
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d001      	beq.n	8007016 <f_mount+0x6a>
 8007012:	2300      	movs	r3, #0
 8007014:	e00a      	b.n	800702c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007016:	f107 010c 	add.w	r1, r7, #12
 800701a:	f107 0308 	add.w	r3, r7, #8
 800701e:	2200      	movs	r2, #0
 8007020:	4618      	mov	r0, r3
 8007022:	f7ff fd05 	bl	8006a30 <find_volume>
 8007026:	4603      	mov	r3, r0
 8007028:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800702a:	7dfb      	ldrb	r3, [r7, #23]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3720      	adds	r7, #32
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	200000ac 	.word	0x200000ac

08007038 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b09a      	sub	sp, #104	; 0x68
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	4613      	mov	r3, r2
 8007044:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <f_open+0x18>
 800704c:	2309      	movs	r3, #9
 800704e:	e1bb      	b.n	80073c8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007056:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007058:	79fa      	ldrb	r2, [r7, #7]
 800705a:	f107 0114 	add.w	r1, r7, #20
 800705e:	f107 0308 	add.w	r3, r7, #8
 8007062:	4618      	mov	r0, r3
 8007064:	f7ff fce4 	bl	8006a30 <find_volume>
 8007068:	4603      	mov	r3, r0
 800706a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800706e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007072:	2b00      	cmp	r3, #0
 8007074:	f040 819f 	bne.w	80073b6 <f_open+0x37e>
		dj.obj.fs = fs;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	f107 0318 	add.w	r3, r7, #24
 8007082:	4611      	mov	r1, r2
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff fbc3 	bl	8006810 <follow_path>
 800708a:	4603      	mov	r3, r0
 800708c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007090:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007094:	2b00      	cmp	r3, #0
 8007096:	d11a      	bne.n	80070ce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007098:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800709c:	b25b      	sxtb	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	da03      	bge.n	80070aa <f_open+0x72>
				res = FR_INVALID_NAME;
 80070a2:	2306      	movs	r3, #6
 80070a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80070a8:	e011      	b.n	80070ce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80070aa:	79fb      	ldrb	r3, [r7, #7]
 80070ac:	f023 0301 	bic.w	r3, r3, #1
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	bf14      	ite	ne
 80070b4:	2301      	movne	r3, #1
 80070b6:	2300      	moveq	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	461a      	mov	r2, r3
 80070bc:	f107 0318 	add.w	r3, r7, #24
 80070c0:	4611      	mov	r1, r2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fd ff3e 	bl	8004f44 <chk_lock>
 80070c8:	4603      	mov	r3, r0
 80070ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80070ce:	79fb      	ldrb	r3, [r7, #7]
 80070d0:	f003 031c 	and.w	r3, r3, #28
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d07f      	beq.n	80071d8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80070d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d017      	beq.n	8007110 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80070e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	d10e      	bne.n	8007106 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80070e8:	f7fd ff88 	bl	8004ffc <enq_lock>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d006      	beq.n	8007100 <f_open+0xc8>
 80070f2:	f107 0318 	add.w	r3, r7, #24
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7ff f8da 	bl	80062b0 <dir_register>
 80070fc:	4603      	mov	r3, r0
 80070fe:	e000      	b.n	8007102 <f_open+0xca>
 8007100:	2312      	movs	r3, #18
 8007102:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	f043 0308 	orr.w	r3, r3, #8
 800710c:	71fb      	strb	r3, [r7, #7]
 800710e:	e010      	b.n	8007132 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007110:	7fbb      	ldrb	r3, [r7, #30]
 8007112:	f003 0311 	and.w	r3, r3, #17
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <f_open+0xea>
					res = FR_DENIED;
 800711a:	2307      	movs	r3, #7
 800711c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007120:	e007      	b.n	8007132 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	f003 0304 	and.w	r3, r3, #4
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <f_open+0xfa>
 800712c:	2308      	movs	r3, #8
 800712e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007132:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007136:	2b00      	cmp	r3, #0
 8007138:	d168      	bne.n	800720c <f_open+0x1d4>
 800713a:	79fb      	ldrb	r3, [r7, #7]
 800713c:	f003 0308 	and.w	r3, r3, #8
 8007140:	2b00      	cmp	r3, #0
 8007142:	d063      	beq.n	800720c <f_open+0x1d4>
				dw = GET_FATTIME();
 8007144:	f7fd fd02 	bl	8004b4c <get_fattime>
 8007148:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714c:	330e      	adds	r3, #14
 800714e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007150:	4618      	mov	r0, r3
 8007152:	f7fd fe4d 	bl	8004df0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007158:	3316      	adds	r3, #22
 800715a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800715c:	4618      	mov	r0, r3
 800715e:	f7fd fe47 	bl	8004df0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	330b      	adds	r3, #11
 8007166:	2220      	movs	r2, #32
 8007168:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800716e:	4611      	mov	r1, r2
 8007170:	4618      	mov	r0, r3
 8007172:	f7fe fe16 	bl	8005da2 <ld_clust>
 8007176:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800717c:	2200      	movs	r2, #0
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe fe2e 	bl	8005de0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007186:	331c      	adds	r3, #28
 8007188:	2100      	movs	r1, #0
 800718a:	4618      	mov	r0, r3
 800718c:	f7fd fe30 	bl	8004df0 <st_dword>
					fs->wflag = 1;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	2201      	movs	r2, #1
 8007194:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007198:	2b00      	cmp	r3, #0
 800719a:	d037      	beq.n	800720c <f_open+0x1d4>
						dw = fs->winsect;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80071a2:	f107 0318 	add.w	r3, r7, #24
 80071a6:	2200      	movs	r2, #0
 80071a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fe fb1e 	bl	80057ec <remove_chain>
 80071b0:	4603      	mov	r3, r0
 80071b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80071b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d126      	bne.n	800720c <f_open+0x1d4>
							res = move_window(fs, dw);
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fe f86e 	bl	80052a4 <move_window>
 80071c8:	4603      	mov	r3, r0
 80071ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071d2:	3a01      	subs	r2, #1
 80071d4:	615a      	str	r2, [r3, #20]
 80071d6:	e019      	b.n	800720c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80071d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d115      	bne.n	800720c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80071e0:	7fbb      	ldrb	r3, [r7, #30]
 80071e2:	f003 0310 	and.w	r3, r3, #16
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d003      	beq.n	80071f2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80071ea:	2304      	movs	r3, #4
 80071ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80071f0:	e00c      	b.n	800720c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d007      	beq.n	800720c <f_open+0x1d4>
 80071fc:	7fbb      	ldrb	r3, [r7, #30]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <f_open+0x1d4>
						res = FR_DENIED;
 8007206:	2307      	movs	r3, #7
 8007208:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800720c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007210:	2b00      	cmp	r3, #0
 8007212:	d128      	bne.n	8007266 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007214:	79fb      	ldrb	r3, [r7, #7]
 8007216:	f003 0308 	and.w	r3, r3, #8
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800721e:	79fb      	ldrb	r3, [r7, #7]
 8007220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007224:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800722e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	f023 0301 	bic.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	bf14      	ite	ne
 800723e:	2301      	movne	r3, #1
 8007240:	2300      	moveq	r3, #0
 8007242:	b2db      	uxtb	r3, r3
 8007244:	461a      	mov	r2, r3
 8007246:	f107 0318 	add.w	r3, r7, #24
 800724a:	4611      	mov	r1, r2
 800724c:	4618      	mov	r0, r3
 800724e:	f7fd fef7 	bl	8005040 <inc_lock>
 8007252:	4602      	mov	r2, r0
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d102      	bne.n	8007266 <f_open+0x22e>
 8007260:	2302      	movs	r3, #2
 8007262:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007266:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800726a:	2b00      	cmp	r3, #0
 800726c:	f040 80a3 	bne.w	80073b6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007274:	4611      	mov	r1, r2
 8007276:	4618      	mov	r0, r3
 8007278:	f7fe fd93 	bl	8005da2 <ld_clust>
 800727c:	4602      	mov	r2, r0
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007284:	331c      	adds	r3, #28
 8007286:	4618      	mov	r0, r3
 8007288:	f7fd fd74 	bl	8004d74 <ld_dword>
 800728c:	4602      	mov	r2, r0
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	88da      	ldrh	r2, [r3, #6]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	79fa      	ldrb	r2, [r7, #7]
 80072aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3330      	adds	r3, #48	; 0x30
 80072c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80072c6:	2100      	movs	r1, #0
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7fd fdde 	bl	8004e8a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80072ce:	79fb      	ldrb	r3, [r7, #7]
 80072d0:	f003 0320 	and.w	r3, r3, #32
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d06e      	beq.n	80073b6 <f_open+0x37e>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d06a      	beq.n	80073b6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	68da      	ldr	r2, [r3, #12]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	895b      	ldrh	r3, [r3, #10]
 80072ec:	461a      	mov	r2, r3
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	899b      	ldrh	r3, [r3, #12]
 80072f2:	fb03 f302 	mul.w	r3, r3, r2
 80072f6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007304:	e016      	b.n	8007334 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800730a:	4618      	mov	r0, r3
 800730c:	f7fe f887 	bl	800541e <get_fat>
 8007310:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007314:	2b01      	cmp	r3, #1
 8007316:	d802      	bhi.n	800731e <f_open+0x2e6>
 8007318:	2302      	movs	r3, #2
 800731a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800731e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007324:	d102      	bne.n	800732c <f_open+0x2f4>
 8007326:	2301      	movs	r3, #1
 8007328:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800732c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800732e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007334:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007338:	2b00      	cmp	r3, #0
 800733a:	d103      	bne.n	8007344 <f_open+0x30c>
 800733c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800733e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007340:	429a      	cmp	r2, r3
 8007342:	d8e0      	bhi.n	8007306 <f_open+0x2ce>
				}
				fp->clust = clst;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007348:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800734a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800734e:	2b00      	cmp	r3, #0
 8007350:	d131      	bne.n	80073b6 <f_open+0x37e>
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	899b      	ldrh	r3, [r3, #12]
 8007356:	461a      	mov	r2, r3
 8007358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800735a:	fbb3 f1f2 	udiv	r1, r3, r2
 800735e:	fb02 f201 	mul.w	r2, r2, r1
 8007362:	1a9b      	subs	r3, r3, r2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d026      	beq.n	80073b6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800736c:	4618      	mov	r0, r3
 800736e:	f7fe f837 	bl	80053e0 <clust2sect>
 8007372:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007376:	2b00      	cmp	r3, #0
 8007378:	d103      	bne.n	8007382 <f_open+0x34a>
						res = FR_INT_ERR;
 800737a:	2302      	movs	r3, #2
 800737c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007380:	e019      	b.n	80073b6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	899b      	ldrh	r3, [r3, #12]
 8007386:	461a      	mov	r2, r3
 8007388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800738a:	fbb3 f2f2 	udiv	r2, r3, r2
 800738e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007390:	441a      	add	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	7858      	ldrb	r0, [r3, #1]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6a1a      	ldr	r2, [r3, #32]
 80073a4:	2301      	movs	r3, #1
 80073a6:	f7fd fc6f 	bl	8004c88 <disk_read>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <f_open+0x37e>
 80073b0:	2301      	movs	r3, #1
 80073b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80073b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <f_open+0x38c>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80073c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3768      	adds	r7, #104	; 0x68
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08e      	sub	sp, #56	; 0x38
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2200      	movs	r2, #0
 80073e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f107 0214 	add.w	r2, r7, #20
 80073ee:	4611      	mov	r1, r2
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff fda5 	bl	8006f40 <validate>
 80073f6:	4603      	mov	r3, r0
 80073f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80073fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007400:	2b00      	cmp	r3, #0
 8007402:	d107      	bne.n	8007414 <f_read+0x44>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	7d5b      	ldrb	r3, [r3, #21]
 8007408:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800740c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <f_read+0x4a>
 8007414:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007418:	e135      	b.n	8007686 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	7d1b      	ldrb	r3, [r3, #20]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <f_read+0x5a>
 8007426:	2307      	movs	r3, #7
 8007428:	e12d      	b.n	8007686 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	68da      	ldr	r2, [r3, #12]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	429a      	cmp	r2, r3
 800743c:	f240 811e 	bls.w	800767c <f_read+0x2ac>
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007444:	e11a      	b.n	800767c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	8992      	ldrh	r2, [r2, #12]
 800744e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007452:	fb02 f201 	mul.w	r2, r2, r1
 8007456:	1a9b      	subs	r3, r3, r2
 8007458:	2b00      	cmp	r3, #0
 800745a:	f040 80d5 	bne.w	8007608 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	8992      	ldrh	r2, [r2, #12]
 8007466:	fbb3 f3f2 	udiv	r3, r3, r2
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	8952      	ldrh	r2, [r2, #10]
 800746e:	3a01      	subs	r2, #1
 8007470:	4013      	ands	r3, r2
 8007472:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d12f      	bne.n	80074da <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d103      	bne.n	800748a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	633b      	str	r3, [r7, #48]	; 0x30
 8007488:	e013      	b.n	80074b2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	2b00      	cmp	r3, #0
 8007490:	d007      	beq.n	80074a2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	4619      	mov	r1, r3
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f7fe faa4 	bl	80059e6 <clmt_clust>
 800749e:	6338      	str	r0, [r7, #48]	; 0x30
 80074a0:	e007      	b.n	80074b2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	4619      	mov	r1, r3
 80074aa:	4610      	mov	r0, r2
 80074ac:	f7fd ffb7 	bl	800541e <get_fat>
 80074b0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d804      	bhi.n	80074c2 <f_read+0xf2>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2202      	movs	r2, #2
 80074bc:	755a      	strb	r2, [r3, #21]
 80074be:	2302      	movs	r3, #2
 80074c0:	e0e1      	b.n	8007686 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80074c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c8:	d104      	bne.n	80074d4 <f_read+0x104>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2201      	movs	r2, #1
 80074ce:	755a      	strb	r2, [r3, #21]
 80074d0:	2301      	movs	r3, #1
 80074d2:	e0d8      	b.n	8007686 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	4619      	mov	r1, r3
 80074e2:	4610      	mov	r0, r2
 80074e4:	f7fd ff7c 	bl	80053e0 <clust2sect>
 80074e8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d104      	bne.n	80074fa <f_read+0x12a>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2202      	movs	r2, #2
 80074f4:	755a      	strb	r2, [r3, #21]
 80074f6:	2302      	movs	r3, #2
 80074f8:	e0c5      	b.n	8007686 <f_read+0x2b6>
			sect += csect;
 80074fa:	69ba      	ldr	r2, [r7, #24]
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	4413      	add	r3, r2
 8007500:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	899b      	ldrh	r3, [r3, #12]
 8007506:	461a      	mov	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	fbb3 f3f2 	udiv	r3, r3, r2
 800750e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	2b00      	cmp	r3, #0
 8007514:	d041      	beq.n	800759a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007516:	69fa      	ldr	r2, [r7, #28]
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	4413      	add	r3, r2
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	8952      	ldrh	r2, [r2, #10]
 8007520:	4293      	cmp	r3, r2
 8007522:	d905      	bls.n	8007530 <f_read+0x160>
					cc = fs->csize - csect;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	895b      	ldrh	r3, [r3, #10]
 8007528:	461a      	mov	r2, r3
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	7858      	ldrb	r0, [r3, #1]
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	69ba      	ldr	r2, [r7, #24]
 8007538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800753a:	f7fd fba5 	bl	8004c88 <disk_read>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d004      	beq.n	800754e <f_read+0x17e>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2201      	movs	r2, #1
 8007548:	755a      	strb	r2, [r3, #21]
 800754a:	2301      	movs	r3, #1
 800754c:	e09b      	b.n	8007686 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	7d1b      	ldrb	r3, [r3, #20]
 8007552:	b25b      	sxtb	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	da18      	bge.n	800758a <f_read+0x1ba>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a1a      	ldr	r2, [r3, #32]
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007562:	429a      	cmp	r2, r3
 8007564:	d911      	bls.n	800758a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6a1a      	ldr	r2, [r3, #32]
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	8992      	ldrh	r2, [r2, #12]
 8007572:	fb02 f303 	mul.w	r3, r2, r3
 8007576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007578:	18d0      	adds	r0, r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	899b      	ldrh	r3, [r3, #12]
 8007584:	461a      	mov	r2, r3
 8007586:	f7fd fc5f 	bl	8004e48 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	899b      	ldrh	r3, [r3, #12]
 800758e:	461a      	mov	r2, r3
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	fb02 f303 	mul.w	r3, r2, r3
 8007596:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007598:	e05c      	b.n	8007654 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d02e      	beq.n	8007602 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	7d1b      	ldrb	r3, [r3, #20]
 80075a8:	b25b      	sxtb	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	da18      	bge.n	80075e0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	7858      	ldrb	r0, [r3, #1]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6a1a      	ldr	r2, [r3, #32]
 80075bc:	2301      	movs	r3, #1
 80075be:	f7fd fb83 	bl	8004cc8 <disk_write>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d004      	beq.n	80075d2 <f_read+0x202>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2201      	movs	r2, #1
 80075cc:	755a      	strb	r2, [r3, #21]
 80075ce:	2301      	movs	r3, #1
 80075d0:	e059      	b.n	8007686 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	7d1b      	ldrb	r3, [r3, #20]
 80075d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	7858      	ldrb	r0, [r3, #1]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80075ea:	2301      	movs	r3, #1
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	f7fd fb4b 	bl	8004c88 <disk_read>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d004      	beq.n	8007602 <f_read+0x232>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2201      	movs	r2, #1
 80075fc:	755a      	strb	r2, [r3, #21]
 80075fe:	2301      	movs	r3, #1
 8007600:	e041      	b.n	8007686 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	899b      	ldrh	r3, [r3, #12]
 800760c:	4618      	mov	r0, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	8992      	ldrh	r2, [r2, #12]
 8007616:	fbb3 f1f2 	udiv	r1, r3, r2
 800761a:	fb02 f201 	mul.w	r2, r2, r1
 800761e:	1a9b      	subs	r3, r3, r2
 8007620:	1ac3      	subs	r3, r0, r3
 8007622:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	429a      	cmp	r2, r3
 800762a:	d901      	bls.n	8007630 <f_read+0x260>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	8992      	ldrh	r2, [r2, #12]
 800763e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007642:	fb02 f200 	mul.w	r2, r2, r0
 8007646:	1a9b      	subs	r3, r3, r2
 8007648:	440b      	add	r3, r1
 800764a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800764c:	4619      	mov	r1, r3
 800764e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007650:	f7fd fbfa 	bl	8004e48 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007658:	4413      	add	r3, r2
 800765a:	627b      	str	r3, [r7, #36]	; 0x24
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	699a      	ldr	r2, [r3, #24]
 8007660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007662:	441a      	add	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	619a      	str	r2, [r3, #24]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766e:	441a      	add	r2, r3
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f47f aee1 	bne.w	8007446 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3738      	adds	r7, #56	; 0x38
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b08c      	sub	sp, #48	; 0x30
 8007692:	af00      	add	r7, sp, #0
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	60b9      	str	r1, [r7, #8]
 8007698:	607a      	str	r2, [r7, #4]
 800769a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f107 0210 	add.w	r2, r7, #16
 80076ac:	4611      	mov	r1, r2
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7ff fc46 	bl	8006f40 <validate>
 80076b4:	4603      	mov	r3, r0
 80076b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80076ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d107      	bne.n	80076d2 <f_write+0x44>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	7d5b      	ldrb	r3, [r3, #21]
 80076c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80076ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <f_write+0x4a>
 80076d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076d6:	e16a      	b.n	80079ae <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	7d1b      	ldrb	r3, [r3, #20]
 80076dc:	f003 0302 	and.w	r3, r3, #2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <f_write+0x5a>
 80076e4:	2307      	movs	r3, #7
 80076e6:	e162      	b.n	80079ae <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	699a      	ldr	r2, [r3, #24]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	441a      	add	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	f080 814c 	bcs.w	8007992 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	43db      	mvns	r3, r3
 8007700:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007702:	e146      	b.n	8007992 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	8992      	ldrh	r2, [r2, #12]
 800770c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007710:	fb02 f201 	mul.w	r2, r2, r1
 8007714:	1a9b      	subs	r3, r3, r2
 8007716:	2b00      	cmp	r3, #0
 8007718:	f040 80f1 	bne.w	80078fe <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	8992      	ldrh	r2, [r2, #12]
 8007724:	fbb3 f3f2 	udiv	r3, r3, r2
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	8952      	ldrh	r2, [r2, #10]
 800772c:	3a01      	subs	r2, #1
 800772e:	4013      	ands	r3, r2
 8007730:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d143      	bne.n	80077c0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10c      	bne.n	800775a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007748:	2b00      	cmp	r3, #0
 800774a:	d11a      	bne.n	8007782 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2100      	movs	r1, #0
 8007750:	4618      	mov	r0, r3
 8007752:	f7fe f8b0 	bl	80058b6 <create_chain>
 8007756:	62b8      	str	r0, [r7, #40]	; 0x28
 8007758:	e013      	b.n	8007782 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775e:	2b00      	cmp	r3, #0
 8007760:	d007      	beq.n	8007772 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	4619      	mov	r1, r3
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7fe f93c 	bl	80059e6 <clmt_clust>
 800776e:	62b8      	str	r0, [r7, #40]	; 0x28
 8007770:	e007      	b.n	8007782 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	4619      	mov	r1, r3
 800777a:	4610      	mov	r0, r2
 800777c:	f7fe f89b 	bl	80058b6 <create_chain>
 8007780:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 8109 	beq.w	800799c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778c:	2b01      	cmp	r3, #1
 800778e:	d104      	bne.n	800779a <f_write+0x10c>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2202      	movs	r2, #2
 8007794:	755a      	strb	r2, [r3, #21]
 8007796:	2302      	movs	r3, #2
 8007798:	e109      	b.n	80079ae <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800779a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a0:	d104      	bne.n	80077ac <f_write+0x11e>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	755a      	strb	r2, [r3, #21]
 80077a8:	2301      	movs	r3, #1
 80077aa:	e100      	b.n	80079ae <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077b0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <f_write+0x132>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077be:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	7d1b      	ldrb	r3, [r3, #20]
 80077c4:	b25b      	sxtb	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	da18      	bge.n	80077fc <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	7858      	ldrb	r0, [r3, #1]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6a1a      	ldr	r2, [r3, #32]
 80077d8:	2301      	movs	r3, #1
 80077da:	f7fd fa75 	bl	8004cc8 <disk_write>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d004      	beq.n	80077ee <f_write+0x160>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2201      	movs	r2, #1
 80077e8:	755a      	strb	r2, [r3, #21]
 80077ea:	2301      	movs	r3, #1
 80077ec:	e0df      	b.n	80079ae <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	7d1b      	ldrb	r3, [r3, #20]
 80077f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	4619      	mov	r1, r3
 8007804:	4610      	mov	r0, r2
 8007806:	f7fd fdeb 	bl	80053e0 <clust2sect>
 800780a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d104      	bne.n	800781c <f_write+0x18e>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2202      	movs	r2, #2
 8007816:	755a      	strb	r2, [r3, #21]
 8007818:	2302      	movs	r3, #2
 800781a:	e0c8      	b.n	80079ae <f_write+0x320>
			sect += csect;
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	4413      	add	r3, r2
 8007822:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	899b      	ldrh	r3, [r3, #12]
 8007828:	461a      	mov	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007830:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d043      	beq.n	80078c0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	4413      	add	r3, r2
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	8952      	ldrh	r2, [r2, #10]
 8007842:	4293      	cmp	r3, r2
 8007844:	d905      	bls.n	8007852 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	895b      	ldrh	r3, [r3, #10]
 800784a:	461a      	mov	r2, r3
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	7858      	ldrb	r0, [r3, #1]
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	69f9      	ldr	r1, [r7, #28]
 800785c:	f7fd fa34 	bl	8004cc8 <disk_write>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d004      	beq.n	8007870 <f_write+0x1e2>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	755a      	strb	r2, [r3, #21]
 800786c:	2301      	movs	r3, #1
 800786e:	e09e      	b.n	80079ae <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6a1a      	ldr	r2, [r3, #32]
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	6a3a      	ldr	r2, [r7, #32]
 800787a:	429a      	cmp	r2, r3
 800787c:	d918      	bls.n	80078b0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6a1a      	ldr	r2, [r3, #32]
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	8992      	ldrh	r2, [r2, #12]
 8007890:	fb02 f303 	mul.w	r3, r2, r3
 8007894:	69fa      	ldr	r2, [r7, #28]
 8007896:	18d1      	adds	r1, r2, r3
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	899b      	ldrh	r3, [r3, #12]
 800789c:	461a      	mov	r2, r3
 800789e:	f7fd fad3 	bl	8004e48 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	7d1b      	ldrb	r3, [r3, #20]
 80078a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	899b      	ldrh	r3, [r3, #12]
 80078b4:	461a      	mov	r2, r3
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	fb02 f303 	mul.w	r3, r2, r3
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80078be:	e04b      	b.n	8007958 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6a1b      	ldr	r3, [r3, #32]
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d016      	beq.n	80078f8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	699a      	ldr	r2, [r3, #24]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d210      	bcs.n	80078f8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	7858      	ldrb	r0, [r3, #1]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078e0:	2301      	movs	r3, #1
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	f7fd f9d0 	bl	8004c88 <disk_read>
 80078e8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d004      	beq.n	80078f8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2201      	movs	r2, #1
 80078f2:	755a      	strb	r2, [r3, #21]
 80078f4:	2301      	movs	r3, #1
 80078f6:	e05a      	b.n	80079ae <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	899b      	ldrh	r3, [r3, #12]
 8007902:	4618      	mov	r0, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	8992      	ldrh	r2, [r2, #12]
 800790c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007910:	fb02 f201 	mul.w	r2, r2, r1
 8007914:	1a9b      	subs	r3, r3, r2
 8007916:	1ac3      	subs	r3, r0, r3
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800791a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	429a      	cmp	r2, r3
 8007920:	d901      	bls.n	8007926 <f_write+0x298>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	8992      	ldrh	r2, [r2, #12]
 8007934:	fbb3 f0f2 	udiv	r0, r3, r2
 8007938:	fb02 f200 	mul.w	r2, r2, r0
 800793c:	1a9b      	subs	r3, r3, r2
 800793e:	440b      	add	r3, r1
 8007940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007942:	69f9      	ldr	r1, [r7, #28]
 8007944:	4618      	mov	r0, r3
 8007946:	f7fd fa7f 	bl	8004e48 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	7d1b      	ldrb	r3, [r3, #20]
 800794e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007952:	b2da      	uxtb	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007958:	69fa      	ldr	r2, [r7, #28]
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	4413      	add	r3, r2
 800795e:	61fb      	str	r3, [r7, #28]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	699a      	ldr	r2, [r3, #24]
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	441a      	add	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	619a      	str	r2, [r3, #24]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	68da      	ldr	r2, [r3, #12]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	429a      	cmp	r2, r3
 8007976:	bf38      	it	cc
 8007978:	461a      	movcc	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	60da      	str	r2, [r3, #12]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	441a      	add	r2, r3
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2b00      	cmp	r3, #0
 8007996:	f47f aeb5 	bne.w	8007704 <f_write+0x76>
 800799a:	e000      	b.n	800799e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800799c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	7d1b      	ldrb	r3, [r3, #20]
 80079a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3730      	adds	r7, #48	; 0x30
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b086      	sub	sp, #24
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f107 0208 	add.w	r2, r7, #8
 80079c4:	4611      	mov	r1, r2
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff faba 	bl	8006f40 <validate>
 80079cc:	4603      	mov	r3, r0
 80079ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d168      	bne.n	8007aa8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	7d1b      	ldrb	r3, [r3, #20]
 80079da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d062      	beq.n	8007aa8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	7d1b      	ldrb	r3, [r3, #20]
 80079e6:	b25b      	sxtb	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	da15      	bge.n	8007a18 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	7858      	ldrb	r0, [r3, #1]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a1a      	ldr	r2, [r3, #32]
 80079fa:	2301      	movs	r3, #1
 80079fc:	f7fd f964 	bl	8004cc8 <disk_write>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <f_sync+0x54>
 8007a06:	2301      	movs	r3, #1
 8007a08:	e04f      	b.n	8007aaa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	7d1b      	ldrb	r3, [r3, #20]
 8007a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007a18:	f7fd f898 	bl	8004b4c <get_fattime>
 8007a1c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	4619      	mov	r1, r3
 8007a26:	4610      	mov	r0, r2
 8007a28:	f7fd fc3c 	bl	80052a4 <move_window>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007a30:	7dfb      	ldrb	r3, [r7, #23]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d138      	bne.n	8007aa8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	330b      	adds	r3, #11
 8007a40:	781a      	ldrb	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	330b      	adds	r3, #11
 8007a46:	f042 0220 	orr.w	r2, r2, #32
 8007a4a:	b2d2      	uxtb	r2, r2
 8007a4c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6818      	ldr	r0, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	461a      	mov	r2, r3
 8007a58:	68f9      	ldr	r1, [r7, #12]
 8007a5a:	f7fe f9c1 	bl	8005de0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f103 021c 	add.w	r2, r3, #28
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	f7fd f9c0 	bl	8004df0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	3316      	adds	r3, #22
 8007a74:	6939      	ldr	r1, [r7, #16]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fd f9ba 	bl	8004df0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3312      	adds	r3, #18
 8007a80:	2100      	movs	r1, #0
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fd f999 	bl	8004dba <st_word>
					fs->wflag = 1;
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fd fc35 	bl	8005300 <sync_fs>
 8007a96:	4603      	mov	r3, r0
 8007a98:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	7d1b      	ldrb	r3, [r3, #20]
 8007a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3718      	adds	r7, #24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7ff ff7b 	bl	80079b6 <f_sync>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d118      	bne.n	8007afc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f107 0208 	add.w	r2, r7, #8
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7ff fa34 	bl	8006f40 <validate>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10c      	bne.n	8007afc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fd fb38 	bl	800515c <dec_lock>
 8007aec:	4603      	mov	r3, r0
 8007aee:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d102      	bne.n	8007afc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b088      	sub	sp, #32
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	60f8      	str	r0, [r7, #12]
 8007b0e:	60b9      	str	r1, [r7, #8]
 8007b10:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007b1a:	e01b      	b.n	8007b54 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007b1c:	f107 0310 	add.w	r3, r7, #16
 8007b20:	f107 0114 	add.w	r1, r7, #20
 8007b24:	2201      	movs	r2, #1
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7ff fc52 	bl	80073d0 <f_read>
		if (rc != 1) break;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d116      	bne.n	8007b60 <f_gets+0x5a>
		c = s[0];
 8007b32:	7d3b      	ldrb	r3, [r7, #20]
 8007b34:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007b36:	7dfb      	ldrb	r3, [r7, #23]
 8007b38:	2b0d      	cmp	r3, #13
 8007b3a:	d100      	bne.n	8007b3e <f_gets+0x38>
 8007b3c:	e00a      	b.n	8007b54 <f_gets+0x4e>
		*p++ = c;
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	61ba      	str	r2, [r7, #24]
 8007b44:	7dfa      	ldrb	r2, [r7, #23]
 8007b46:	701a      	strb	r2, [r3, #0]
		n++;
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
 8007b50:	2b0a      	cmp	r3, #10
 8007b52:	d007      	beq.n	8007b64 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	69fa      	ldr	r2, [r7, #28]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	dbde      	blt.n	8007b1c <f_gets+0x16>
 8007b5e:	e002      	b.n	8007b66 <f_gets+0x60>
		if (rc != 1) break;
 8007b60:	bf00      	nop
 8007b62:	e000      	b.n	8007b66 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8007b64:	bf00      	nop
	}
	*p = 0;
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <f_gets+0x70>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	e000      	b.n	8007b78 <f_gets+0x72>
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3720      	adds	r7, #32
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	2b0a      	cmp	r3, #10
 8007b90:	d103      	bne.n	8007b9a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007b92:	210d      	movs	r1, #13
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7ff fff3 	bl	8007b80 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	db25      	blt.n	8007bf2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	60fa      	str	r2, [r7, #12]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	4413      	add	r3, r2
 8007bb0:	78fa      	ldrb	r2, [r7, #3]
 8007bb2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2b3c      	cmp	r3, #60	; 0x3c
 8007bb8:	dd12      	ble.n	8007be0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6818      	ldr	r0, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f103 010c 	add.w	r1, r3, #12
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	f107 0308 	add.w	r3, r7, #8
 8007bca:	f7ff fd60 	bl	800768e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d101      	bne.n	8007bda <putc_bfd+0x5a>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	e001      	b.n	8007bde <putc_bfd+0x5e>
 8007bda:	f04f 33ff 	mov.w	r3, #4294967295
 8007bde:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	609a      	str	r2, [r3, #8]
 8007bf0:	e000      	b.n	8007bf4 <putc_bfd+0x74>
	if (i < 0) return;
 8007bf2:	bf00      	nop
}
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b084      	sub	sp, #16
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	db17      	blt.n	8007c3a <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6818      	ldr	r0, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f103 010c 	add.w	r1, r3, #12
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	f107 030c 	add.w	r3, r7, #12
 8007c1e:	f7ff fd36 	bl	800768e <f_write>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d108      	bne.n	8007c3a <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d102      	bne.n	8007c3a <putc_flush+0x40>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	e001      	b.n	8007c3e <putc_flush+0x44>
	return EOF;
 8007c3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b083      	sub	sp, #12
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	605a      	str	r2, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	609a      	str	r2, [r3, #8]
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b096      	sub	sp, #88	; 0x58
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007c7a:	f107 030c 	add.w	r3, r7, #12
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff ffe0 	bl	8007c46 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007c86:	e009      	b.n	8007c9c <f_puts+0x2c>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	607a      	str	r2, [r7, #4]
 8007c8e:	781a      	ldrb	r2, [r3, #0]
 8007c90:	f107 030c 	add.w	r3, r7, #12
 8007c94:	4611      	mov	r1, r2
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff ff72 	bl	8007b80 <putc_bfd>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1f1      	bne.n	8007c88 <f_puts+0x18>
	return putc_flush(&pb);
 8007ca4:	f107 030c 	add.w	r3, r7, #12
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7ff ffa6 	bl	8007bfa <putc_flush>
 8007cae:	4603      	mov	r3, r0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3758      	adds	r7, #88	; 0x58
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007cce:	4b1f      	ldr	r3, [pc, #124]	; (8007d4c <FATFS_LinkDriverEx+0x94>)
 8007cd0:	7a5b      	ldrb	r3, [r3, #9]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d131      	bne.n	8007d3c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007cd8:	4b1c      	ldr	r3, [pc, #112]	; (8007d4c <FATFS_LinkDriverEx+0x94>)
 8007cda:	7a5b      	ldrb	r3, [r3, #9]
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	461a      	mov	r2, r3
 8007ce0:	4b1a      	ldr	r3, [pc, #104]	; (8007d4c <FATFS_LinkDriverEx+0x94>)
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007ce6:	4b19      	ldr	r3, [pc, #100]	; (8007d4c <FATFS_LinkDriverEx+0x94>)
 8007ce8:	7a5b      	ldrb	r3, [r3, #9]
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	4a17      	ldr	r2, [pc, #92]	; (8007d4c <FATFS_LinkDriverEx+0x94>)
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007cf6:	4b15      	ldr	r3, [pc, #84]	; (8007d4c <FATFS_LinkDriverEx+0x94>)
 8007cf8:	7a5b      	ldrb	r3, [r3, #9]
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	4b13      	ldr	r3, [pc, #76]	; (8007d4c <FATFS_LinkDriverEx+0x94>)
 8007d00:	4413      	add	r3, r2
 8007d02:	79fa      	ldrb	r2, [r7, #7]
 8007d04:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007d06:	4b11      	ldr	r3, [pc, #68]	; (8007d4c <FATFS_LinkDriverEx+0x94>)
 8007d08:	7a5b      	ldrb	r3, [r3, #9]
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	1c5a      	adds	r2, r3, #1
 8007d0e:	b2d1      	uxtb	r1, r2
 8007d10:	4a0e      	ldr	r2, [pc, #56]	; (8007d4c <FATFS_LinkDriverEx+0x94>)
 8007d12:	7251      	strb	r1, [r2, #9]
 8007d14:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007d16:	7dbb      	ldrb	r3, [r7, #22]
 8007d18:	3330      	adds	r3, #48	; 0x30
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	3301      	adds	r3, #1
 8007d24:	223a      	movs	r2, #58	; 0x3a
 8007d26:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	3302      	adds	r3, #2
 8007d2c:	222f      	movs	r2, #47	; 0x2f
 8007d2e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	3303      	adds	r3, #3
 8007d34:	2200      	movs	r2, #0
 8007d36:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	371c      	adds	r7, #28
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	200002d4 	.word	0x200002d4

08007d50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff ffaa 	bl	8007cb8 <FATFS_LinkDriverEx>
 8007d64:	4603      	mov	r3, r0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4603      	mov	r3, r0
 8007d78:	6039      	str	r1, [r7, #0]
 8007d7a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007d7c:	88fb      	ldrh	r3, [r7, #6]
 8007d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8007d80:	d802      	bhi.n	8007d88 <ff_convert+0x18>
		c = chr;
 8007d82:	88fb      	ldrh	r3, [r7, #6]
 8007d84:	81fb      	strh	r3, [r7, #14]
 8007d86:	e025      	b.n	8007dd4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00b      	beq.n	8007da6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007d8e:	88fb      	ldrh	r3, [r7, #6]
 8007d90:	2bff      	cmp	r3, #255	; 0xff
 8007d92:	d805      	bhi.n	8007da0 <ff_convert+0x30>
 8007d94:	88fb      	ldrh	r3, [r7, #6]
 8007d96:	3b80      	subs	r3, #128	; 0x80
 8007d98:	4a12      	ldr	r2, [pc, #72]	; (8007de4 <ff_convert+0x74>)
 8007d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d9e:	e000      	b.n	8007da2 <ff_convert+0x32>
 8007da0:	2300      	movs	r3, #0
 8007da2:	81fb      	strh	r3, [r7, #14]
 8007da4:	e016      	b.n	8007dd4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007da6:	2300      	movs	r3, #0
 8007da8:	81fb      	strh	r3, [r7, #14]
 8007daa:	e009      	b.n	8007dc0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007dac:	89fb      	ldrh	r3, [r7, #14]
 8007dae:	4a0d      	ldr	r2, [pc, #52]	; (8007de4 <ff_convert+0x74>)
 8007db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007db4:	88fa      	ldrh	r2, [r7, #6]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d006      	beq.n	8007dc8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007dba:	89fb      	ldrh	r3, [r7, #14]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	81fb      	strh	r3, [r7, #14]
 8007dc0:	89fb      	ldrh	r3, [r7, #14]
 8007dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8007dc4:	d9f2      	bls.n	8007dac <ff_convert+0x3c>
 8007dc6:	e000      	b.n	8007dca <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007dc8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007dca:	89fb      	ldrh	r3, [r7, #14]
 8007dcc:	3380      	adds	r3, #128	; 0x80
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007dd4:	89fb      	ldrh	r3, [r7, #14]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	08009034 	.word	0x08009034

08007de8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	4603      	mov	r3, r0
 8007df0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007df2:	88fb      	ldrh	r3, [r7, #6]
 8007df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df8:	d201      	bcs.n	8007dfe <ff_wtoupper+0x16>
 8007dfa:	4b3e      	ldr	r3, [pc, #248]	; (8007ef4 <ff_wtoupper+0x10c>)
 8007dfc:	e000      	b.n	8007e00 <ff_wtoupper+0x18>
 8007dfe:	4b3e      	ldr	r3, [pc, #248]	; (8007ef8 <ff_wtoupper+0x110>)
 8007e00:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	1c9a      	adds	r2, r3, #2
 8007e06:	617a      	str	r2, [r7, #20]
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007e0c:	8a7b      	ldrh	r3, [r7, #18]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d068      	beq.n	8007ee4 <ff_wtoupper+0xfc>
 8007e12:	88fa      	ldrh	r2, [r7, #6]
 8007e14:	8a7b      	ldrh	r3, [r7, #18]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d364      	bcc.n	8007ee4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	1c9a      	adds	r2, r3, #2
 8007e1e:	617a      	str	r2, [r7, #20]
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	823b      	strh	r3, [r7, #16]
 8007e24:	8a3b      	ldrh	r3, [r7, #16]
 8007e26:	0a1b      	lsrs	r3, r3, #8
 8007e28:	81fb      	strh	r3, [r7, #14]
 8007e2a:	8a3b      	ldrh	r3, [r7, #16]
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007e30:	88fa      	ldrh	r2, [r7, #6]
 8007e32:	8a79      	ldrh	r1, [r7, #18]
 8007e34:	8a3b      	ldrh	r3, [r7, #16]
 8007e36:	440b      	add	r3, r1
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	da49      	bge.n	8007ed0 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007e3c:	89fb      	ldrh	r3, [r7, #14]
 8007e3e:	2b08      	cmp	r3, #8
 8007e40:	d84f      	bhi.n	8007ee2 <ff_wtoupper+0xfa>
 8007e42:	a201      	add	r2, pc, #4	; (adr r2, 8007e48 <ff_wtoupper+0x60>)
 8007e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e48:	08007e6d 	.word	0x08007e6d
 8007e4c:	08007e7f 	.word	0x08007e7f
 8007e50:	08007e95 	.word	0x08007e95
 8007e54:	08007e9d 	.word	0x08007e9d
 8007e58:	08007ea5 	.word	0x08007ea5
 8007e5c:	08007ead 	.word	0x08007ead
 8007e60:	08007eb5 	.word	0x08007eb5
 8007e64:	08007ebd 	.word	0x08007ebd
 8007e68:	08007ec5 	.word	0x08007ec5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007e6c:	88fa      	ldrh	r2, [r7, #6]
 8007e6e:	8a7b      	ldrh	r3, [r7, #18]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	4413      	add	r3, r2
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	80fb      	strh	r3, [r7, #6]
 8007e7c:	e027      	b.n	8007ece <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007e7e:	88fa      	ldrh	r2, [r7, #6]
 8007e80:	8a7b      	ldrh	r3, [r7, #18]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	88fa      	ldrh	r2, [r7, #6]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	80fb      	strh	r3, [r7, #6]
 8007e92:	e01c      	b.n	8007ece <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007e94:	88fb      	ldrh	r3, [r7, #6]
 8007e96:	3b10      	subs	r3, #16
 8007e98:	80fb      	strh	r3, [r7, #6]
 8007e9a:	e018      	b.n	8007ece <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007e9c:	88fb      	ldrh	r3, [r7, #6]
 8007e9e:	3b20      	subs	r3, #32
 8007ea0:	80fb      	strh	r3, [r7, #6]
 8007ea2:	e014      	b.n	8007ece <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007ea4:	88fb      	ldrh	r3, [r7, #6]
 8007ea6:	3b30      	subs	r3, #48	; 0x30
 8007ea8:	80fb      	strh	r3, [r7, #6]
 8007eaa:	e010      	b.n	8007ece <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007eac:	88fb      	ldrh	r3, [r7, #6]
 8007eae:	3b1a      	subs	r3, #26
 8007eb0:	80fb      	strh	r3, [r7, #6]
 8007eb2:	e00c      	b.n	8007ece <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007eb4:	88fb      	ldrh	r3, [r7, #6]
 8007eb6:	3308      	adds	r3, #8
 8007eb8:	80fb      	strh	r3, [r7, #6]
 8007eba:	e008      	b.n	8007ece <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007ebc:	88fb      	ldrh	r3, [r7, #6]
 8007ebe:	3b50      	subs	r3, #80	; 0x50
 8007ec0:	80fb      	strh	r3, [r7, #6]
 8007ec2:	e004      	b.n	8007ece <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007ec4:	88fb      	ldrh	r3, [r7, #6]
 8007ec6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007eca:	80fb      	strh	r3, [r7, #6]
 8007ecc:	bf00      	nop
			}
			break;
 8007ece:	e008      	b.n	8007ee2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007ed0:	89fb      	ldrh	r3, [r7, #14]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d195      	bne.n	8007e02 <ff_wtoupper+0x1a>
 8007ed6:	8a3b      	ldrh	r3, [r7, #16]
 8007ed8:	005b      	lsls	r3, r3, #1
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	4413      	add	r3, r2
 8007ede:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007ee0:	e78f      	b.n	8007e02 <ff_wtoupper+0x1a>
			break;
 8007ee2:	bf00      	nop
	}

	return chr;
 8007ee4:	88fb      	ldrh	r3, [r7, #6]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	371c      	adds	r7, #28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	08009134 	.word	0x08009134
 8007ef8:	08009328 	.word	0x08009328

08007efc <__errno>:
 8007efc:	4b01      	ldr	r3, [pc, #4]	; (8007f04 <__errno+0x8>)
 8007efe:	6818      	ldr	r0, [r3, #0]
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	20000024 	.word	0x20000024

08007f08 <__libc_init_array>:
 8007f08:	b570      	push	{r4, r5, r6, lr}
 8007f0a:	4e0d      	ldr	r6, [pc, #52]	; (8007f40 <__libc_init_array+0x38>)
 8007f0c:	4c0d      	ldr	r4, [pc, #52]	; (8007f44 <__libc_init_array+0x3c>)
 8007f0e:	1ba4      	subs	r4, r4, r6
 8007f10:	10a4      	asrs	r4, r4, #2
 8007f12:	2500      	movs	r5, #0
 8007f14:	42a5      	cmp	r5, r4
 8007f16:	d109      	bne.n	8007f2c <__libc_init_array+0x24>
 8007f18:	4e0b      	ldr	r6, [pc, #44]	; (8007f48 <__libc_init_array+0x40>)
 8007f1a:	4c0c      	ldr	r4, [pc, #48]	; (8007f4c <__libc_init_array+0x44>)
 8007f1c:	f000 ff68 	bl	8008df0 <_init>
 8007f20:	1ba4      	subs	r4, r4, r6
 8007f22:	10a4      	asrs	r4, r4, #2
 8007f24:	2500      	movs	r5, #0
 8007f26:	42a5      	cmp	r5, r4
 8007f28:	d105      	bne.n	8007f36 <__libc_init_array+0x2e>
 8007f2a:	bd70      	pop	{r4, r5, r6, pc}
 8007f2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f30:	4798      	blx	r3
 8007f32:	3501      	adds	r5, #1
 8007f34:	e7ee      	b.n	8007f14 <__libc_init_array+0xc>
 8007f36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f3a:	4798      	blx	r3
 8007f3c:	3501      	adds	r5, #1
 8007f3e:	e7f2      	b.n	8007f26 <__libc_init_array+0x1e>
 8007f40:	08009484 	.word	0x08009484
 8007f44:	08009484 	.word	0x08009484
 8007f48:	08009484 	.word	0x08009484
 8007f4c:	08009488 	.word	0x08009488

08007f50 <memset>:
 8007f50:	4402      	add	r2, r0
 8007f52:	4603      	mov	r3, r0
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d100      	bne.n	8007f5a <memset+0xa>
 8007f58:	4770      	bx	lr
 8007f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f5e:	e7f9      	b.n	8007f54 <memset+0x4>

08007f60 <iprintf>:
 8007f60:	b40f      	push	{r0, r1, r2, r3}
 8007f62:	4b0a      	ldr	r3, [pc, #40]	; (8007f8c <iprintf+0x2c>)
 8007f64:	b513      	push	{r0, r1, r4, lr}
 8007f66:	681c      	ldr	r4, [r3, #0]
 8007f68:	b124      	cbz	r4, 8007f74 <iprintf+0x14>
 8007f6a:	69a3      	ldr	r3, [r4, #24]
 8007f6c:	b913      	cbnz	r3, 8007f74 <iprintf+0x14>
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f000 fa22 	bl	80083b8 <__sinit>
 8007f74:	ab05      	add	r3, sp, #20
 8007f76:	9a04      	ldr	r2, [sp, #16]
 8007f78:	68a1      	ldr	r1, [r4, #8]
 8007f7a:	9301      	str	r3, [sp, #4]
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f000 fbdb 	bl	8008738 <_vfiprintf_r>
 8007f82:	b002      	add	sp, #8
 8007f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f88:	b004      	add	sp, #16
 8007f8a:	4770      	bx	lr
 8007f8c:	20000024 	.word	0x20000024

08007f90 <_puts_r>:
 8007f90:	b570      	push	{r4, r5, r6, lr}
 8007f92:	460e      	mov	r6, r1
 8007f94:	4605      	mov	r5, r0
 8007f96:	b118      	cbz	r0, 8007fa0 <_puts_r+0x10>
 8007f98:	6983      	ldr	r3, [r0, #24]
 8007f9a:	b90b      	cbnz	r3, 8007fa0 <_puts_r+0x10>
 8007f9c:	f000 fa0c 	bl	80083b8 <__sinit>
 8007fa0:	69ab      	ldr	r3, [r5, #24]
 8007fa2:	68ac      	ldr	r4, [r5, #8]
 8007fa4:	b913      	cbnz	r3, 8007fac <_puts_r+0x1c>
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f000 fa06 	bl	80083b8 <__sinit>
 8007fac:	4b23      	ldr	r3, [pc, #140]	; (800803c <_puts_r+0xac>)
 8007fae:	429c      	cmp	r4, r3
 8007fb0:	d117      	bne.n	8007fe2 <_puts_r+0x52>
 8007fb2:	686c      	ldr	r4, [r5, #4]
 8007fb4:	89a3      	ldrh	r3, [r4, #12]
 8007fb6:	071b      	lsls	r3, r3, #28
 8007fb8:	d51d      	bpl.n	8007ff6 <_puts_r+0x66>
 8007fba:	6923      	ldr	r3, [r4, #16]
 8007fbc:	b1db      	cbz	r3, 8007ff6 <_puts_r+0x66>
 8007fbe:	3e01      	subs	r6, #1
 8007fc0:	68a3      	ldr	r3, [r4, #8]
 8007fc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	60a3      	str	r3, [r4, #8]
 8007fca:	b9e9      	cbnz	r1, 8008008 <_puts_r+0x78>
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	da2e      	bge.n	800802e <_puts_r+0x9e>
 8007fd0:	4622      	mov	r2, r4
 8007fd2:	210a      	movs	r1, #10
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f000 f83f 	bl	8008058 <__swbuf_r>
 8007fda:	3001      	adds	r0, #1
 8007fdc:	d011      	beq.n	8008002 <_puts_r+0x72>
 8007fde:	200a      	movs	r0, #10
 8007fe0:	e011      	b.n	8008006 <_puts_r+0x76>
 8007fe2:	4b17      	ldr	r3, [pc, #92]	; (8008040 <_puts_r+0xb0>)
 8007fe4:	429c      	cmp	r4, r3
 8007fe6:	d101      	bne.n	8007fec <_puts_r+0x5c>
 8007fe8:	68ac      	ldr	r4, [r5, #8]
 8007fea:	e7e3      	b.n	8007fb4 <_puts_r+0x24>
 8007fec:	4b15      	ldr	r3, [pc, #84]	; (8008044 <_puts_r+0xb4>)
 8007fee:	429c      	cmp	r4, r3
 8007ff0:	bf08      	it	eq
 8007ff2:	68ec      	ldreq	r4, [r5, #12]
 8007ff4:	e7de      	b.n	8007fb4 <_puts_r+0x24>
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	f000 f87f 	bl	80080fc <__swsetup_r>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d0dd      	beq.n	8007fbe <_puts_r+0x2e>
 8008002:	f04f 30ff 	mov.w	r0, #4294967295
 8008006:	bd70      	pop	{r4, r5, r6, pc}
 8008008:	2b00      	cmp	r3, #0
 800800a:	da04      	bge.n	8008016 <_puts_r+0x86>
 800800c:	69a2      	ldr	r2, [r4, #24]
 800800e:	429a      	cmp	r2, r3
 8008010:	dc06      	bgt.n	8008020 <_puts_r+0x90>
 8008012:	290a      	cmp	r1, #10
 8008014:	d004      	beq.n	8008020 <_puts_r+0x90>
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	6022      	str	r2, [r4, #0]
 800801c:	7019      	strb	r1, [r3, #0]
 800801e:	e7cf      	b.n	8007fc0 <_puts_r+0x30>
 8008020:	4622      	mov	r2, r4
 8008022:	4628      	mov	r0, r5
 8008024:	f000 f818 	bl	8008058 <__swbuf_r>
 8008028:	3001      	adds	r0, #1
 800802a:	d1c9      	bne.n	8007fc0 <_puts_r+0x30>
 800802c:	e7e9      	b.n	8008002 <_puts_r+0x72>
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	200a      	movs	r0, #10
 8008032:	1c5a      	adds	r2, r3, #1
 8008034:	6022      	str	r2, [r4, #0]
 8008036:	7018      	strb	r0, [r3, #0]
 8008038:	e7e5      	b.n	8008006 <_puts_r+0x76>
 800803a:	bf00      	nop
 800803c:	08009408 	.word	0x08009408
 8008040:	08009428 	.word	0x08009428
 8008044:	080093e8 	.word	0x080093e8

08008048 <puts>:
 8008048:	4b02      	ldr	r3, [pc, #8]	; (8008054 <puts+0xc>)
 800804a:	4601      	mov	r1, r0
 800804c:	6818      	ldr	r0, [r3, #0]
 800804e:	f7ff bf9f 	b.w	8007f90 <_puts_r>
 8008052:	bf00      	nop
 8008054:	20000024 	.word	0x20000024

08008058 <__swbuf_r>:
 8008058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805a:	460e      	mov	r6, r1
 800805c:	4614      	mov	r4, r2
 800805e:	4605      	mov	r5, r0
 8008060:	b118      	cbz	r0, 800806a <__swbuf_r+0x12>
 8008062:	6983      	ldr	r3, [r0, #24]
 8008064:	b90b      	cbnz	r3, 800806a <__swbuf_r+0x12>
 8008066:	f000 f9a7 	bl	80083b8 <__sinit>
 800806a:	4b21      	ldr	r3, [pc, #132]	; (80080f0 <__swbuf_r+0x98>)
 800806c:	429c      	cmp	r4, r3
 800806e:	d12a      	bne.n	80080c6 <__swbuf_r+0x6e>
 8008070:	686c      	ldr	r4, [r5, #4]
 8008072:	69a3      	ldr	r3, [r4, #24]
 8008074:	60a3      	str	r3, [r4, #8]
 8008076:	89a3      	ldrh	r3, [r4, #12]
 8008078:	071a      	lsls	r2, r3, #28
 800807a:	d52e      	bpl.n	80080da <__swbuf_r+0x82>
 800807c:	6923      	ldr	r3, [r4, #16]
 800807e:	b363      	cbz	r3, 80080da <__swbuf_r+0x82>
 8008080:	6923      	ldr	r3, [r4, #16]
 8008082:	6820      	ldr	r0, [r4, #0]
 8008084:	1ac0      	subs	r0, r0, r3
 8008086:	6963      	ldr	r3, [r4, #20]
 8008088:	b2f6      	uxtb	r6, r6
 800808a:	4283      	cmp	r3, r0
 800808c:	4637      	mov	r7, r6
 800808e:	dc04      	bgt.n	800809a <__swbuf_r+0x42>
 8008090:	4621      	mov	r1, r4
 8008092:	4628      	mov	r0, r5
 8008094:	f000 f926 	bl	80082e4 <_fflush_r>
 8008098:	bb28      	cbnz	r0, 80080e6 <__swbuf_r+0x8e>
 800809a:	68a3      	ldr	r3, [r4, #8]
 800809c:	3b01      	subs	r3, #1
 800809e:	60a3      	str	r3, [r4, #8]
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	1c5a      	adds	r2, r3, #1
 80080a4:	6022      	str	r2, [r4, #0]
 80080a6:	701e      	strb	r6, [r3, #0]
 80080a8:	6963      	ldr	r3, [r4, #20]
 80080aa:	3001      	adds	r0, #1
 80080ac:	4283      	cmp	r3, r0
 80080ae:	d004      	beq.n	80080ba <__swbuf_r+0x62>
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	07db      	lsls	r3, r3, #31
 80080b4:	d519      	bpl.n	80080ea <__swbuf_r+0x92>
 80080b6:	2e0a      	cmp	r6, #10
 80080b8:	d117      	bne.n	80080ea <__swbuf_r+0x92>
 80080ba:	4621      	mov	r1, r4
 80080bc:	4628      	mov	r0, r5
 80080be:	f000 f911 	bl	80082e4 <_fflush_r>
 80080c2:	b190      	cbz	r0, 80080ea <__swbuf_r+0x92>
 80080c4:	e00f      	b.n	80080e6 <__swbuf_r+0x8e>
 80080c6:	4b0b      	ldr	r3, [pc, #44]	; (80080f4 <__swbuf_r+0x9c>)
 80080c8:	429c      	cmp	r4, r3
 80080ca:	d101      	bne.n	80080d0 <__swbuf_r+0x78>
 80080cc:	68ac      	ldr	r4, [r5, #8]
 80080ce:	e7d0      	b.n	8008072 <__swbuf_r+0x1a>
 80080d0:	4b09      	ldr	r3, [pc, #36]	; (80080f8 <__swbuf_r+0xa0>)
 80080d2:	429c      	cmp	r4, r3
 80080d4:	bf08      	it	eq
 80080d6:	68ec      	ldreq	r4, [r5, #12]
 80080d8:	e7cb      	b.n	8008072 <__swbuf_r+0x1a>
 80080da:	4621      	mov	r1, r4
 80080dc:	4628      	mov	r0, r5
 80080de:	f000 f80d 	bl	80080fc <__swsetup_r>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d0cc      	beq.n	8008080 <__swbuf_r+0x28>
 80080e6:	f04f 37ff 	mov.w	r7, #4294967295
 80080ea:	4638      	mov	r0, r7
 80080ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ee:	bf00      	nop
 80080f0:	08009408 	.word	0x08009408
 80080f4:	08009428 	.word	0x08009428
 80080f8:	080093e8 	.word	0x080093e8

080080fc <__swsetup_r>:
 80080fc:	4b32      	ldr	r3, [pc, #200]	; (80081c8 <__swsetup_r+0xcc>)
 80080fe:	b570      	push	{r4, r5, r6, lr}
 8008100:	681d      	ldr	r5, [r3, #0]
 8008102:	4606      	mov	r6, r0
 8008104:	460c      	mov	r4, r1
 8008106:	b125      	cbz	r5, 8008112 <__swsetup_r+0x16>
 8008108:	69ab      	ldr	r3, [r5, #24]
 800810a:	b913      	cbnz	r3, 8008112 <__swsetup_r+0x16>
 800810c:	4628      	mov	r0, r5
 800810e:	f000 f953 	bl	80083b8 <__sinit>
 8008112:	4b2e      	ldr	r3, [pc, #184]	; (80081cc <__swsetup_r+0xd0>)
 8008114:	429c      	cmp	r4, r3
 8008116:	d10f      	bne.n	8008138 <__swsetup_r+0x3c>
 8008118:	686c      	ldr	r4, [r5, #4]
 800811a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800811e:	b29a      	uxth	r2, r3
 8008120:	0715      	lsls	r5, r2, #28
 8008122:	d42c      	bmi.n	800817e <__swsetup_r+0x82>
 8008124:	06d0      	lsls	r0, r2, #27
 8008126:	d411      	bmi.n	800814c <__swsetup_r+0x50>
 8008128:	2209      	movs	r2, #9
 800812a:	6032      	str	r2, [r6, #0]
 800812c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008130:	81a3      	strh	r3, [r4, #12]
 8008132:	f04f 30ff 	mov.w	r0, #4294967295
 8008136:	e03e      	b.n	80081b6 <__swsetup_r+0xba>
 8008138:	4b25      	ldr	r3, [pc, #148]	; (80081d0 <__swsetup_r+0xd4>)
 800813a:	429c      	cmp	r4, r3
 800813c:	d101      	bne.n	8008142 <__swsetup_r+0x46>
 800813e:	68ac      	ldr	r4, [r5, #8]
 8008140:	e7eb      	b.n	800811a <__swsetup_r+0x1e>
 8008142:	4b24      	ldr	r3, [pc, #144]	; (80081d4 <__swsetup_r+0xd8>)
 8008144:	429c      	cmp	r4, r3
 8008146:	bf08      	it	eq
 8008148:	68ec      	ldreq	r4, [r5, #12]
 800814a:	e7e6      	b.n	800811a <__swsetup_r+0x1e>
 800814c:	0751      	lsls	r1, r2, #29
 800814e:	d512      	bpl.n	8008176 <__swsetup_r+0x7a>
 8008150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008152:	b141      	cbz	r1, 8008166 <__swsetup_r+0x6a>
 8008154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008158:	4299      	cmp	r1, r3
 800815a:	d002      	beq.n	8008162 <__swsetup_r+0x66>
 800815c:	4630      	mov	r0, r6
 800815e:	f000 fa19 	bl	8008594 <_free_r>
 8008162:	2300      	movs	r3, #0
 8008164:	6363      	str	r3, [r4, #52]	; 0x34
 8008166:	89a3      	ldrh	r3, [r4, #12]
 8008168:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800816c:	81a3      	strh	r3, [r4, #12]
 800816e:	2300      	movs	r3, #0
 8008170:	6063      	str	r3, [r4, #4]
 8008172:	6923      	ldr	r3, [r4, #16]
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	f043 0308 	orr.w	r3, r3, #8
 800817c:	81a3      	strh	r3, [r4, #12]
 800817e:	6923      	ldr	r3, [r4, #16]
 8008180:	b94b      	cbnz	r3, 8008196 <__swsetup_r+0x9a>
 8008182:	89a3      	ldrh	r3, [r4, #12]
 8008184:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800818c:	d003      	beq.n	8008196 <__swsetup_r+0x9a>
 800818e:	4621      	mov	r1, r4
 8008190:	4630      	mov	r0, r6
 8008192:	f000 f9bf 	bl	8008514 <__smakebuf_r>
 8008196:	89a2      	ldrh	r2, [r4, #12]
 8008198:	f012 0301 	ands.w	r3, r2, #1
 800819c:	d00c      	beq.n	80081b8 <__swsetup_r+0xbc>
 800819e:	2300      	movs	r3, #0
 80081a0:	60a3      	str	r3, [r4, #8]
 80081a2:	6963      	ldr	r3, [r4, #20]
 80081a4:	425b      	negs	r3, r3
 80081a6:	61a3      	str	r3, [r4, #24]
 80081a8:	6923      	ldr	r3, [r4, #16]
 80081aa:	b953      	cbnz	r3, 80081c2 <__swsetup_r+0xc6>
 80081ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80081b4:	d1ba      	bne.n	800812c <__swsetup_r+0x30>
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	0792      	lsls	r2, r2, #30
 80081ba:	bf58      	it	pl
 80081bc:	6963      	ldrpl	r3, [r4, #20]
 80081be:	60a3      	str	r3, [r4, #8]
 80081c0:	e7f2      	b.n	80081a8 <__swsetup_r+0xac>
 80081c2:	2000      	movs	r0, #0
 80081c4:	e7f7      	b.n	80081b6 <__swsetup_r+0xba>
 80081c6:	bf00      	nop
 80081c8:	20000024 	.word	0x20000024
 80081cc:	08009408 	.word	0x08009408
 80081d0:	08009428 	.word	0x08009428
 80081d4:	080093e8 	.word	0x080093e8

080081d8 <__sflush_r>:
 80081d8:	898a      	ldrh	r2, [r1, #12]
 80081da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081de:	4605      	mov	r5, r0
 80081e0:	0710      	lsls	r0, r2, #28
 80081e2:	460c      	mov	r4, r1
 80081e4:	d458      	bmi.n	8008298 <__sflush_r+0xc0>
 80081e6:	684b      	ldr	r3, [r1, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	dc05      	bgt.n	80081f8 <__sflush_r+0x20>
 80081ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	dc02      	bgt.n	80081f8 <__sflush_r+0x20>
 80081f2:	2000      	movs	r0, #0
 80081f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081fa:	2e00      	cmp	r6, #0
 80081fc:	d0f9      	beq.n	80081f2 <__sflush_r+0x1a>
 80081fe:	2300      	movs	r3, #0
 8008200:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008204:	682f      	ldr	r7, [r5, #0]
 8008206:	6a21      	ldr	r1, [r4, #32]
 8008208:	602b      	str	r3, [r5, #0]
 800820a:	d032      	beq.n	8008272 <__sflush_r+0x9a>
 800820c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	075a      	lsls	r2, r3, #29
 8008212:	d505      	bpl.n	8008220 <__sflush_r+0x48>
 8008214:	6863      	ldr	r3, [r4, #4]
 8008216:	1ac0      	subs	r0, r0, r3
 8008218:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800821a:	b10b      	cbz	r3, 8008220 <__sflush_r+0x48>
 800821c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800821e:	1ac0      	subs	r0, r0, r3
 8008220:	2300      	movs	r3, #0
 8008222:	4602      	mov	r2, r0
 8008224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008226:	6a21      	ldr	r1, [r4, #32]
 8008228:	4628      	mov	r0, r5
 800822a:	47b0      	blx	r6
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	89a3      	ldrh	r3, [r4, #12]
 8008230:	d106      	bne.n	8008240 <__sflush_r+0x68>
 8008232:	6829      	ldr	r1, [r5, #0]
 8008234:	291d      	cmp	r1, #29
 8008236:	d848      	bhi.n	80082ca <__sflush_r+0xf2>
 8008238:	4a29      	ldr	r2, [pc, #164]	; (80082e0 <__sflush_r+0x108>)
 800823a:	40ca      	lsrs	r2, r1
 800823c:	07d6      	lsls	r6, r2, #31
 800823e:	d544      	bpl.n	80082ca <__sflush_r+0xf2>
 8008240:	2200      	movs	r2, #0
 8008242:	6062      	str	r2, [r4, #4]
 8008244:	04d9      	lsls	r1, r3, #19
 8008246:	6922      	ldr	r2, [r4, #16]
 8008248:	6022      	str	r2, [r4, #0]
 800824a:	d504      	bpl.n	8008256 <__sflush_r+0x7e>
 800824c:	1c42      	adds	r2, r0, #1
 800824e:	d101      	bne.n	8008254 <__sflush_r+0x7c>
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	b903      	cbnz	r3, 8008256 <__sflush_r+0x7e>
 8008254:	6560      	str	r0, [r4, #84]	; 0x54
 8008256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008258:	602f      	str	r7, [r5, #0]
 800825a:	2900      	cmp	r1, #0
 800825c:	d0c9      	beq.n	80081f2 <__sflush_r+0x1a>
 800825e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008262:	4299      	cmp	r1, r3
 8008264:	d002      	beq.n	800826c <__sflush_r+0x94>
 8008266:	4628      	mov	r0, r5
 8008268:	f000 f994 	bl	8008594 <_free_r>
 800826c:	2000      	movs	r0, #0
 800826e:	6360      	str	r0, [r4, #52]	; 0x34
 8008270:	e7c0      	b.n	80081f4 <__sflush_r+0x1c>
 8008272:	2301      	movs	r3, #1
 8008274:	4628      	mov	r0, r5
 8008276:	47b0      	blx	r6
 8008278:	1c41      	adds	r1, r0, #1
 800827a:	d1c8      	bne.n	800820e <__sflush_r+0x36>
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d0c5      	beq.n	800820e <__sflush_r+0x36>
 8008282:	2b1d      	cmp	r3, #29
 8008284:	d001      	beq.n	800828a <__sflush_r+0xb2>
 8008286:	2b16      	cmp	r3, #22
 8008288:	d101      	bne.n	800828e <__sflush_r+0xb6>
 800828a:	602f      	str	r7, [r5, #0]
 800828c:	e7b1      	b.n	80081f2 <__sflush_r+0x1a>
 800828e:	89a3      	ldrh	r3, [r4, #12]
 8008290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008294:	81a3      	strh	r3, [r4, #12]
 8008296:	e7ad      	b.n	80081f4 <__sflush_r+0x1c>
 8008298:	690f      	ldr	r7, [r1, #16]
 800829a:	2f00      	cmp	r7, #0
 800829c:	d0a9      	beq.n	80081f2 <__sflush_r+0x1a>
 800829e:	0793      	lsls	r3, r2, #30
 80082a0:	680e      	ldr	r6, [r1, #0]
 80082a2:	bf08      	it	eq
 80082a4:	694b      	ldreq	r3, [r1, #20]
 80082a6:	600f      	str	r7, [r1, #0]
 80082a8:	bf18      	it	ne
 80082aa:	2300      	movne	r3, #0
 80082ac:	eba6 0807 	sub.w	r8, r6, r7
 80082b0:	608b      	str	r3, [r1, #8]
 80082b2:	f1b8 0f00 	cmp.w	r8, #0
 80082b6:	dd9c      	ble.n	80081f2 <__sflush_r+0x1a>
 80082b8:	4643      	mov	r3, r8
 80082ba:	463a      	mov	r2, r7
 80082bc:	6a21      	ldr	r1, [r4, #32]
 80082be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082c0:	4628      	mov	r0, r5
 80082c2:	47b0      	blx	r6
 80082c4:	2800      	cmp	r0, #0
 80082c6:	dc06      	bgt.n	80082d6 <__sflush_r+0xfe>
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ce:	81a3      	strh	r3, [r4, #12]
 80082d0:	f04f 30ff 	mov.w	r0, #4294967295
 80082d4:	e78e      	b.n	80081f4 <__sflush_r+0x1c>
 80082d6:	4407      	add	r7, r0
 80082d8:	eba8 0800 	sub.w	r8, r8, r0
 80082dc:	e7e9      	b.n	80082b2 <__sflush_r+0xda>
 80082de:	bf00      	nop
 80082e0:	20400001 	.word	0x20400001

080082e4 <_fflush_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	690b      	ldr	r3, [r1, #16]
 80082e8:	4605      	mov	r5, r0
 80082ea:	460c      	mov	r4, r1
 80082ec:	b1db      	cbz	r3, 8008326 <_fflush_r+0x42>
 80082ee:	b118      	cbz	r0, 80082f8 <_fflush_r+0x14>
 80082f0:	6983      	ldr	r3, [r0, #24]
 80082f2:	b90b      	cbnz	r3, 80082f8 <_fflush_r+0x14>
 80082f4:	f000 f860 	bl	80083b8 <__sinit>
 80082f8:	4b0c      	ldr	r3, [pc, #48]	; (800832c <_fflush_r+0x48>)
 80082fa:	429c      	cmp	r4, r3
 80082fc:	d109      	bne.n	8008312 <_fflush_r+0x2e>
 80082fe:	686c      	ldr	r4, [r5, #4]
 8008300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008304:	b17b      	cbz	r3, 8008326 <_fflush_r+0x42>
 8008306:	4621      	mov	r1, r4
 8008308:	4628      	mov	r0, r5
 800830a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800830e:	f7ff bf63 	b.w	80081d8 <__sflush_r>
 8008312:	4b07      	ldr	r3, [pc, #28]	; (8008330 <_fflush_r+0x4c>)
 8008314:	429c      	cmp	r4, r3
 8008316:	d101      	bne.n	800831c <_fflush_r+0x38>
 8008318:	68ac      	ldr	r4, [r5, #8]
 800831a:	e7f1      	b.n	8008300 <_fflush_r+0x1c>
 800831c:	4b05      	ldr	r3, [pc, #20]	; (8008334 <_fflush_r+0x50>)
 800831e:	429c      	cmp	r4, r3
 8008320:	bf08      	it	eq
 8008322:	68ec      	ldreq	r4, [r5, #12]
 8008324:	e7ec      	b.n	8008300 <_fflush_r+0x1c>
 8008326:	2000      	movs	r0, #0
 8008328:	bd38      	pop	{r3, r4, r5, pc}
 800832a:	bf00      	nop
 800832c:	08009408 	.word	0x08009408
 8008330:	08009428 	.word	0x08009428
 8008334:	080093e8 	.word	0x080093e8

08008338 <std>:
 8008338:	2300      	movs	r3, #0
 800833a:	b510      	push	{r4, lr}
 800833c:	4604      	mov	r4, r0
 800833e:	e9c0 3300 	strd	r3, r3, [r0]
 8008342:	6083      	str	r3, [r0, #8]
 8008344:	8181      	strh	r1, [r0, #12]
 8008346:	6643      	str	r3, [r0, #100]	; 0x64
 8008348:	81c2      	strh	r2, [r0, #14]
 800834a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800834e:	6183      	str	r3, [r0, #24]
 8008350:	4619      	mov	r1, r3
 8008352:	2208      	movs	r2, #8
 8008354:	305c      	adds	r0, #92	; 0x5c
 8008356:	f7ff fdfb 	bl	8007f50 <memset>
 800835a:	4b05      	ldr	r3, [pc, #20]	; (8008370 <std+0x38>)
 800835c:	6263      	str	r3, [r4, #36]	; 0x24
 800835e:	4b05      	ldr	r3, [pc, #20]	; (8008374 <std+0x3c>)
 8008360:	62a3      	str	r3, [r4, #40]	; 0x28
 8008362:	4b05      	ldr	r3, [pc, #20]	; (8008378 <std+0x40>)
 8008364:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008366:	4b05      	ldr	r3, [pc, #20]	; (800837c <std+0x44>)
 8008368:	6224      	str	r4, [r4, #32]
 800836a:	6323      	str	r3, [r4, #48]	; 0x30
 800836c:	bd10      	pop	{r4, pc}
 800836e:	bf00      	nop
 8008370:	08008c95 	.word	0x08008c95
 8008374:	08008cb7 	.word	0x08008cb7
 8008378:	08008cef 	.word	0x08008cef
 800837c:	08008d13 	.word	0x08008d13

08008380 <_cleanup_r>:
 8008380:	4901      	ldr	r1, [pc, #4]	; (8008388 <_cleanup_r+0x8>)
 8008382:	f000 b885 	b.w	8008490 <_fwalk_reent>
 8008386:	bf00      	nop
 8008388:	080082e5 	.word	0x080082e5

0800838c <__sfmoreglue>:
 800838c:	b570      	push	{r4, r5, r6, lr}
 800838e:	1e4a      	subs	r2, r1, #1
 8008390:	2568      	movs	r5, #104	; 0x68
 8008392:	4355      	muls	r5, r2
 8008394:	460e      	mov	r6, r1
 8008396:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800839a:	f000 f949 	bl	8008630 <_malloc_r>
 800839e:	4604      	mov	r4, r0
 80083a0:	b140      	cbz	r0, 80083b4 <__sfmoreglue+0x28>
 80083a2:	2100      	movs	r1, #0
 80083a4:	e9c0 1600 	strd	r1, r6, [r0]
 80083a8:	300c      	adds	r0, #12
 80083aa:	60a0      	str	r0, [r4, #8]
 80083ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80083b0:	f7ff fdce 	bl	8007f50 <memset>
 80083b4:	4620      	mov	r0, r4
 80083b6:	bd70      	pop	{r4, r5, r6, pc}

080083b8 <__sinit>:
 80083b8:	6983      	ldr	r3, [r0, #24]
 80083ba:	b510      	push	{r4, lr}
 80083bc:	4604      	mov	r4, r0
 80083be:	bb33      	cbnz	r3, 800840e <__sinit+0x56>
 80083c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80083c4:	6503      	str	r3, [r0, #80]	; 0x50
 80083c6:	4b12      	ldr	r3, [pc, #72]	; (8008410 <__sinit+0x58>)
 80083c8:	4a12      	ldr	r2, [pc, #72]	; (8008414 <__sinit+0x5c>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6282      	str	r2, [r0, #40]	; 0x28
 80083ce:	4298      	cmp	r0, r3
 80083d0:	bf04      	itt	eq
 80083d2:	2301      	moveq	r3, #1
 80083d4:	6183      	streq	r3, [r0, #24]
 80083d6:	f000 f81f 	bl	8008418 <__sfp>
 80083da:	6060      	str	r0, [r4, #4]
 80083dc:	4620      	mov	r0, r4
 80083de:	f000 f81b 	bl	8008418 <__sfp>
 80083e2:	60a0      	str	r0, [r4, #8]
 80083e4:	4620      	mov	r0, r4
 80083e6:	f000 f817 	bl	8008418 <__sfp>
 80083ea:	2200      	movs	r2, #0
 80083ec:	60e0      	str	r0, [r4, #12]
 80083ee:	2104      	movs	r1, #4
 80083f0:	6860      	ldr	r0, [r4, #4]
 80083f2:	f7ff ffa1 	bl	8008338 <std>
 80083f6:	2201      	movs	r2, #1
 80083f8:	2109      	movs	r1, #9
 80083fa:	68a0      	ldr	r0, [r4, #8]
 80083fc:	f7ff ff9c 	bl	8008338 <std>
 8008400:	2202      	movs	r2, #2
 8008402:	2112      	movs	r1, #18
 8008404:	68e0      	ldr	r0, [r4, #12]
 8008406:	f7ff ff97 	bl	8008338 <std>
 800840a:	2301      	movs	r3, #1
 800840c:	61a3      	str	r3, [r4, #24]
 800840e:	bd10      	pop	{r4, pc}
 8008410:	080093e4 	.word	0x080093e4
 8008414:	08008381 	.word	0x08008381

08008418 <__sfp>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	4b1b      	ldr	r3, [pc, #108]	; (8008488 <__sfp+0x70>)
 800841c:	681e      	ldr	r6, [r3, #0]
 800841e:	69b3      	ldr	r3, [r6, #24]
 8008420:	4607      	mov	r7, r0
 8008422:	b913      	cbnz	r3, 800842a <__sfp+0x12>
 8008424:	4630      	mov	r0, r6
 8008426:	f7ff ffc7 	bl	80083b8 <__sinit>
 800842a:	3648      	adds	r6, #72	; 0x48
 800842c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008430:	3b01      	subs	r3, #1
 8008432:	d503      	bpl.n	800843c <__sfp+0x24>
 8008434:	6833      	ldr	r3, [r6, #0]
 8008436:	b133      	cbz	r3, 8008446 <__sfp+0x2e>
 8008438:	6836      	ldr	r6, [r6, #0]
 800843a:	e7f7      	b.n	800842c <__sfp+0x14>
 800843c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008440:	b16d      	cbz	r5, 800845e <__sfp+0x46>
 8008442:	3468      	adds	r4, #104	; 0x68
 8008444:	e7f4      	b.n	8008430 <__sfp+0x18>
 8008446:	2104      	movs	r1, #4
 8008448:	4638      	mov	r0, r7
 800844a:	f7ff ff9f 	bl	800838c <__sfmoreglue>
 800844e:	6030      	str	r0, [r6, #0]
 8008450:	2800      	cmp	r0, #0
 8008452:	d1f1      	bne.n	8008438 <__sfp+0x20>
 8008454:	230c      	movs	r3, #12
 8008456:	603b      	str	r3, [r7, #0]
 8008458:	4604      	mov	r4, r0
 800845a:	4620      	mov	r0, r4
 800845c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800845e:	4b0b      	ldr	r3, [pc, #44]	; (800848c <__sfp+0x74>)
 8008460:	6665      	str	r5, [r4, #100]	; 0x64
 8008462:	e9c4 5500 	strd	r5, r5, [r4]
 8008466:	60a5      	str	r5, [r4, #8]
 8008468:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800846c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008470:	2208      	movs	r2, #8
 8008472:	4629      	mov	r1, r5
 8008474:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008478:	f7ff fd6a 	bl	8007f50 <memset>
 800847c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008480:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008484:	e7e9      	b.n	800845a <__sfp+0x42>
 8008486:	bf00      	nop
 8008488:	080093e4 	.word	0x080093e4
 800848c:	ffff0001 	.word	0xffff0001

08008490 <_fwalk_reent>:
 8008490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008494:	4680      	mov	r8, r0
 8008496:	4689      	mov	r9, r1
 8008498:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800849c:	2600      	movs	r6, #0
 800849e:	b914      	cbnz	r4, 80084a6 <_fwalk_reent+0x16>
 80084a0:	4630      	mov	r0, r6
 80084a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80084aa:	3f01      	subs	r7, #1
 80084ac:	d501      	bpl.n	80084b2 <_fwalk_reent+0x22>
 80084ae:	6824      	ldr	r4, [r4, #0]
 80084b0:	e7f5      	b.n	800849e <_fwalk_reent+0xe>
 80084b2:	89ab      	ldrh	r3, [r5, #12]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d907      	bls.n	80084c8 <_fwalk_reent+0x38>
 80084b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084bc:	3301      	adds	r3, #1
 80084be:	d003      	beq.n	80084c8 <_fwalk_reent+0x38>
 80084c0:	4629      	mov	r1, r5
 80084c2:	4640      	mov	r0, r8
 80084c4:	47c8      	blx	r9
 80084c6:	4306      	orrs	r6, r0
 80084c8:	3568      	adds	r5, #104	; 0x68
 80084ca:	e7ee      	b.n	80084aa <_fwalk_reent+0x1a>

080084cc <__swhatbuf_r>:
 80084cc:	b570      	push	{r4, r5, r6, lr}
 80084ce:	460e      	mov	r6, r1
 80084d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d4:	2900      	cmp	r1, #0
 80084d6:	b096      	sub	sp, #88	; 0x58
 80084d8:	4614      	mov	r4, r2
 80084da:	461d      	mov	r5, r3
 80084dc:	da07      	bge.n	80084ee <__swhatbuf_r+0x22>
 80084de:	2300      	movs	r3, #0
 80084e0:	602b      	str	r3, [r5, #0]
 80084e2:	89b3      	ldrh	r3, [r6, #12]
 80084e4:	061a      	lsls	r2, r3, #24
 80084e6:	d410      	bmi.n	800850a <__swhatbuf_r+0x3e>
 80084e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ec:	e00e      	b.n	800850c <__swhatbuf_r+0x40>
 80084ee:	466a      	mov	r2, sp
 80084f0:	f000 fc36 	bl	8008d60 <_fstat_r>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	dbf2      	blt.n	80084de <__swhatbuf_r+0x12>
 80084f8:	9a01      	ldr	r2, [sp, #4]
 80084fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008502:	425a      	negs	r2, r3
 8008504:	415a      	adcs	r2, r3
 8008506:	602a      	str	r2, [r5, #0]
 8008508:	e7ee      	b.n	80084e8 <__swhatbuf_r+0x1c>
 800850a:	2340      	movs	r3, #64	; 0x40
 800850c:	2000      	movs	r0, #0
 800850e:	6023      	str	r3, [r4, #0]
 8008510:	b016      	add	sp, #88	; 0x58
 8008512:	bd70      	pop	{r4, r5, r6, pc}

08008514 <__smakebuf_r>:
 8008514:	898b      	ldrh	r3, [r1, #12]
 8008516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008518:	079d      	lsls	r5, r3, #30
 800851a:	4606      	mov	r6, r0
 800851c:	460c      	mov	r4, r1
 800851e:	d507      	bpl.n	8008530 <__smakebuf_r+0x1c>
 8008520:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	6123      	str	r3, [r4, #16]
 8008528:	2301      	movs	r3, #1
 800852a:	6163      	str	r3, [r4, #20]
 800852c:	b002      	add	sp, #8
 800852e:	bd70      	pop	{r4, r5, r6, pc}
 8008530:	ab01      	add	r3, sp, #4
 8008532:	466a      	mov	r2, sp
 8008534:	f7ff ffca 	bl	80084cc <__swhatbuf_r>
 8008538:	9900      	ldr	r1, [sp, #0]
 800853a:	4605      	mov	r5, r0
 800853c:	4630      	mov	r0, r6
 800853e:	f000 f877 	bl	8008630 <_malloc_r>
 8008542:	b948      	cbnz	r0, 8008558 <__smakebuf_r+0x44>
 8008544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008548:	059a      	lsls	r2, r3, #22
 800854a:	d4ef      	bmi.n	800852c <__smakebuf_r+0x18>
 800854c:	f023 0303 	bic.w	r3, r3, #3
 8008550:	f043 0302 	orr.w	r3, r3, #2
 8008554:	81a3      	strh	r3, [r4, #12]
 8008556:	e7e3      	b.n	8008520 <__smakebuf_r+0xc>
 8008558:	4b0d      	ldr	r3, [pc, #52]	; (8008590 <__smakebuf_r+0x7c>)
 800855a:	62b3      	str	r3, [r6, #40]	; 0x28
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	6020      	str	r0, [r4, #0]
 8008560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008564:	81a3      	strh	r3, [r4, #12]
 8008566:	9b00      	ldr	r3, [sp, #0]
 8008568:	6163      	str	r3, [r4, #20]
 800856a:	9b01      	ldr	r3, [sp, #4]
 800856c:	6120      	str	r0, [r4, #16]
 800856e:	b15b      	cbz	r3, 8008588 <__smakebuf_r+0x74>
 8008570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008574:	4630      	mov	r0, r6
 8008576:	f000 fc05 	bl	8008d84 <_isatty_r>
 800857a:	b128      	cbz	r0, 8008588 <__smakebuf_r+0x74>
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	f023 0303 	bic.w	r3, r3, #3
 8008582:	f043 0301 	orr.w	r3, r3, #1
 8008586:	81a3      	strh	r3, [r4, #12]
 8008588:	89a3      	ldrh	r3, [r4, #12]
 800858a:	431d      	orrs	r5, r3
 800858c:	81a5      	strh	r5, [r4, #12]
 800858e:	e7cd      	b.n	800852c <__smakebuf_r+0x18>
 8008590:	08008381 	.word	0x08008381

08008594 <_free_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4605      	mov	r5, r0
 8008598:	2900      	cmp	r1, #0
 800859a:	d045      	beq.n	8008628 <_free_r+0x94>
 800859c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085a0:	1f0c      	subs	r4, r1, #4
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	bfb8      	it	lt
 80085a6:	18e4      	addlt	r4, r4, r3
 80085a8:	f000 fc0e 	bl	8008dc8 <__malloc_lock>
 80085ac:	4a1f      	ldr	r2, [pc, #124]	; (800862c <_free_r+0x98>)
 80085ae:	6813      	ldr	r3, [r2, #0]
 80085b0:	4610      	mov	r0, r2
 80085b2:	b933      	cbnz	r3, 80085c2 <_free_r+0x2e>
 80085b4:	6063      	str	r3, [r4, #4]
 80085b6:	6014      	str	r4, [r2, #0]
 80085b8:	4628      	mov	r0, r5
 80085ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085be:	f000 bc04 	b.w	8008dca <__malloc_unlock>
 80085c2:	42a3      	cmp	r3, r4
 80085c4:	d90c      	bls.n	80085e0 <_free_r+0x4c>
 80085c6:	6821      	ldr	r1, [r4, #0]
 80085c8:	1862      	adds	r2, r4, r1
 80085ca:	4293      	cmp	r3, r2
 80085cc:	bf04      	itt	eq
 80085ce:	681a      	ldreq	r2, [r3, #0]
 80085d0:	685b      	ldreq	r3, [r3, #4]
 80085d2:	6063      	str	r3, [r4, #4]
 80085d4:	bf04      	itt	eq
 80085d6:	1852      	addeq	r2, r2, r1
 80085d8:	6022      	streq	r2, [r4, #0]
 80085da:	6004      	str	r4, [r0, #0]
 80085dc:	e7ec      	b.n	80085b8 <_free_r+0x24>
 80085de:	4613      	mov	r3, r2
 80085e0:	685a      	ldr	r2, [r3, #4]
 80085e2:	b10a      	cbz	r2, 80085e8 <_free_r+0x54>
 80085e4:	42a2      	cmp	r2, r4
 80085e6:	d9fa      	bls.n	80085de <_free_r+0x4a>
 80085e8:	6819      	ldr	r1, [r3, #0]
 80085ea:	1858      	adds	r0, r3, r1
 80085ec:	42a0      	cmp	r0, r4
 80085ee:	d10b      	bne.n	8008608 <_free_r+0x74>
 80085f0:	6820      	ldr	r0, [r4, #0]
 80085f2:	4401      	add	r1, r0
 80085f4:	1858      	adds	r0, r3, r1
 80085f6:	4282      	cmp	r2, r0
 80085f8:	6019      	str	r1, [r3, #0]
 80085fa:	d1dd      	bne.n	80085b8 <_free_r+0x24>
 80085fc:	6810      	ldr	r0, [r2, #0]
 80085fe:	6852      	ldr	r2, [r2, #4]
 8008600:	605a      	str	r2, [r3, #4]
 8008602:	4401      	add	r1, r0
 8008604:	6019      	str	r1, [r3, #0]
 8008606:	e7d7      	b.n	80085b8 <_free_r+0x24>
 8008608:	d902      	bls.n	8008610 <_free_r+0x7c>
 800860a:	230c      	movs	r3, #12
 800860c:	602b      	str	r3, [r5, #0]
 800860e:	e7d3      	b.n	80085b8 <_free_r+0x24>
 8008610:	6820      	ldr	r0, [r4, #0]
 8008612:	1821      	adds	r1, r4, r0
 8008614:	428a      	cmp	r2, r1
 8008616:	bf04      	itt	eq
 8008618:	6811      	ldreq	r1, [r2, #0]
 800861a:	6852      	ldreq	r2, [r2, #4]
 800861c:	6062      	str	r2, [r4, #4]
 800861e:	bf04      	itt	eq
 8008620:	1809      	addeq	r1, r1, r0
 8008622:	6021      	streq	r1, [r4, #0]
 8008624:	605c      	str	r4, [r3, #4]
 8008626:	e7c7      	b.n	80085b8 <_free_r+0x24>
 8008628:	bd38      	pop	{r3, r4, r5, pc}
 800862a:	bf00      	nop
 800862c:	200002e0 	.word	0x200002e0

08008630 <_malloc_r>:
 8008630:	b570      	push	{r4, r5, r6, lr}
 8008632:	1ccd      	adds	r5, r1, #3
 8008634:	f025 0503 	bic.w	r5, r5, #3
 8008638:	3508      	adds	r5, #8
 800863a:	2d0c      	cmp	r5, #12
 800863c:	bf38      	it	cc
 800863e:	250c      	movcc	r5, #12
 8008640:	2d00      	cmp	r5, #0
 8008642:	4606      	mov	r6, r0
 8008644:	db01      	blt.n	800864a <_malloc_r+0x1a>
 8008646:	42a9      	cmp	r1, r5
 8008648:	d903      	bls.n	8008652 <_malloc_r+0x22>
 800864a:	230c      	movs	r3, #12
 800864c:	6033      	str	r3, [r6, #0]
 800864e:	2000      	movs	r0, #0
 8008650:	bd70      	pop	{r4, r5, r6, pc}
 8008652:	f000 fbb9 	bl	8008dc8 <__malloc_lock>
 8008656:	4a21      	ldr	r2, [pc, #132]	; (80086dc <_malloc_r+0xac>)
 8008658:	6814      	ldr	r4, [r2, #0]
 800865a:	4621      	mov	r1, r4
 800865c:	b991      	cbnz	r1, 8008684 <_malloc_r+0x54>
 800865e:	4c20      	ldr	r4, [pc, #128]	; (80086e0 <_malloc_r+0xb0>)
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	b91b      	cbnz	r3, 800866c <_malloc_r+0x3c>
 8008664:	4630      	mov	r0, r6
 8008666:	f000 fb05 	bl	8008c74 <_sbrk_r>
 800866a:	6020      	str	r0, [r4, #0]
 800866c:	4629      	mov	r1, r5
 800866e:	4630      	mov	r0, r6
 8008670:	f000 fb00 	bl	8008c74 <_sbrk_r>
 8008674:	1c43      	adds	r3, r0, #1
 8008676:	d124      	bne.n	80086c2 <_malloc_r+0x92>
 8008678:	230c      	movs	r3, #12
 800867a:	6033      	str	r3, [r6, #0]
 800867c:	4630      	mov	r0, r6
 800867e:	f000 fba4 	bl	8008dca <__malloc_unlock>
 8008682:	e7e4      	b.n	800864e <_malloc_r+0x1e>
 8008684:	680b      	ldr	r3, [r1, #0]
 8008686:	1b5b      	subs	r3, r3, r5
 8008688:	d418      	bmi.n	80086bc <_malloc_r+0x8c>
 800868a:	2b0b      	cmp	r3, #11
 800868c:	d90f      	bls.n	80086ae <_malloc_r+0x7e>
 800868e:	600b      	str	r3, [r1, #0]
 8008690:	50cd      	str	r5, [r1, r3]
 8008692:	18cc      	adds	r4, r1, r3
 8008694:	4630      	mov	r0, r6
 8008696:	f000 fb98 	bl	8008dca <__malloc_unlock>
 800869a:	f104 000b 	add.w	r0, r4, #11
 800869e:	1d23      	adds	r3, r4, #4
 80086a0:	f020 0007 	bic.w	r0, r0, #7
 80086a4:	1ac3      	subs	r3, r0, r3
 80086a6:	d0d3      	beq.n	8008650 <_malloc_r+0x20>
 80086a8:	425a      	negs	r2, r3
 80086aa:	50e2      	str	r2, [r4, r3]
 80086ac:	e7d0      	b.n	8008650 <_malloc_r+0x20>
 80086ae:	428c      	cmp	r4, r1
 80086b0:	684b      	ldr	r3, [r1, #4]
 80086b2:	bf16      	itet	ne
 80086b4:	6063      	strne	r3, [r4, #4]
 80086b6:	6013      	streq	r3, [r2, #0]
 80086b8:	460c      	movne	r4, r1
 80086ba:	e7eb      	b.n	8008694 <_malloc_r+0x64>
 80086bc:	460c      	mov	r4, r1
 80086be:	6849      	ldr	r1, [r1, #4]
 80086c0:	e7cc      	b.n	800865c <_malloc_r+0x2c>
 80086c2:	1cc4      	adds	r4, r0, #3
 80086c4:	f024 0403 	bic.w	r4, r4, #3
 80086c8:	42a0      	cmp	r0, r4
 80086ca:	d005      	beq.n	80086d8 <_malloc_r+0xa8>
 80086cc:	1a21      	subs	r1, r4, r0
 80086ce:	4630      	mov	r0, r6
 80086d0:	f000 fad0 	bl	8008c74 <_sbrk_r>
 80086d4:	3001      	adds	r0, #1
 80086d6:	d0cf      	beq.n	8008678 <_malloc_r+0x48>
 80086d8:	6025      	str	r5, [r4, #0]
 80086da:	e7db      	b.n	8008694 <_malloc_r+0x64>
 80086dc:	200002e0 	.word	0x200002e0
 80086e0:	200002e4 	.word	0x200002e4

080086e4 <__sfputc_r>:
 80086e4:	6893      	ldr	r3, [r2, #8]
 80086e6:	3b01      	subs	r3, #1
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	b410      	push	{r4}
 80086ec:	6093      	str	r3, [r2, #8]
 80086ee:	da08      	bge.n	8008702 <__sfputc_r+0x1e>
 80086f0:	6994      	ldr	r4, [r2, #24]
 80086f2:	42a3      	cmp	r3, r4
 80086f4:	db01      	blt.n	80086fa <__sfputc_r+0x16>
 80086f6:	290a      	cmp	r1, #10
 80086f8:	d103      	bne.n	8008702 <__sfputc_r+0x1e>
 80086fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086fe:	f7ff bcab 	b.w	8008058 <__swbuf_r>
 8008702:	6813      	ldr	r3, [r2, #0]
 8008704:	1c58      	adds	r0, r3, #1
 8008706:	6010      	str	r0, [r2, #0]
 8008708:	7019      	strb	r1, [r3, #0]
 800870a:	4608      	mov	r0, r1
 800870c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008710:	4770      	bx	lr

08008712 <__sfputs_r>:
 8008712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008714:	4606      	mov	r6, r0
 8008716:	460f      	mov	r7, r1
 8008718:	4614      	mov	r4, r2
 800871a:	18d5      	adds	r5, r2, r3
 800871c:	42ac      	cmp	r4, r5
 800871e:	d101      	bne.n	8008724 <__sfputs_r+0x12>
 8008720:	2000      	movs	r0, #0
 8008722:	e007      	b.n	8008734 <__sfputs_r+0x22>
 8008724:	463a      	mov	r2, r7
 8008726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800872a:	4630      	mov	r0, r6
 800872c:	f7ff ffda 	bl	80086e4 <__sfputc_r>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	d1f3      	bne.n	800871c <__sfputs_r+0xa>
 8008734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008738 <_vfiprintf_r>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	460c      	mov	r4, r1
 800873e:	b09d      	sub	sp, #116	; 0x74
 8008740:	4617      	mov	r7, r2
 8008742:	461d      	mov	r5, r3
 8008744:	4606      	mov	r6, r0
 8008746:	b118      	cbz	r0, 8008750 <_vfiprintf_r+0x18>
 8008748:	6983      	ldr	r3, [r0, #24]
 800874a:	b90b      	cbnz	r3, 8008750 <_vfiprintf_r+0x18>
 800874c:	f7ff fe34 	bl	80083b8 <__sinit>
 8008750:	4b7c      	ldr	r3, [pc, #496]	; (8008944 <_vfiprintf_r+0x20c>)
 8008752:	429c      	cmp	r4, r3
 8008754:	d158      	bne.n	8008808 <_vfiprintf_r+0xd0>
 8008756:	6874      	ldr	r4, [r6, #4]
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	0718      	lsls	r0, r3, #28
 800875c:	d55e      	bpl.n	800881c <_vfiprintf_r+0xe4>
 800875e:	6923      	ldr	r3, [r4, #16]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d05b      	beq.n	800881c <_vfiprintf_r+0xe4>
 8008764:	2300      	movs	r3, #0
 8008766:	9309      	str	r3, [sp, #36]	; 0x24
 8008768:	2320      	movs	r3, #32
 800876a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800876e:	2330      	movs	r3, #48	; 0x30
 8008770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008774:	9503      	str	r5, [sp, #12]
 8008776:	f04f 0b01 	mov.w	fp, #1
 800877a:	46b8      	mov	r8, r7
 800877c:	4645      	mov	r5, r8
 800877e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008782:	b10b      	cbz	r3, 8008788 <_vfiprintf_r+0x50>
 8008784:	2b25      	cmp	r3, #37	; 0x25
 8008786:	d154      	bne.n	8008832 <_vfiprintf_r+0xfa>
 8008788:	ebb8 0a07 	subs.w	sl, r8, r7
 800878c:	d00b      	beq.n	80087a6 <_vfiprintf_r+0x6e>
 800878e:	4653      	mov	r3, sl
 8008790:	463a      	mov	r2, r7
 8008792:	4621      	mov	r1, r4
 8008794:	4630      	mov	r0, r6
 8008796:	f7ff ffbc 	bl	8008712 <__sfputs_r>
 800879a:	3001      	adds	r0, #1
 800879c:	f000 80c2 	beq.w	8008924 <_vfiprintf_r+0x1ec>
 80087a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a2:	4453      	add	r3, sl
 80087a4:	9309      	str	r3, [sp, #36]	; 0x24
 80087a6:	f898 3000 	ldrb.w	r3, [r8]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 80ba 	beq.w	8008924 <_vfiprintf_r+0x1ec>
 80087b0:	2300      	movs	r3, #0
 80087b2:	f04f 32ff 	mov.w	r2, #4294967295
 80087b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	9307      	str	r3, [sp, #28]
 80087be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087c2:	931a      	str	r3, [sp, #104]	; 0x68
 80087c4:	46a8      	mov	r8, r5
 80087c6:	2205      	movs	r2, #5
 80087c8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80087cc:	485e      	ldr	r0, [pc, #376]	; (8008948 <_vfiprintf_r+0x210>)
 80087ce:	f7f7 fcff 	bl	80001d0 <memchr>
 80087d2:	9b04      	ldr	r3, [sp, #16]
 80087d4:	bb78      	cbnz	r0, 8008836 <_vfiprintf_r+0xfe>
 80087d6:	06d9      	lsls	r1, r3, #27
 80087d8:	bf44      	itt	mi
 80087da:	2220      	movmi	r2, #32
 80087dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087e0:	071a      	lsls	r2, r3, #28
 80087e2:	bf44      	itt	mi
 80087e4:	222b      	movmi	r2, #43	; 0x2b
 80087e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087ea:	782a      	ldrb	r2, [r5, #0]
 80087ec:	2a2a      	cmp	r2, #42	; 0x2a
 80087ee:	d02a      	beq.n	8008846 <_vfiprintf_r+0x10e>
 80087f0:	9a07      	ldr	r2, [sp, #28]
 80087f2:	46a8      	mov	r8, r5
 80087f4:	2000      	movs	r0, #0
 80087f6:	250a      	movs	r5, #10
 80087f8:	4641      	mov	r1, r8
 80087fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087fe:	3b30      	subs	r3, #48	; 0x30
 8008800:	2b09      	cmp	r3, #9
 8008802:	d969      	bls.n	80088d8 <_vfiprintf_r+0x1a0>
 8008804:	b360      	cbz	r0, 8008860 <_vfiprintf_r+0x128>
 8008806:	e024      	b.n	8008852 <_vfiprintf_r+0x11a>
 8008808:	4b50      	ldr	r3, [pc, #320]	; (800894c <_vfiprintf_r+0x214>)
 800880a:	429c      	cmp	r4, r3
 800880c:	d101      	bne.n	8008812 <_vfiprintf_r+0xda>
 800880e:	68b4      	ldr	r4, [r6, #8]
 8008810:	e7a2      	b.n	8008758 <_vfiprintf_r+0x20>
 8008812:	4b4f      	ldr	r3, [pc, #316]	; (8008950 <_vfiprintf_r+0x218>)
 8008814:	429c      	cmp	r4, r3
 8008816:	bf08      	it	eq
 8008818:	68f4      	ldreq	r4, [r6, #12]
 800881a:	e79d      	b.n	8008758 <_vfiprintf_r+0x20>
 800881c:	4621      	mov	r1, r4
 800881e:	4630      	mov	r0, r6
 8008820:	f7ff fc6c 	bl	80080fc <__swsetup_r>
 8008824:	2800      	cmp	r0, #0
 8008826:	d09d      	beq.n	8008764 <_vfiprintf_r+0x2c>
 8008828:	f04f 30ff 	mov.w	r0, #4294967295
 800882c:	b01d      	add	sp, #116	; 0x74
 800882e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008832:	46a8      	mov	r8, r5
 8008834:	e7a2      	b.n	800877c <_vfiprintf_r+0x44>
 8008836:	4a44      	ldr	r2, [pc, #272]	; (8008948 <_vfiprintf_r+0x210>)
 8008838:	1a80      	subs	r0, r0, r2
 800883a:	fa0b f000 	lsl.w	r0, fp, r0
 800883e:	4318      	orrs	r0, r3
 8008840:	9004      	str	r0, [sp, #16]
 8008842:	4645      	mov	r5, r8
 8008844:	e7be      	b.n	80087c4 <_vfiprintf_r+0x8c>
 8008846:	9a03      	ldr	r2, [sp, #12]
 8008848:	1d11      	adds	r1, r2, #4
 800884a:	6812      	ldr	r2, [r2, #0]
 800884c:	9103      	str	r1, [sp, #12]
 800884e:	2a00      	cmp	r2, #0
 8008850:	db01      	blt.n	8008856 <_vfiprintf_r+0x11e>
 8008852:	9207      	str	r2, [sp, #28]
 8008854:	e004      	b.n	8008860 <_vfiprintf_r+0x128>
 8008856:	4252      	negs	r2, r2
 8008858:	f043 0302 	orr.w	r3, r3, #2
 800885c:	9207      	str	r2, [sp, #28]
 800885e:	9304      	str	r3, [sp, #16]
 8008860:	f898 3000 	ldrb.w	r3, [r8]
 8008864:	2b2e      	cmp	r3, #46	; 0x2e
 8008866:	d10e      	bne.n	8008886 <_vfiprintf_r+0x14e>
 8008868:	f898 3001 	ldrb.w	r3, [r8, #1]
 800886c:	2b2a      	cmp	r3, #42	; 0x2a
 800886e:	d138      	bne.n	80088e2 <_vfiprintf_r+0x1aa>
 8008870:	9b03      	ldr	r3, [sp, #12]
 8008872:	1d1a      	adds	r2, r3, #4
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	9203      	str	r2, [sp, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	bfb8      	it	lt
 800887c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008880:	f108 0802 	add.w	r8, r8, #2
 8008884:	9305      	str	r3, [sp, #20]
 8008886:	4d33      	ldr	r5, [pc, #204]	; (8008954 <_vfiprintf_r+0x21c>)
 8008888:	f898 1000 	ldrb.w	r1, [r8]
 800888c:	2203      	movs	r2, #3
 800888e:	4628      	mov	r0, r5
 8008890:	f7f7 fc9e 	bl	80001d0 <memchr>
 8008894:	b140      	cbz	r0, 80088a8 <_vfiprintf_r+0x170>
 8008896:	2340      	movs	r3, #64	; 0x40
 8008898:	1b40      	subs	r0, r0, r5
 800889a:	fa03 f000 	lsl.w	r0, r3, r0
 800889e:	9b04      	ldr	r3, [sp, #16]
 80088a0:	4303      	orrs	r3, r0
 80088a2:	f108 0801 	add.w	r8, r8, #1
 80088a6:	9304      	str	r3, [sp, #16]
 80088a8:	f898 1000 	ldrb.w	r1, [r8]
 80088ac:	482a      	ldr	r0, [pc, #168]	; (8008958 <_vfiprintf_r+0x220>)
 80088ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088b2:	2206      	movs	r2, #6
 80088b4:	f108 0701 	add.w	r7, r8, #1
 80088b8:	f7f7 fc8a 	bl	80001d0 <memchr>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d037      	beq.n	8008930 <_vfiprintf_r+0x1f8>
 80088c0:	4b26      	ldr	r3, [pc, #152]	; (800895c <_vfiprintf_r+0x224>)
 80088c2:	bb1b      	cbnz	r3, 800890c <_vfiprintf_r+0x1d4>
 80088c4:	9b03      	ldr	r3, [sp, #12]
 80088c6:	3307      	adds	r3, #7
 80088c8:	f023 0307 	bic.w	r3, r3, #7
 80088cc:	3308      	adds	r3, #8
 80088ce:	9303      	str	r3, [sp, #12]
 80088d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d2:	444b      	add	r3, r9
 80088d4:	9309      	str	r3, [sp, #36]	; 0x24
 80088d6:	e750      	b.n	800877a <_vfiprintf_r+0x42>
 80088d8:	fb05 3202 	mla	r2, r5, r2, r3
 80088dc:	2001      	movs	r0, #1
 80088de:	4688      	mov	r8, r1
 80088e0:	e78a      	b.n	80087f8 <_vfiprintf_r+0xc0>
 80088e2:	2300      	movs	r3, #0
 80088e4:	f108 0801 	add.w	r8, r8, #1
 80088e8:	9305      	str	r3, [sp, #20]
 80088ea:	4619      	mov	r1, r3
 80088ec:	250a      	movs	r5, #10
 80088ee:	4640      	mov	r0, r8
 80088f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088f4:	3a30      	subs	r2, #48	; 0x30
 80088f6:	2a09      	cmp	r2, #9
 80088f8:	d903      	bls.n	8008902 <_vfiprintf_r+0x1ca>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0c3      	beq.n	8008886 <_vfiprintf_r+0x14e>
 80088fe:	9105      	str	r1, [sp, #20]
 8008900:	e7c1      	b.n	8008886 <_vfiprintf_r+0x14e>
 8008902:	fb05 2101 	mla	r1, r5, r1, r2
 8008906:	2301      	movs	r3, #1
 8008908:	4680      	mov	r8, r0
 800890a:	e7f0      	b.n	80088ee <_vfiprintf_r+0x1b6>
 800890c:	ab03      	add	r3, sp, #12
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	4622      	mov	r2, r4
 8008912:	4b13      	ldr	r3, [pc, #76]	; (8008960 <_vfiprintf_r+0x228>)
 8008914:	a904      	add	r1, sp, #16
 8008916:	4630      	mov	r0, r6
 8008918:	f3af 8000 	nop.w
 800891c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008920:	4681      	mov	r9, r0
 8008922:	d1d5      	bne.n	80088d0 <_vfiprintf_r+0x198>
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	065b      	lsls	r3, r3, #25
 8008928:	f53f af7e 	bmi.w	8008828 <_vfiprintf_r+0xf0>
 800892c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800892e:	e77d      	b.n	800882c <_vfiprintf_r+0xf4>
 8008930:	ab03      	add	r3, sp, #12
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	4622      	mov	r2, r4
 8008936:	4b0a      	ldr	r3, [pc, #40]	; (8008960 <_vfiprintf_r+0x228>)
 8008938:	a904      	add	r1, sp, #16
 800893a:	4630      	mov	r0, r6
 800893c:	f000 f888 	bl	8008a50 <_printf_i>
 8008940:	e7ec      	b.n	800891c <_vfiprintf_r+0x1e4>
 8008942:	bf00      	nop
 8008944:	08009408 	.word	0x08009408
 8008948:	08009448 	.word	0x08009448
 800894c:	08009428 	.word	0x08009428
 8008950:	080093e8 	.word	0x080093e8
 8008954:	0800944e 	.word	0x0800944e
 8008958:	08009452 	.word	0x08009452
 800895c:	00000000 	.word	0x00000000
 8008960:	08008713 	.word	0x08008713

08008964 <_printf_common>:
 8008964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008968:	4691      	mov	r9, r2
 800896a:	461f      	mov	r7, r3
 800896c:	688a      	ldr	r2, [r1, #8]
 800896e:	690b      	ldr	r3, [r1, #16]
 8008970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008974:	4293      	cmp	r3, r2
 8008976:	bfb8      	it	lt
 8008978:	4613      	movlt	r3, r2
 800897a:	f8c9 3000 	str.w	r3, [r9]
 800897e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008982:	4606      	mov	r6, r0
 8008984:	460c      	mov	r4, r1
 8008986:	b112      	cbz	r2, 800898e <_printf_common+0x2a>
 8008988:	3301      	adds	r3, #1
 800898a:	f8c9 3000 	str.w	r3, [r9]
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	0699      	lsls	r1, r3, #26
 8008992:	bf42      	ittt	mi
 8008994:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008998:	3302      	addmi	r3, #2
 800899a:	f8c9 3000 	strmi.w	r3, [r9]
 800899e:	6825      	ldr	r5, [r4, #0]
 80089a0:	f015 0506 	ands.w	r5, r5, #6
 80089a4:	d107      	bne.n	80089b6 <_printf_common+0x52>
 80089a6:	f104 0a19 	add.w	sl, r4, #25
 80089aa:	68e3      	ldr	r3, [r4, #12]
 80089ac:	f8d9 2000 	ldr.w	r2, [r9]
 80089b0:	1a9b      	subs	r3, r3, r2
 80089b2:	42ab      	cmp	r3, r5
 80089b4:	dc28      	bgt.n	8008a08 <_printf_common+0xa4>
 80089b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80089ba:	6822      	ldr	r2, [r4, #0]
 80089bc:	3300      	adds	r3, #0
 80089be:	bf18      	it	ne
 80089c0:	2301      	movne	r3, #1
 80089c2:	0692      	lsls	r2, r2, #26
 80089c4:	d42d      	bmi.n	8008a22 <_printf_common+0xbe>
 80089c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089ca:	4639      	mov	r1, r7
 80089cc:	4630      	mov	r0, r6
 80089ce:	47c0      	blx	r8
 80089d0:	3001      	adds	r0, #1
 80089d2:	d020      	beq.n	8008a16 <_printf_common+0xb2>
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	68e5      	ldr	r5, [r4, #12]
 80089d8:	f8d9 2000 	ldr.w	r2, [r9]
 80089dc:	f003 0306 	and.w	r3, r3, #6
 80089e0:	2b04      	cmp	r3, #4
 80089e2:	bf08      	it	eq
 80089e4:	1aad      	subeq	r5, r5, r2
 80089e6:	68a3      	ldr	r3, [r4, #8]
 80089e8:	6922      	ldr	r2, [r4, #16]
 80089ea:	bf0c      	ite	eq
 80089ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089f0:	2500      	movne	r5, #0
 80089f2:	4293      	cmp	r3, r2
 80089f4:	bfc4      	itt	gt
 80089f6:	1a9b      	subgt	r3, r3, r2
 80089f8:	18ed      	addgt	r5, r5, r3
 80089fa:	f04f 0900 	mov.w	r9, #0
 80089fe:	341a      	adds	r4, #26
 8008a00:	454d      	cmp	r5, r9
 8008a02:	d11a      	bne.n	8008a3a <_printf_common+0xd6>
 8008a04:	2000      	movs	r0, #0
 8008a06:	e008      	b.n	8008a1a <_printf_common+0xb6>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	4652      	mov	r2, sl
 8008a0c:	4639      	mov	r1, r7
 8008a0e:	4630      	mov	r0, r6
 8008a10:	47c0      	blx	r8
 8008a12:	3001      	adds	r0, #1
 8008a14:	d103      	bne.n	8008a1e <_printf_common+0xba>
 8008a16:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a1e:	3501      	adds	r5, #1
 8008a20:	e7c3      	b.n	80089aa <_printf_common+0x46>
 8008a22:	18e1      	adds	r1, r4, r3
 8008a24:	1c5a      	adds	r2, r3, #1
 8008a26:	2030      	movs	r0, #48	; 0x30
 8008a28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a2c:	4422      	add	r2, r4
 8008a2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a36:	3302      	adds	r3, #2
 8008a38:	e7c5      	b.n	80089c6 <_printf_common+0x62>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	4622      	mov	r2, r4
 8008a3e:	4639      	mov	r1, r7
 8008a40:	4630      	mov	r0, r6
 8008a42:	47c0      	blx	r8
 8008a44:	3001      	adds	r0, #1
 8008a46:	d0e6      	beq.n	8008a16 <_printf_common+0xb2>
 8008a48:	f109 0901 	add.w	r9, r9, #1
 8008a4c:	e7d8      	b.n	8008a00 <_printf_common+0x9c>
	...

08008a50 <_printf_i>:
 8008a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a54:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008a58:	460c      	mov	r4, r1
 8008a5a:	7e09      	ldrb	r1, [r1, #24]
 8008a5c:	b085      	sub	sp, #20
 8008a5e:	296e      	cmp	r1, #110	; 0x6e
 8008a60:	4617      	mov	r7, r2
 8008a62:	4606      	mov	r6, r0
 8008a64:	4698      	mov	r8, r3
 8008a66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a68:	f000 80b3 	beq.w	8008bd2 <_printf_i+0x182>
 8008a6c:	d822      	bhi.n	8008ab4 <_printf_i+0x64>
 8008a6e:	2963      	cmp	r1, #99	; 0x63
 8008a70:	d036      	beq.n	8008ae0 <_printf_i+0x90>
 8008a72:	d80a      	bhi.n	8008a8a <_printf_i+0x3a>
 8008a74:	2900      	cmp	r1, #0
 8008a76:	f000 80b9 	beq.w	8008bec <_printf_i+0x19c>
 8008a7a:	2958      	cmp	r1, #88	; 0x58
 8008a7c:	f000 8083 	beq.w	8008b86 <_printf_i+0x136>
 8008a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a84:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008a88:	e032      	b.n	8008af0 <_printf_i+0xa0>
 8008a8a:	2964      	cmp	r1, #100	; 0x64
 8008a8c:	d001      	beq.n	8008a92 <_printf_i+0x42>
 8008a8e:	2969      	cmp	r1, #105	; 0x69
 8008a90:	d1f6      	bne.n	8008a80 <_printf_i+0x30>
 8008a92:	6820      	ldr	r0, [r4, #0]
 8008a94:	6813      	ldr	r3, [r2, #0]
 8008a96:	0605      	lsls	r5, r0, #24
 8008a98:	f103 0104 	add.w	r1, r3, #4
 8008a9c:	d52a      	bpl.n	8008af4 <_printf_i+0xa4>
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6011      	str	r1, [r2, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	da03      	bge.n	8008aae <_printf_i+0x5e>
 8008aa6:	222d      	movs	r2, #45	; 0x2d
 8008aa8:	425b      	negs	r3, r3
 8008aaa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008aae:	486f      	ldr	r0, [pc, #444]	; (8008c6c <_printf_i+0x21c>)
 8008ab0:	220a      	movs	r2, #10
 8008ab2:	e039      	b.n	8008b28 <_printf_i+0xd8>
 8008ab4:	2973      	cmp	r1, #115	; 0x73
 8008ab6:	f000 809d 	beq.w	8008bf4 <_printf_i+0x1a4>
 8008aba:	d808      	bhi.n	8008ace <_printf_i+0x7e>
 8008abc:	296f      	cmp	r1, #111	; 0x6f
 8008abe:	d020      	beq.n	8008b02 <_printf_i+0xb2>
 8008ac0:	2970      	cmp	r1, #112	; 0x70
 8008ac2:	d1dd      	bne.n	8008a80 <_printf_i+0x30>
 8008ac4:	6823      	ldr	r3, [r4, #0]
 8008ac6:	f043 0320 	orr.w	r3, r3, #32
 8008aca:	6023      	str	r3, [r4, #0]
 8008acc:	e003      	b.n	8008ad6 <_printf_i+0x86>
 8008ace:	2975      	cmp	r1, #117	; 0x75
 8008ad0:	d017      	beq.n	8008b02 <_printf_i+0xb2>
 8008ad2:	2978      	cmp	r1, #120	; 0x78
 8008ad4:	d1d4      	bne.n	8008a80 <_printf_i+0x30>
 8008ad6:	2378      	movs	r3, #120	; 0x78
 8008ad8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008adc:	4864      	ldr	r0, [pc, #400]	; (8008c70 <_printf_i+0x220>)
 8008ade:	e055      	b.n	8008b8c <_printf_i+0x13c>
 8008ae0:	6813      	ldr	r3, [r2, #0]
 8008ae2:	1d19      	adds	r1, r3, #4
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6011      	str	r1, [r2, #0]
 8008ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008af0:	2301      	movs	r3, #1
 8008af2:	e08c      	b.n	8008c0e <_printf_i+0x1be>
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6011      	str	r1, [r2, #0]
 8008af8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008afc:	bf18      	it	ne
 8008afe:	b21b      	sxthne	r3, r3
 8008b00:	e7cf      	b.n	8008aa2 <_printf_i+0x52>
 8008b02:	6813      	ldr	r3, [r2, #0]
 8008b04:	6825      	ldr	r5, [r4, #0]
 8008b06:	1d18      	adds	r0, r3, #4
 8008b08:	6010      	str	r0, [r2, #0]
 8008b0a:	0628      	lsls	r0, r5, #24
 8008b0c:	d501      	bpl.n	8008b12 <_printf_i+0xc2>
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	e002      	b.n	8008b18 <_printf_i+0xc8>
 8008b12:	0668      	lsls	r0, r5, #25
 8008b14:	d5fb      	bpl.n	8008b0e <_printf_i+0xbe>
 8008b16:	881b      	ldrh	r3, [r3, #0]
 8008b18:	4854      	ldr	r0, [pc, #336]	; (8008c6c <_printf_i+0x21c>)
 8008b1a:	296f      	cmp	r1, #111	; 0x6f
 8008b1c:	bf14      	ite	ne
 8008b1e:	220a      	movne	r2, #10
 8008b20:	2208      	moveq	r2, #8
 8008b22:	2100      	movs	r1, #0
 8008b24:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b28:	6865      	ldr	r5, [r4, #4]
 8008b2a:	60a5      	str	r5, [r4, #8]
 8008b2c:	2d00      	cmp	r5, #0
 8008b2e:	f2c0 8095 	blt.w	8008c5c <_printf_i+0x20c>
 8008b32:	6821      	ldr	r1, [r4, #0]
 8008b34:	f021 0104 	bic.w	r1, r1, #4
 8008b38:	6021      	str	r1, [r4, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d13d      	bne.n	8008bba <_printf_i+0x16a>
 8008b3e:	2d00      	cmp	r5, #0
 8008b40:	f040 808e 	bne.w	8008c60 <_printf_i+0x210>
 8008b44:	4665      	mov	r5, ip
 8008b46:	2a08      	cmp	r2, #8
 8008b48:	d10b      	bne.n	8008b62 <_printf_i+0x112>
 8008b4a:	6823      	ldr	r3, [r4, #0]
 8008b4c:	07db      	lsls	r3, r3, #31
 8008b4e:	d508      	bpl.n	8008b62 <_printf_i+0x112>
 8008b50:	6923      	ldr	r3, [r4, #16]
 8008b52:	6862      	ldr	r2, [r4, #4]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	bfde      	ittt	le
 8008b58:	2330      	movle	r3, #48	; 0x30
 8008b5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b62:	ebac 0305 	sub.w	r3, ip, r5
 8008b66:	6123      	str	r3, [r4, #16]
 8008b68:	f8cd 8000 	str.w	r8, [sp]
 8008b6c:	463b      	mov	r3, r7
 8008b6e:	aa03      	add	r2, sp, #12
 8008b70:	4621      	mov	r1, r4
 8008b72:	4630      	mov	r0, r6
 8008b74:	f7ff fef6 	bl	8008964 <_printf_common>
 8008b78:	3001      	adds	r0, #1
 8008b7a:	d14d      	bne.n	8008c18 <_printf_i+0x1c8>
 8008b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b80:	b005      	add	sp, #20
 8008b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b86:	4839      	ldr	r0, [pc, #228]	; (8008c6c <_printf_i+0x21c>)
 8008b88:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008b8c:	6813      	ldr	r3, [r2, #0]
 8008b8e:	6821      	ldr	r1, [r4, #0]
 8008b90:	1d1d      	adds	r5, r3, #4
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6015      	str	r5, [r2, #0]
 8008b96:	060a      	lsls	r2, r1, #24
 8008b98:	d50b      	bpl.n	8008bb2 <_printf_i+0x162>
 8008b9a:	07ca      	lsls	r2, r1, #31
 8008b9c:	bf44      	itt	mi
 8008b9e:	f041 0120 	orrmi.w	r1, r1, #32
 8008ba2:	6021      	strmi	r1, [r4, #0]
 8008ba4:	b91b      	cbnz	r3, 8008bae <_printf_i+0x15e>
 8008ba6:	6822      	ldr	r2, [r4, #0]
 8008ba8:	f022 0220 	bic.w	r2, r2, #32
 8008bac:	6022      	str	r2, [r4, #0]
 8008bae:	2210      	movs	r2, #16
 8008bb0:	e7b7      	b.n	8008b22 <_printf_i+0xd2>
 8008bb2:	064d      	lsls	r5, r1, #25
 8008bb4:	bf48      	it	mi
 8008bb6:	b29b      	uxthmi	r3, r3
 8008bb8:	e7ef      	b.n	8008b9a <_printf_i+0x14a>
 8008bba:	4665      	mov	r5, ip
 8008bbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bc0:	fb02 3311 	mls	r3, r2, r1, r3
 8008bc4:	5cc3      	ldrb	r3, [r0, r3]
 8008bc6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008bca:	460b      	mov	r3, r1
 8008bcc:	2900      	cmp	r1, #0
 8008bce:	d1f5      	bne.n	8008bbc <_printf_i+0x16c>
 8008bd0:	e7b9      	b.n	8008b46 <_printf_i+0xf6>
 8008bd2:	6813      	ldr	r3, [r2, #0]
 8008bd4:	6825      	ldr	r5, [r4, #0]
 8008bd6:	6961      	ldr	r1, [r4, #20]
 8008bd8:	1d18      	adds	r0, r3, #4
 8008bda:	6010      	str	r0, [r2, #0]
 8008bdc:	0628      	lsls	r0, r5, #24
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	d501      	bpl.n	8008be6 <_printf_i+0x196>
 8008be2:	6019      	str	r1, [r3, #0]
 8008be4:	e002      	b.n	8008bec <_printf_i+0x19c>
 8008be6:	066a      	lsls	r2, r5, #25
 8008be8:	d5fb      	bpl.n	8008be2 <_printf_i+0x192>
 8008bea:	8019      	strh	r1, [r3, #0]
 8008bec:	2300      	movs	r3, #0
 8008bee:	6123      	str	r3, [r4, #16]
 8008bf0:	4665      	mov	r5, ip
 8008bf2:	e7b9      	b.n	8008b68 <_printf_i+0x118>
 8008bf4:	6813      	ldr	r3, [r2, #0]
 8008bf6:	1d19      	adds	r1, r3, #4
 8008bf8:	6011      	str	r1, [r2, #0]
 8008bfa:	681d      	ldr	r5, [r3, #0]
 8008bfc:	6862      	ldr	r2, [r4, #4]
 8008bfe:	2100      	movs	r1, #0
 8008c00:	4628      	mov	r0, r5
 8008c02:	f7f7 fae5 	bl	80001d0 <memchr>
 8008c06:	b108      	cbz	r0, 8008c0c <_printf_i+0x1bc>
 8008c08:	1b40      	subs	r0, r0, r5
 8008c0a:	6060      	str	r0, [r4, #4]
 8008c0c:	6863      	ldr	r3, [r4, #4]
 8008c0e:	6123      	str	r3, [r4, #16]
 8008c10:	2300      	movs	r3, #0
 8008c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c16:	e7a7      	b.n	8008b68 <_printf_i+0x118>
 8008c18:	6923      	ldr	r3, [r4, #16]
 8008c1a:	462a      	mov	r2, r5
 8008c1c:	4639      	mov	r1, r7
 8008c1e:	4630      	mov	r0, r6
 8008c20:	47c0      	blx	r8
 8008c22:	3001      	adds	r0, #1
 8008c24:	d0aa      	beq.n	8008b7c <_printf_i+0x12c>
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	079b      	lsls	r3, r3, #30
 8008c2a:	d413      	bmi.n	8008c54 <_printf_i+0x204>
 8008c2c:	68e0      	ldr	r0, [r4, #12]
 8008c2e:	9b03      	ldr	r3, [sp, #12]
 8008c30:	4298      	cmp	r0, r3
 8008c32:	bfb8      	it	lt
 8008c34:	4618      	movlt	r0, r3
 8008c36:	e7a3      	b.n	8008b80 <_printf_i+0x130>
 8008c38:	2301      	movs	r3, #1
 8008c3a:	464a      	mov	r2, r9
 8008c3c:	4639      	mov	r1, r7
 8008c3e:	4630      	mov	r0, r6
 8008c40:	47c0      	blx	r8
 8008c42:	3001      	adds	r0, #1
 8008c44:	d09a      	beq.n	8008b7c <_printf_i+0x12c>
 8008c46:	3501      	adds	r5, #1
 8008c48:	68e3      	ldr	r3, [r4, #12]
 8008c4a:	9a03      	ldr	r2, [sp, #12]
 8008c4c:	1a9b      	subs	r3, r3, r2
 8008c4e:	42ab      	cmp	r3, r5
 8008c50:	dcf2      	bgt.n	8008c38 <_printf_i+0x1e8>
 8008c52:	e7eb      	b.n	8008c2c <_printf_i+0x1dc>
 8008c54:	2500      	movs	r5, #0
 8008c56:	f104 0919 	add.w	r9, r4, #25
 8008c5a:	e7f5      	b.n	8008c48 <_printf_i+0x1f8>
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1ac      	bne.n	8008bba <_printf_i+0x16a>
 8008c60:	7803      	ldrb	r3, [r0, #0]
 8008c62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c6a:	e76c      	b.n	8008b46 <_printf_i+0xf6>
 8008c6c:	08009459 	.word	0x08009459
 8008c70:	0800946a 	.word	0x0800946a

08008c74 <_sbrk_r>:
 8008c74:	b538      	push	{r3, r4, r5, lr}
 8008c76:	4c06      	ldr	r4, [pc, #24]	; (8008c90 <_sbrk_r+0x1c>)
 8008c78:	2300      	movs	r3, #0
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	4608      	mov	r0, r1
 8008c7e:	6023      	str	r3, [r4, #0]
 8008c80:	f7f8 fcc0 	bl	8001604 <_sbrk>
 8008c84:	1c43      	adds	r3, r0, #1
 8008c86:	d102      	bne.n	8008c8e <_sbrk_r+0x1a>
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	b103      	cbz	r3, 8008c8e <_sbrk_r+0x1a>
 8008c8c:	602b      	str	r3, [r5, #0]
 8008c8e:	bd38      	pop	{r3, r4, r5, pc}
 8008c90:	20004664 	.word	0x20004664

08008c94 <__sread>:
 8008c94:	b510      	push	{r4, lr}
 8008c96:	460c      	mov	r4, r1
 8008c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c9c:	f000 f896 	bl	8008dcc <_read_r>
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	bfab      	itete	ge
 8008ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ca8:	181b      	addge	r3, r3, r0
 8008caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cae:	bfac      	ite	ge
 8008cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cb2:	81a3      	strhlt	r3, [r4, #12]
 8008cb4:	bd10      	pop	{r4, pc}

08008cb6 <__swrite>:
 8008cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cba:	461f      	mov	r7, r3
 8008cbc:	898b      	ldrh	r3, [r1, #12]
 8008cbe:	05db      	lsls	r3, r3, #23
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	4616      	mov	r6, r2
 8008cc6:	d505      	bpl.n	8008cd4 <__swrite+0x1e>
 8008cc8:	2302      	movs	r3, #2
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd0:	f000 f868 	bl	8008da4 <_lseek_r>
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cde:	81a3      	strh	r3, [r4, #12]
 8008ce0:	4632      	mov	r2, r6
 8008ce2:	463b      	mov	r3, r7
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cea:	f000 b817 	b.w	8008d1c <_write_r>

08008cee <__sseek>:
 8008cee:	b510      	push	{r4, lr}
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf6:	f000 f855 	bl	8008da4 <_lseek_r>
 8008cfa:	1c43      	adds	r3, r0, #1
 8008cfc:	89a3      	ldrh	r3, [r4, #12]
 8008cfe:	bf15      	itete	ne
 8008d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d0a:	81a3      	strheq	r3, [r4, #12]
 8008d0c:	bf18      	it	ne
 8008d0e:	81a3      	strhne	r3, [r4, #12]
 8008d10:	bd10      	pop	{r4, pc}

08008d12 <__sclose>:
 8008d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d16:	f000 b813 	b.w	8008d40 <_close_r>
	...

08008d1c <_write_r>:
 8008d1c:	b538      	push	{r3, r4, r5, lr}
 8008d1e:	4c07      	ldr	r4, [pc, #28]	; (8008d3c <_write_r+0x20>)
 8008d20:	4605      	mov	r5, r0
 8008d22:	4608      	mov	r0, r1
 8008d24:	4611      	mov	r1, r2
 8008d26:	2200      	movs	r2, #0
 8008d28:	6022      	str	r2, [r4, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	f7f8 fc19 	bl	8001562 <_write>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d102      	bne.n	8008d3a <_write_r+0x1e>
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	b103      	cbz	r3, 8008d3a <_write_r+0x1e>
 8008d38:	602b      	str	r3, [r5, #0]
 8008d3a:	bd38      	pop	{r3, r4, r5, pc}
 8008d3c:	20004664 	.word	0x20004664

08008d40 <_close_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	4c06      	ldr	r4, [pc, #24]	; (8008d5c <_close_r+0x1c>)
 8008d44:	2300      	movs	r3, #0
 8008d46:	4605      	mov	r5, r0
 8008d48:	4608      	mov	r0, r1
 8008d4a:	6023      	str	r3, [r4, #0]
 8008d4c:	f7f8 fc25 	bl	800159a <_close>
 8008d50:	1c43      	adds	r3, r0, #1
 8008d52:	d102      	bne.n	8008d5a <_close_r+0x1a>
 8008d54:	6823      	ldr	r3, [r4, #0]
 8008d56:	b103      	cbz	r3, 8008d5a <_close_r+0x1a>
 8008d58:	602b      	str	r3, [r5, #0]
 8008d5a:	bd38      	pop	{r3, r4, r5, pc}
 8008d5c:	20004664 	.word	0x20004664

08008d60 <_fstat_r>:
 8008d60:	b538      	push	{r3, r4, r5, lr}
 8008d62:	4c07      	ldr	r4, [pc, #28]	; (8008d80 <_fstat_r+0x20>)
 8008d64:	2300      	movs	r3, #0
 8008d66:	4605      	mov	r5, r0
 8008d68:	4608      	mov	r0, r1
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	f7f8 fc20 	bl	80015b2 <_fstat>
 8008d72:	1c43      	adds	r3, r0, #1
 8008d74:	d102      	bne.n	8008d7c <_fstat_r+0x1c>
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	b103      	cbz	r3, 8008d7c <_fstat_r+0x1c>
 8008d7a:	602b      	str	r3, [r5, #0]
 8008d7c:	bd38      	pop	{r3, r4, r5, pc}
 8008d7e:	bf00      	nop
 8008d80:	20004664 	.word	0x20004664

08008d84 <_isatty_r>:
 8008d84:	b538      	push	{r3, r4, r5, lr}
 8008d86:	4c06      	ldr	r4, [pc, #24]	; (8008da0 <_isatty_r+0x1c>)
 8008d88:	2300      	movs	r3, #0
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	4608      	mov	r0, r1
 8008d8e:	6023      	str	r3, [r4, #0]
 8008d90:	f7f8 fc1f 	bl	80015d2 <_isatty>
 8008d94:	1c43      	adds	r3, r0, #1
 8008d96:	d102      	bne.n	8008d9e <_isatty_r+0x1a>
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	b103      	cbz	r3, 8008d9e <_isatty_r+0x1a>
 8008d9c:	602b      	str	r3, [r5, #0]
 8008d9e:	bd38      	pop	{r3, r4, r5, pc}
 8008da0:	20004664 	.word	0x20004664

08008da4 <_lseek_r>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	4c07      	ldr	r4, [pc, #28]	; (8008dc4 <_lseek_r+0x20>)
 8008da8:	4605      	mov	r5, r0
 8008daa:	4608      	mov	r0, r1
 8008dac:	4611      	mov	r1, r2
 8008dae:	2200      	movs	r2, #0
 8008db0:	6022      	str	r2, [r4, #0]
 8008db2:	461a      	mov	r2, r3
 8008db4:	f7f8 fc18 	bl	80015e8 <_lseek>
 8008db8:	1c43      	adds	r3, r0, #1
 8008dba:	d102      	bne.n	8008dc2 <_lseek_r+0x1e>
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	b103      	cbz	r3, 8008dc2 <_lseek_r+0x1e>
 8008dc0:	602b      	str	r3, [r5, #0]
 8008dc2:	bd38      	pop	{r3, r4, r5, pc}
 8008dc4:	20004664 	.word	0x20004664

08008dc8 <__malloc_lock>:
 8008dc8:	4770      	bx	lr

08008dca <__malloc_unlock>:
 8008dca:	4770      	bx	lr

08008dcc <_read_r>:
 8008dcc:	b538      	push	{r3, r4, r5, lr}
 8008dce:	4c07      	ldr	r4, [pc, #28]	; (8008dec <_read_r+0x20>)
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	4608      	mov	r0, r1
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	6022      	str	r2, [r4, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	f7f8 fba4 	bl	8001528 <_read>
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	d102      	bne.n	8008dea <_read_r+0x1e>
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	b103      	cbz	r3, 8008dea <_read_r+0x1e>
 8008de8:	602b      	str	r3, [r5, #0]
 8008dea:	bd38      	pop	{r3, r4, r5, pc}
 8008dec:	20004664 	.word	0x20004664

08008df0 <_init>:
 8008df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df2:	bf00      	nop
 8008df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008df6:	bc08      	pop	{r3}
 8008df8:	469e      	mov	lr, r3
 8008dfa:	4770      	bx	lr

08008dfc <_fini>:
 8008dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfe:	bf00      	nop
 8008e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e02:	bc08      	pop	{r3}
 8008e04:	469e      	mov	lr, r3
 8008e06:	4770      	bx	lr
